// Generated by CoffeeScript 2.2.2
var Panel;

Panel = (function() {
  class Panel {
    constructor(parentElement, object, posY = 0, posX = 0, isShowOverlay = true, isCharacterPallet = false, isEffected = false) {
      this.redrawOverlay = this.redrawOverlay.bind(this);
      this.parentElement = parentElement;
      this.object = object;
      this.posY = posY;
      this.posX = posX;
      this.isShowOverlay = isShowOverlay;
      this.isCharacterPallet = isCharacterPallet;
      this.isEffected = isEffected;
      this.divObject = $('<div>').addClass(this.constructor.CLASSNAME).css({
        width: this.constructor.SIZE_X,
        height: this.constructor.SIZE_Y,
        top: this.posY,
        left: this.posX
      }).appendTo(this.parentElement);
      this.draw();
    }

    // アイコンがドラッグ開始された時
    onIconDragStart(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      // キャラクター出撃に使っていいパネルではないなら帰る
      if (!this.isCharacterPallet) {
        return;
      }
      // キャラクター出撃モードではないので帰る
      if (!GameManager.isMode.characterPick) {
        return;
      }
      // キャラクターではないので帰る
      if (!this.object.isCharacterObject()) {
        return;
      }
      // 既に出撃中なので帰る
      if (this.object.isInField()) {
        return;
      }
      // 既に出撃中なので帰る
      if (this.isCostOver()) {
        return;
      }
      CharacterPalletManager.pickCharacter(this.object);
      return true;
    }

    draw(level = null) {
      $(this.divObject).find('*').remove();
      this.divObject.removeClass('panel_character panel_enemy panel_presentbox');
      if (this.object !== null) {
        this.drawCommon(level);
        if (this.object.isCharacterObject()) {
          return this.drawCharacter(level);
        } else if (this.object.isEnemyObject()) {
          return this.drawEnemy();
        } else if (this.object.isPresentboxObject()) {
          return this.drawPresentbox();
        }
      } else {
        return this.clear();
      }
    }

    drawCommon(level = null) {
      var atk, dodge, hit, hpmax, list, mdef, move, pdef, range, v;
      // アイコン
      $(this.divObject).append($('<div>').addClass('field field_icon').css({
        top: 32,
        left: 5,
        width: 80,
        height: 80,
        "background-image": 'url(' + this.object.getBaseImage() + ')'
      }).on('mousedown', (evt) => {
        if (evt.which === 1) {
          this.onIconDragStart.bind(this)(evt);
        }
        return true;
      }));
      // レベル
      $(this.divObject).append($('<div>').addClass('field field_level').css({
        top: 95,
        left: 5,
        width: 75,
        height: 20
      }).html('Lv.' + ObjectBase.status2html(this.object.getLevel(level))));
      // 名前
      $(this.divObject).append($('<div>').addClass('field field_name').css({
        top: 5,
        left: 10,
        width: 190,
        height: 20,
        color: '#ffffff',
        'font-weight': 'bold',
        'text-align': 'left',
        'line-height': '20px'
      }).html(this.object.getCharacterName()));
      // 攻撃力
      if (this.isEffected) {
        [v, list] = this.object.getAttackEffected();
      } else {
        v = this.object.getAttack(level);
        list = [];
      }
      atk = $('<div>').addClass('field field_attack ' + (this.object.getAttackType() === '物理' ? 'field_attack_physic' : 'field_attack_magic')).css({
        top: 30,
        left: 130,
        width: 80,
        height: 20
      }).html(ObjectBase.status2html(v));
      if (list.length > 0) {
        atk.tooltip({
          placement: 'top',
          title: CharacterBase.effects2str(list),
          html: true
        });
        atk.addClass('effected');
      }
      $(this.divObject).append(atk);
      // 物理防御力
      if (this.isEffected) {
        [v, list] = this.object.getPDefEffected();
      } else {
        v = this.object.getPDef(level);
        list = [];
      }
      pdef = $('<div>').addClass('field field_pdef').css({
        top: 51,
        left: 130,
        width: 80,
        height: 20
      }).html(ObjectBase.status2html(v));
      if (list.length > 0) {
        pdef.tooltip({
          placement: 'top',
          title: CharacterBase.effects2str(list),
          html: true
        });
        pdef.addClass('effected');
      }
      $(this.divObject).append(pdef);
      // 魔法防御力
      if (this.isEffected) {
        [v, list] = this.object.getMDefEffected();
      } else {
        v = this.object.getMDef(level);
        list = [];
      }
      mdef = $('<div>').addClass('field field_mdef').css({
        top: 71,
        left: 130,
        width: 80,
        height: 20
      }).html(ObjectBase.status2html(v));
      if (list.length > 0) {
        mdef.tooltip({
          placement: 'top',
          title: CharacterBase.effects2str(list),
          html: true
        });
        mdef.addClass('effected');
      }
      $(this.divObject).append(mdef);
      // HP
      $(this.divObject).append($('<div>').addClass('field field_hp').css({
        top: 6,
        left: 200,
        width: 85,
        height: 20
      }).html(ObjectBase.status2html(this.object.getHp())));
      // HP/
      $(this.divObject).append($('<div>').addClass('label label_hp_split').css({
        top: 7,
        left: 280,
        width: 20,
        height: 20
      }).html('/'));
      // HP最大
      if (this.isEffected) {
        [v, list] = this.object.getHpMaxEffected();
      } else {
        v = this.object.getHpMax(level);
        list = [];
      }
      hpmax = $('<div>').addClass('field field_hp_max').css({
        top: 6,
        left: 300,
        width: 85,
        height: 20
      }).html(ObjectBase.status2html(v));
      if (list.length > 0) {
        hpmax.tooltip({
          placement: 'top',
          title: CharacterBase.effects2str(list),
          html: true
        });
        hpmax.addClass('effected');
      }
      $(this.divObject).append(hpmax);
      // 命中率
      if (this.isEffected) {
        [v, list] = this.object.getHitRateEffected();
      } else {
        v = this.object.getHitRate();
        list = [];
      }
      hit = $('<div>').addClass('field field_hit_rate').css({
        top: 30,
        left: 260,
        width: 35,
        height: 20
      }).html(ObjectBase.status2html(v));
      if (list.length > 0) {
        hit.tooltip({
          placement: 'top',
          title: CharacterBase.effects2str(list),
          html: true
        });
        hit.addClass('effected');
      }
      $(this.divObject).append(hit);
      // 回避率
      if (this.isEffected) {
        [v, list] = this.object.getDodgeRateEffected();
      } else {
        v = this.object.getDodgeRate();
        list = [];
      }
      dodge = $('<div>').addClass('field field_dodge_rate').css({
        top: 51,
        left: 260,
        width: 35,
        height: 20
      }).html(ObjectBase.status2html(v));
      if (list.length > 0) {
        dodge.tooltip({
          placement: 'top',
          title: CharacterBase.effects2str(list),
          html: true
        });
        dodge.addClass('effected');
      }
      $(this.divObject).append(dodge);
      // 移動力
      if (this.isEffected) {
        [v, list] = this.object.getMoveEffected();
      } else {
        v = this.object.getMove();
        list = [];
      }
      move = $('<div>').addClass('field field_move').css({
        top: 30,
        left: 350,
        width: 30,
        height: 20
      }).html(ObjectBase.status2html(v));
      if (list.length > 0) {
        move.tooltip({
          placement: 'top',
          title: CharacterBase.effects2str(list),
          html: true
        });
        move.addClass('effected');
      }
      $(this.divObject).append(move);
      // 射程
      if (this.isEffected) {
        [v, list] = this.object.getRangeEffected();
      } else {
        v = this.object.getRange();
        list = [];
      }
      range = $('<div>').addClass('field field_range').css({
        top: 50,
        left: 350,
        width: 30,
        height: 20
      }).html(v);
      if (list.length > 0) {
        range.tooltip({
          placement: 'top',
          title: CharacterBase.effects2str(list),
          html: true
        });
        range.addClass('effected');
      }
      $(this.divObject).append(range);
      // 能力
      return $(this.divObject).append($('<div>').addClass('field field_ability').css({
        top: 93,
        left: 130,
        width: 250,
        height: 20,
        'text-align': 'left'
      }).html(this.object.getAbilityName()).tooltip({
        'placement': 'top',
        'title': this.object.getAbilityDesc()
      }));
    }

    drawCharacter(level = null) {
      // 背景用
      this.divObject.addClass('panel_character');
      if (this.isShowOverlay) {
        this.redrawOverlay();
      }
      // コスト
      return $(this.divObject).append($('<div>').addClass('field field_cost').css({
        top: 71,
        left: 260,
        width: 35,
        height: 20
      }).html(ObjectBase.status2html(this.object.getCost())));
    }

    drawEnemy() {
      // 背景用
      return this.divObject.addClass('panel_enemy');
    }

    drawPresentbox() {
      // 背景用
      return this.divObject.addClass('panel_presentbox');
    }

    clear() {
      return $(this.divObject).find('*').remove();
    }

    removeMe() {
      $(this.divObject).find('*').remove();
      return $(this.divObject).remove();
    }

    isCostOver() {
      return this.isCharacterPallet && (CostManager.getCostMax() < (this.object.getCost() + CostManager.getCostNow()));
    }

    redrawOverlay() {
      this.divObject.find('.infield, .comeback, .costover').remove();
      if (this.isShowOverlay) {
        // 出撃中判定
        if (this.object.isInField()) {
          return $('<div>').addClass('infield').appendTo(this.divObject);
        // 療養中判定
        } else if (this.object.getComebackTurn() > 0) {
          return $('<div>').addClass('comeback').html(this.object.getComebackTurn()).appendTo(this.divObject);
        // コスト不足
        } else if (this.isCostOver()) {
          return $('<div>').addClass('costover').appendTo(this.divObject);
        }
      }
    }

  };

  Panel.SIZE_X = 400;

  Panel.SIZE_Y = 120;

  Panel.CLASSNAME = 'panel';

  return Panel;

}).call(this);
