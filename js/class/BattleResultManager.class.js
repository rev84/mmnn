// Generated by CoffeeScript 2.2.2
var BattleResultManager;

BattleResultManager = (function() {
  class BattleResultManager {
    static init(parentElement) {
      this.parentElement = parentElement;
      this.divObject = $('<div>').attr('id', this.ID).addClass('no_display');
      this.progress = $('<div>').addClass('progress').appendTo(this.divObject);
      this.progressBar = $('<div>').addClass('progress-bar').attr('role', 'progressbar').appendTo(this.progress);
      this.character = $('<div>').addClass('character').appendTo(this.divObject);
      this.characterType = $('<div>').addClass('character_type').appendTo(this.divObject);
      this.enemy = $('<div>').addClass('enemy').appendTo(this.divObject);
      this.enemyType = $('<div>').addClass('enemy_type').appendTo(this.divObject);
      return this.divObject.appendTo(this.parentElement);
    }

    //@divObject.removeClass('no_display')

    // HPを減らす演出
    static async animate(characterObject, enemyObject, isCharacterOffence, hpMax, hpBase, hpTo) {
      var characterTypeImg, decrease, decreaseRate, enemyTypeImg, nowRate, res, restTime;
      characterTypeImg = characterObject.getAttackType() === ObjectBase.ATTACK_TYPE.PHYSIC && isCharacterOffence ? './img/sword.png' : characterObject.getAttackType() === ObjectBase.ATTACK_TYPE.MAGIC && isCharacterOffence ? './img/magic.png' : characterObject.getAttackType() === ObjectBase.ATTACK_TYPE.PHYSIC && !isCharacterOffence ? './img/shield.png' : './img/resist.png';
      enemyTypeImg = enemyObject.getAttackType() === ObjectBase.ATTACK_TYPE.PHYSIC && !isCharacterOffence ? './img/sword.png' : enemyObject.getAttackType() === ObjectBase.ATTACK_TYPE.MAGIC && !isCharacterOffence ? './img/magic.png' : enemyObject.getAttackType() === ObjectBase.ATTACK_TYPE.PHYSIC && isCharacterOffence ? './img/shield.png' : './img/resist.png';
      this.character.css('background-image', 'url(' + characterObject.getBaseImage() + ')');
      this.characterType.css('background-image', 'url(' + characterTypeImg + ')');
      this.enemy.css('background-image', 'url(' + enemyObject.getBaseImage() + ')');
      this.enemyType.css('background-image', 'url(' + enemyTypeImg + ')');
      this.setRate(hpBase / hpMax);
      this.divObject.removeClass('no_display');
      // 規定秒待つ
      await Utl.sleep(this.ANIMATION_WAIT_BEFORE_MSEC);
      restTime = Math.ceil(this.ANIMATION_DECREASE_MSEC / (1000 / this.ANIMATION_DECREASE_FPS));
      nowRate = hpBase / hpMax;
      decreaseRate = (nowRate - (hpTo / hpMax)) / restTime;
      decrease = async() => {
        nowRate -= decreaseRate;
        restTime--;
        this.setRate(nowRate);
        await Utl.sleep(1000 / this.ANIMATION_DECREASE_FPS);
        return restTime > 0;
      };
      while (true) {
        res = (await decrease());
        if (res === false) {
          break;
        }
      }
      await Utl.sleep(this.ANIMATION_WAIT_AFTER_MSEC);
      return this.divObject.addClass('no_display');
    }

    static setRate(rate) {
      if (rate > 1) {
        rate = 1;
      }
      if (rate < 0) {
        rate = 0;
      }
      return this.progressBar.css('width', '' + rate * 100 + '%');
    }

  };

  BattleResultManager.ID = 'battle_result';

  // アニメーションまで待つ時間
  BattleResultManager.ANIMATION_WAIT_BEFORE_MSEC = 1000;

  // HPが減る時間
  BattleResultManager.ANIMATION_DECREASE_MSEC = 1000;

  // HPが減るFPS
  BattleResultManager.ANIMATION_DECREASE_FPS = 10;

  // アニメーション終わってから待つ時間
  BattleResultManager.ANIMATION_WAIT_AFTER_MSEC = 1000;

  return BattleResultManager;

}).call(this);
