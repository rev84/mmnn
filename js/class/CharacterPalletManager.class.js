// Generated by CoffeeScript 2.2.2
var CharacterPalletManager;

CharacterPalletManager = (function() {
  class CharacterPalletManager {
    static init(parentElement, posX, posY) {
      this.parentElement = parentElement;
      this.posX = posX;
      this.posY = posY;
      return this.divObject = $('<div>').attr('id', this.ID).addClass('no_display').css({
        width: this.SIZE_X,
        height: this.SIZE_Y,
        left: this.posX,
        top: this.posY
      }).appendTo(this.parentElement);
    }

    static show() {
      return $(this.divObject).removeClass('no_display');
    }

    static hide() {
      return $(this.divObject).addClass('no_display');
    }

    static addCharacter(characterObject) {
      return this.characters.push(characterObject);
    }

    static draw() {
      var c, i, index, len, ref, results, top, y;
      this.characters.sort(function(a, b) {
        return Number(a.constructor.characterId) - Number(b.constructor.characterId);
      });
      this.panels = [];
      $('#' + this.ID + ' > .' + Panel.CLASSNAME).remove();
      y = 0;
      ref = this.characters;
      results = [];
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        c = ref[index];
        if (!c.isJoined()) {
          continue;
        }
        top = y * Panel.SIZE_Y;
        this.panels.push(new Panel(this.divObject, c, top, 0, true, true));
        results.push(y++);
      }
      return results;
    }

    static drawOverlay() {
      return $.each(this.panels, function() {
        return this.redrawOverlay();
      });
    }

    static redraw(object = null) {
      return $.each(this.panels, function() {
        if (object === null || this.object !== null && object.getId() === this.object.getId()) {
          return this.draw();
        }
      });
    }

    static pickCharacter(characterObject) {
      // キャラオブジェクトを選択中キャラにセット
      GameManager.flags.pickedCharacterObject = characterObject;
      // アイコンのキャラを一時的に消す
      //@divObject.find('.field_icon').css('background-image', 'none')
      // このキャラが仮置きしてあったセルの仮置きを全削除
      FieldManager.removeAllTempObject(characterObject);
      // 移動中のアイコンを作成
      GameManager.flags.pickedCharacterElement = $('<img>').addClass('picked_character').css({
        width: Cell.SIZE_X
      }).attr({
        src: characterObject.getBaseImage()
      }).appendTo(GameManager.gameElement);
      // 追随させる
      return GameManager.followPickedCharacterElement();
    }

    static onExit() {
      // キャラクター出撃モードから出る
      GameManager.flags.pickedCharacterObject = null;
      if (GameManager.flags.pickedCharacterElement !== null) {
        GameManager.flags.pickedCharacterElement.remove();
      }
      GameManager.flags.pickedCharacterElement = null;
      return GameManager.switchTempAll();
    }

  };

  CharacterPalletManager.ID = 'character_pallet';

  CharacterPalletManager.SIZE_X = 400;

  CharacterPalletManager.SIZE_Y = 600;

  CharacterPalletManager.characters = [];

  CharacterPalletManager.panels = [];

  return CharacterPalletManager;

}).call(this);
