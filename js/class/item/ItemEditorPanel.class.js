// Generated by CoffeeScript 2.2.3
var ItemEditorPanel;

ItemEditorPanel = (function() {
  class ItemEditorPanel {
    constructor(parentElement, itemObject) {
      var div, i, itemCostNumber, itemCountMax, itemCountNow, level, ref, ref1;
      this.parentElement = parentElement;
      this.itemObject = itemObject;
      this.divObject = $('<div>').addClass('item_editor_panel').appendTo(this.parentElement);
      this.itemCountNow = [];
      this.itemCountMax = [];
      this.itemCostNumber = [];
      // アイテム名
      $('<div>').html(this.itemObject.getName()).addClass('item_editor_header').appendTo(this.divObject);
      for (level = i = ref = this.itemObject.getMinLevel(), ref1 = this.itemObject.getMaxLevel(); (ref <= ref1 ? i <= ref1 : i >= ref1); level = ref <= ref1 ? ++i : --i) {
        div = $('<div>').addClass('item_editor_item').css({
          left: level * (60 + 40)
        }).appendTo(this.divObject).on('click', this.onClickItem.bind(this, level));
        itemCountNow = $('<div>').addClass('item_editor_item_count_now');
        itemCountMax = $('<div>').addClass('item_editor_item_count_max');
        itemCostNumber = $('<div>').addClass('item_editor_item_cost_number');
        this.itemCountNow[level] = itemCountNow;
        this.itemCountMax[level] = itemCountMax;
        this.itemCostNumber[level] = itemCostNumber;
        $('<div>').addClass('item_editor_item_header').html(Item.level2char(level)).appendTo(div);
        $('<div>').addClass('item_editor_item_count').append(itemCountNow).append(itemCountMax).appendTo(div);
        $('<div>').addClass('item_editor_item_cost').append(itemCostNumber).append($('<div>').addClass('item_editor_item_cost_header').html('コスト')).appendTo(div);
        if (level + 1 <= this.itemObject.getMaxLevel()) {
          $('<button>').addClass('item_editor_item_levelup').html('▶').css({
            left: (60 + 40) * level + 60
          }).on('click', this.onClickLevelup.bind(this, level)).tooltip({
            'placement': 'top',
            'title': '<img src="./img/jewel.png" style="width: 30px;">' + this.itemObject.getExpense(level, level + 1),
            'html': true
          }).appendTo(this.divObject);
        }
      }
      this.draw();
    }

    draw() {
      var i, level, ref, ref1, results, usedItemCount;
      results = [];
      for (level = i = ref = this.itemObject.getMinLevel(), ref1 = this.itemObject.getMaxLevel(); (ref <= ref1 ? i <= ref1 : i >= ref1); level = ref <= ref1 ? ++i : --i) {
        usedItemCount = this.getUsedCount(level);
        this.itemCountNow[level].html(this.getRestCount(level));
        this.itemCountMax[level].html(this.getAllCount(level));
        results.push(this.itemCostNumber[level].html(this.itemObject.getCost(level)));
      }
      return results;
    }

    show(y) {
      return this.divObject.css('top', '' + y + 'px').removeClass('no_display');
    }

    hide() {
      return this.divObject.addClass('no_display');
    }

    onClickItem(level) {
      var cObj;
      // アイテムがもうない
      if (this.getRestCount(level) <= 0) {
        return;
      }
      cObj = ItemEquipmentEditor.characterObject;
      // コストがいっぱい
      if (cObj.getItemCapacity() < cObj.getItemCostTotal() + this.itemObject.getCost(level)) {
        return;
      }
      cObj.setItem(this.itemObject, level);
      ItemManager.calcUsedItemCount();
      ItemEquipmentEditor.select(cObj);
      return this.draw();
    }

    onClickLevelup(fromLevel) {
      // アイテムがない
      if (this.getRestCount(fromLevel) <= 0) {
        return;
      }
      // ジュエルが足りない
      if (EnvManager.decreaseJewel(this.itemObject.getExpense(fromLevel, fromLevel + 1)) === false) {
        return;
      }
      // アイテムアップグレード
      if (this.itemObject.upgrade(fromLevel) === false) {
        return;
      }
      // 再描画
      return ItemEditor.draw();
    }

    getUsedCount(level) {
      var usedItemCount;
      usedItemCount = 0;
      if (this.itemObject.getId() in ItemManager.usedItemCount && level in ItemManager.usedItemCount[this.itemObject.getId()]) {
        usedItemCount = ItemManager.usedItemCount[this.itemObject.getId()][level];
      }
      return usedItemCount;
    }

    getAllCount(level) {
      return this.itemObject.getAmount(level);
    }

    getRestCount(level) {
      return this.getAllCount(level) - this.getUsedCount(level);
    }

  };

  ItemEditorPanel.SIZE_Y = 200;

  return ItemEditorPanel;

}).call(this);
