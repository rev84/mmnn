// Generated by CoffeeScript 2.2.3
var ItemManager;

ItemManager = (function() {
  class ItemManager {
    static init(gameElement, savedata) {
      this.gameElement = gameElement;
      this.divObject = $('<div>').attr('id', this.ID);
      // アイテムのインスタンス
      this.items = {};
      this.setItems(savedata);
      // アイテムの数をカウント
      this.usedItemCount = {};
      this.calcUsedItemCount();
      ItemCharacterPicker.init(this);
      ItemEquipmentEditor.init(this);
      ItemEditor.init(this);
      return this.divObject.appendTo(this.gameElement);
    }

    static setItems(savedata = null) {
      var amount, itemBody, itemId, level, ref, results;
      ref = GameManager.items;
      results = [];
      for (itemId in ref) {
        itemBody = ref[itemId];
        this.items[itemId] = new Item(itemId, itemBody);
        results.push((function() {
          var i, ref1, results1;
          results1 = [];
          for (level = i = 0, ref1 = itemBody.cost.length; (0 <= ref1 ? i < ref1 : i > ref1); level = 0 <= ref1 ? ++i : --i) {
            // セーブデータに持ってる数があればセット
            if (savedata !== null && itemId in savedata && 'amount' in savedata[itemId]) {
              results1.push((function() {
                var j, len, ref2, results2;
                ref2 = savedata[itemId].amount;
                results2 = [];
                for (level = j = 0, len = ref2.length; j < len; level = ++j) {
                  amount = ref2[level];
                  results2.push(this.items[itemId].setAmount(level, amount));
                }
                return results2;
              }).call(this));
            } else {

            }
          }
          return results1;
        }).call(this));
      }
      return results;
    }

    // なければ0個
    static calcUsedItemCount() {
      var cObj, itemId, itemObj, k, level, ref, results;
      this.usedItemCount = {};
      ref = GameManager.characters;
      results = [];
      for (k in ref) {
        cObj = ref[k];
        if (!cObj.isJoined()) {
          continue;
        }
        results.push((function() {
          var i, len, ref1, results1;
          ref1 = cObj.getItems();
          results1 = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            [itemId, level] = ref1[i];
            itemObj = this.itemId2object(itemId);
            if (!(itemObj.getId() in this.usedItemCount)) {
              this.usedItemCount[itemObj.getId()] = Array(itemObj.getMaxLevel() + 1).fill(0);
            }
            results1.push(this.usedItemCount[itemObj.getId()][level]++);
          }
          return results1;
        }).call(this));
      }
      return results;
    }

    static repick() {
      return ItemEquipmentEditor.select();
    }

    static show() {
      return this.divObject.removeClass('no_display');
    }

    static hide() {
      return this.divObject.addClass('no_display');
    }

    // アイテムテーブルを指定すれば、そのテーブルで落ちるアイテムを返す。falseはジュエルにする
    static getItemObjectFromItemTableId(itemTableId) {
      var itemId, itemObject, ref, seed, total;
      seed = Math.random();
      total = 0;
      ref = this.items;
      for (itemId in ref) {
        itemObject = ref[itemId];
        total += itemObject.getItemRate(itemTableId);
        if (seed < total) {
          return itemObject;
        }
      }
      return false;
    }

    static itemId2object(id) {
      return this.items[id];
    }

  };

  ItemManager.ID = 'item';

  return ItemManager;

}).call(this);
