// Generated by CoffeeScript 2.2.2
var Item;

Item = class Item {
  constructor(itemId, params) {
    var i, level, ref;
    this.itemId = itemId;
    this.params = params;
    this.amount = [];
    for (level = i = 0, ref = this.params.cost.length; (0 <= ref ? i < ref : i > ref); level = 0 <= ref ? ++i : --i) {
      this.amount[level] = 0;
    }
  }

  // 持ってる数を設定
  setAmount(level, amount) {
    return this.amount[level] = amount;
  }

  getAmount(level) {
    return this.amount[level];
  }

  upgrade(level) {
    var ref;
    if (!((this.getMinLevel() <= level && level <= this.getMaxLevel()))) {
      return false;
    }
    if (!((this.getMinLevel() <= (ref = level + 1) && ref <= this.getMaxLevel()))) {
      return false;
    }
    if (this.decreaseAmount(level) === false) {
      return false;
    }
    return this.increaseAmount(level + 1);
  }

  increaseAmount(level, amount = 1) {
    if (!((this.getMinLevel() <= level && level <= this.getMaxLevel()))) {
      return false;
    }
    if (amount <= 0) {
      return false;
    }
    return this.amount[level] += amount;
  }

  decreaseAmount(level, amount = 1) {
    if (!((this.getMinLevel() <= level && level <= this.getMaxLevel()))) {
      return false;
    }
    if (amount <= 0) {
      return false;
    }
    if (this.getAmount(level) - amount < 0) {
      return false;
    }
    return this.amount[level] -= amount;
  }

  getId() {
    return this.itemId;
  }

  // 名前を取得
  getName() {
    return this.params.name;
  }

  // レベルを含んだ名前を取得
  getNameWithLevel(level) {
    if (this.getMaxLevel() - this.getMinLevel() === 0) {
      return this.getName();
    } else {
      return this.getName() + this.constructor.level2char(level);
    }
  }

  getExpense(fromLevel, toLevel) {
    if (toLevel - fromLevel !== 1) {
      return false;
    }
    if (!((this.getMinLevel() <= fromLevel && fromLevel <= this.getMaxLevel()))) {
      return false;
    }
    if (!((this.getMinLevel() <= toLevel && toLevel <= this.getMaxLevel()))) {
      return false;
    }
    return this.params.expense[fromLevel];
  }

  // コスト
  getCost(level) {
    return this.params.cost[level];
  }

  // 最低レベル
  getMinLevel() {
    return 0;
  }

  // 最大レベル
  getMaxLevel() {
    return this.params.cost.length - 1;
  }

  // 表示順
  getDisplayOrder() {
    return this.params.displayOrder;
  }

  // ひとつも持ってないか
  isNothing() {
    var am, i, len, ref;
    ref = this.amount;
    for (i = 0, len = ref.length; i < len; i++) {
      am = ref[i];
      if (am !== 0) {
        return false;
      }
    }
    return true;
  }

  static level2char(level) {
    switch (level + 1) {
      case 1:
        return 'Ⅰ';
      case 2:
        return 'Ⅱ';
      case 3:
        return 'Ⅲ';
      case 4:
        return 'Ⅳ';
      case 5:
        return 'Ⅴ';
    }
  }

};
