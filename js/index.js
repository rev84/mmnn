// Generated by CoffeeScript 1.12.7
var CellBase, CharacterBase, Const, FieldManager, GameManager, ObjectBase, Panel, Testman, TestmanBase, Utl,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ObjectBase = (function() {
  ObjectBase.OBJECT_TYPE = {
    CHARACTER: 'CHARACTER',
    ENEMY: 'ENEMY'
  };

  function ObjectBase(objectType) {
    this.objectType = objectType;
  }

  return ObjectBase;

})();

CharacterBase = (function(superClass) {
  extend(CharacterBase, superClass);

  function CharacterBase(params) {
    CharacterBase.__super__.constructor.call(this, ObjectBase.OBJECT_TYPE.CHARACTER);
    if (params.joined === null) {
      this.joined = this.constructor.defaultJoin;
    } else {
      this.joined = params.joined;
    }
    this.level = Number(params.level);
    this.hp = Number(params.hp);
    this.items = params.items;
  }

  return CharacterBase;

})(ObjectBase);

CellBase = (function() {
  CellBase.images = {
    base: [],
    object: [],
    attackeable: []
  };

  CellBase.elements = {
    base: null,
    object: null,
    attackable: null
  };

  function CellBase() {
    this.initElements();
  }

  CellBase.prototype.initElements = function() {
    this.elements.base = $('<img>').addClass('cell cell_base');
    this.elements.object = $('<img>').addClass('cell cell_object');
    return this.elements.attackable = $('<img>').addClass('cell cell_attackeble');
  };

  CellBase.prototype.changeBase = function(imageIndex) {
    return this.elements.base.attr('src', this.images[imageIndex]);
  };

  return CellBase;

})();

TestmanBase = (function(superClass) {
  extend(TestmanBase, superClass);

  TestmanBase.characterId = 1;

  TestmanBase.defaultJoin = true;

  TestmanBase.imgBase64 = ["./img/character/1/1.png"];

  TestmanBase.attackTypeBase = 1;

  TestmanBase.attackBase = 1;

  TestmanBase.hpBase = 1;

  TestmanBase.pDefBase = 1;

  TestmanBase.mDefBase = 1;

  TestmanBase.moveBase = 1;

  TestmanBase.rangeBase = 1;

  TestmanBase.hitRateBase = 1;

  TestmanBase.dodgeRateBase = 1;

  TestmanBase.itemMax = 1;

  TestmanBase.abilityName = "のうりょく";

  TestmanBase.abilityDesc = "せつめい";

  function TestmanBase(params) {
    TestmanBase.__super__.constructor.call(this, params);
  }

  return TestmanBase;

})(CharacterBase);

window.CharacterList = {
  "1": "Testman"
};

Testman = (function(superClass) {
  extend(Testman, superClass);

  function Testman() {
    return Testman.__super__.constructor.apply(this, arguments);
  }

  return Testman;

})(TestmanBase);

Const = (function() {
  function Const() {}

  Const.FIELD = {
    SIZE: {
      X: 20,
      Y: 10
    }
  };

  Const.CELL = {
    IMAGE: {
      NONE: ['./image/none/1.jpg']
    }
  };

  return Const;

})();

FieldManager = (function() {
  function FieldManager() {}

  FieldManager.isInit = false;

  FieldManager.field = null;

  FieldManager.nextField = null;

  FieldManager.cellRate = null;

  FieldManager.divObject = null;

  FieldManager.init = function() {
    var j, l, o, ref, ref1, ref2, results, x, y;
    if (this.isInit) {
      return;
    }
    this.isInit = true;
    this.divObject = $('<div>');
    this.field = [];
    for (x = j = 0, ref = Const.FIELD.SIZE.X; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
      this.field[x] = [];
      for (y = l = 0, ref1 = Const.FIELD.SIZE.Y; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
        this.field[x][y] = null;
      }
    }
    this.nextField = [];
    results = [];
    for (y = o = 0, ref2 = Const.FIELD.SIZE.Y; 0 <= ref2 ? o < ref2 : o > ref2; y = 0 <= ref2 ? ++o : --o) {
      results.push(this.field[y] = null);
    }
    return results;
  };

  FieldManager.generateNextField = function() {};

  return FieldManager;

})();

GameManager = (function() {
  function GameManager() {}

  GameManager.scene = {
    field: null
  };

  GameManager.characters = [];

  GameManager.field = [];

  GameManager.initialized = {
    characters: false,
    field: false
  };

  GameManager.init = function() {
    return this.initCharacters(null);
  };

  GameManager.initCharacters = function(savedata) {
    var characterId, className, params, ref, results;
    if (this.initialized.characters) {
      return;
    }
    this.initialized.characters = true;
    this.characters = {};
    ref = window.CharacterList;
    results = [];
    for (characterId in ref) {
      className = ref[characterId];
      if ((savedata != null) && 'characters' in savedata && characterId in savedata.characters) {
        params = savedata.characters[characterId];
      } else {
        params = {
          joined: null,
          level: 1,
          hp: null,
          items: []
        };
      }
      results.push(this.characters[characterId] = new window[className](params));
    }
    return results;
  };

  GameManager.initField = function() {};

  return GameManager;

})();

Panel = (function() {
  Panel.SIZE_X = 400;

  Panel.SIZE_Y = 200;

  function Panel() {
    this.div = $('<div>');
    this.isCharacter = false;
    this.character = null;
  }

  Panel.prototype.generate = function() {};

  Panel.prototype.setSide = function(isCharacter) {
    return this.isCharacter = isCharacter;
  };

  Panel.prototype.setCharacter = function(character) {
    return this.character = character;
  };

  return Panel;

})();

$().ready(function() {
  return GameManager.init();
});

Utl = (function() {
  function Utl() {}

  Utl.numFormat = function(num) {
    return String(num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
  };

  Utl.rand = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  Utl.genPassword = function(length) {
    var chars, i, j, ref, res;
    if (length == null) {
      length = 4;
    }
    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    res = '';
    for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      res += chars.substr(this.rand(0, chars.length - 1), 1);
    }
    return res;
  };

  Utl.adrBar = function(url) {
    return window.history.replaceState('', '', '' + url);
  };

  Utl.getQuery = function(key, defaultValue) {
    var j, k, len, p, params, query, ref, res, v;
    if (key == null) {
      key = null;
    }
    if (defaultValue == null) {
      defaultValue = null;
    }
    query = document.location.search.substring(1);
    params = query.split('&');
    res = {};
    for (j = 0, len = params.length; j < len; j++) {
      p = params[j];
      ref = p.split('='), k = ref[0], v = ref[1];
      res[k] = v;
    }
    if (key === null) {
      return res;
    }
    if (res[key] != null) {
      return res[key];
    }
    return defaultValue;
  };

  Utl.normalize = function(num, min, max) {
    var range;
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    range = Math.abs(max - min);
    if (num < min) {
      num += range * Math.ceil(Math.abs(num - min) / range);
    } else if (max <= num) {
      num -= range * (Math.floor(Math.abs(num - max) / range) + 1);
    }
    return num;
  };

  Utl.time = function(date) {
    if (date == null) {
      date = null;
    }
    if (date === null) {
      date = new Date();
    }
    return Math.floor(+date / 1000);
  };

  Utl.militime = function(date, getAsFloat) {
    if (date == null) {
      date = null;
    }
    if (getAsFloat == null) {
      getAsFloat = false;
    }
    if (date === null) {
      date = new Date();
    }
    return +date / (getAsFloat ? 1000 : 1);
  };

  Utl.dateStr = function(date, dateSep) {
    if (date == null) {
      date = null;
    }
    if (dateSep == null) {
      dateSep = '-';
    }
    if (date === null) {
      date = new Date();
    }
    return '' + this.zerofill(date.getFullYear(), 4) + dateSep + this.zerofill(date.getMonth() + 1, 2) + dateSep + this.zerofill(date.getDate(), 2);
  };

  Utl.datetimeStr = function(date, dateSep, timeSep, betweenSep) {
    if (date == null) {
      date = null;
    }
    if (dateSep == null) {
      dateSep = '-';
    }
    if (timeSep == null) {
      timeSep = ':';
    }
    if (betweenSep == null) {
      betweenSep = ' ';
    }
    if (date === null) {
      date = new Date();
    }
    return this.dateStr(date, dateSep) + betweenSep + this.zerofill(date.getHours(), 2) + timeSep + this.zerofill(date.getMinutes(), 2) + timeSep + this.zerofill(date.getSeconds(), 2);
  };

  Utl.difftime = function(targetDate, baseDate, nowSec, nowStr, agoStr, secStr, minStr, hourStr, dayStr, monStr, yearStr) {
    var baseTime, d, diffTime, h, m, mo, targetTime, y;
    if (baseDate == null) {
      baseDate = null;
    }
    if (nowSec == null) {
      nowSec = 0;
    }
    if (nowStr == null) {
      nowStr = 'ついさっき';
    }
    if (agoStr == null) {
      agoStr = '前';
    }
    if (secStr == null) {
      secStr = '秒';
    }
    if (minStr == null) {
      minStr = '分';
    }
    if (hourStr == null) {
      hourStr = '時間';
    }
    if (dayStr == null) {
      dayStr = '日';
    }
    if (monStr == null) {
      monStr = '月';
    }
    if (yearStr == null) {
      yearStr = '年';
    }
    if (baseDate === null) {
      baseTime = this.time();
    }
    targetTime = this.time(targetDate);
    diffTime = baseTime - targetTime;
    if (diffTime < 0) {
      return null;
    }
    if (nowSec >= diffTime) {
      return nowStr;
    }
    y = Math.floor(diffTime / (60 * 60 * 24 * 30 * 12));
    if (y > 0) {
      return '' + y + yearStr + agoStr;
    }
    diffTime -= y * (60 * 60 * 24 * 30 * 12);
    mo = Math.floor(diffTime / (60 * 60 * 24 * 30));
    if (mo > 0) {
      return '' + mo + monStr + agoStr;
    }
    diffTime -= mo * (60 * 60 * 24 * 30);
    d = Math.floor(diffTime / (60 * 60 * 24));
    if (d > 0) {
      return '' + d + dayStr + agoStr;
    }
    diffTime -= d * (60 * 60 * 24);
    h = Math.floor(diffTime / (60 * 60));
    if (h > 0) {
      return '' + h + hourStr + agoStr;
    }
    diffTime -= h * (60 * 60);
    m = Math.floor(diffTime / 60);
    if (m > 0) {
      return '' + m + minStr + agoStr;
    }
    diffTime -= m * 60;
    if (diffTime > 0) {
      return '' + diffTime + secStr + agoStr;
    }
    return nowStr;
  };

  Utl.zerofill = function(num, digit) {
    return ('' + this.repeat('0', digit) + num).slice(-digit);
  };

  Utl.repeat = function(str, times) {
    return Array(1 + times).join(str);
  };

  Utl.shuffle = function(ary) {
    var i, n, ref;
    n = ary.length;
    while (n) {
      n--;
      i = this.rand(0, n);
      ref = [ary[n], ary[i]], ary[i] = ref[0], ary[n] = ref[1];
    }
    return ary;
  };

  Utl.inArray = function(needle, ary) {
    var j, len, v;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (v === needle) {
        return true;
      }
    }
    return false;
  };

  Utl.clone = function(obj) {
    var res;
    res = obj;
    if ($.isArray(obj)) {
      res = $.extend(true, [], obj);
    } else if (obj instanceof Object) {
      res = $.extend(true, {}, obj);
    }
    return res;
  };

  Utl.arrayFill = function(length, val) {
    var i, j, ref, res;
    if (val == null) {
      val = null;
    }
    res = [];
    for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      res[i] = this.clone(val);
    }
    return res;
  };

  Utl.array2dFill = function(x, y, val) {
    var j, l, ref, ref1, res, xx, yAry, yy;
    if (y == null) {
      y = null;
    }
    if (val == null) {
      val = null;
    }
    if (y === null) {
      y = x;
    }
    res = [];
    yAry = [];
    for (yy = j = 0, ref = y; 0 <= ref ? j < ref : j > ref; yy = 0 <= ref ? ++j : --j) {
      yAry[yy] = this.clone(val);
    }
    for (xx = l = 0, ref1 = x; 0 <= ref1 ? l < ref1 : l > ref1; xx = 0 <= ref1 ? ++l : --l) {
      res[xx] = this.clone(yAry);
    }
    return res;
  };

  Utl.arraySum = function(ary) {
    var j, len, sum, v;
    sum = 0;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      sum += v;
    }
    return sum;
  };

  Utl.arrayMin = function(ary) {
    var j, len, min, v;
    min = null;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (min === null || min > v) {
        min = v;
      }
    }
    return min;
  };

  Utl.arrayMax = function(ary) {
    var j, len, max, v;
    max = null;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (max === null || max < v) {
        max = v;
      }
    }
    return max;
  };

  Utl.count = function(object) {
    return Object.keys(object).length;
  };

  Utl.uuid4 = function() {
    var i, j, random, uuid;
    uuid = '';
    for (i = j = 0; j < 32; i = ++j) {
      random = Math.random() * 16 | 0;
      if (i === 8 || i === 12 || i === 16 || i === 20) {
        uuid += '-';
      }
      uuid += (i === 12 ? 4 : (i === 16 ? random & 3 | 8 : random)).toString(16);
    }
    return uuid;
  };

  Utl.delLs = function(key) {
    return localStorage.removeItem(key);
  };

  Utl.setLs = function(key, value) {
    var json;
    if (value == null) {
      value = null;
    }
    if (value === null) {
      return this.delLs(key);
    }
    json = JSON.stringify(value);
    return localStorage.setItem(key, json);
  };

  Utl.getLs = function(key) {
    var res;
    res = localStorage.getItem(key);
    try {
      res = JSON.parse(res);
    } catch (error) {
      res = null;
    }
    return res;
  };

  return Utl;

})();
