// Generated by CoffeeScript 2.2.2
var BattleResultManager, Cell, Character1, Character10, Character100, Character100Base, Character101, Character101Base, Character102, Character102Base, Character103, Character103Base, Character104, Character104Base, Character105, Character105Base, Character106, Character106Base, Character107, Character107Base, Character108, Character108Base, Character109, Character109Base, Character10Base, Character11, Character110, Character110Base, Character111, Character111Base, Character112, Character112Base, Character113, Character113Base, Character114, Character114Base, Character115, Character115Base, Character116, Character116Base, Character117, Character117Base, Character118, Character118Base, Character119, Character119Base, Character11Base, Character12, Character120, Character120Base, Character121, Character121Base, Character122, Character122Base, Character123, Character123Base, Character124, Character124Base, Character125, Character125Base, Character126, Character126Base, Character127, Character127Base, Character128, Character128Base, Character129, Character129Base, Character12Base, Character13, Character130, Character130Base, Character131, Character131Base, Character132, Character132Base, Character133, Character133Base, Character134, Character134Base, Character135, Character135Base, Character136, Character136Base, Character137, Character137Base, Character138, Character138Base, Character139, Character139Base, Character13Base, Character14, Character140, Character140Base, Character141, Character141Base, Character142, Character142Base, Character143, Character143Base, Character144, Character144Base, Character145, Character145Base, Character146, Character146Base, Character147, Character147Base, Character148, Character148Base, Character149, Character149Base, Character14Base, Character15, Character150, Character150Base, Character151, Character151Base, Character152, Character152Base, Character153, Character153Base, Character154, Character154Base, Character155, Character155Base, Character156, Character156Base, Character157, Character157Base, Character158, Character158Base, Character159, Character159Base, Character15Base, Character16, Character160, Character160Base, Character161, Character161Base, Character162, Character162Base, Character163, Character163Base, Character164, Character164Base, Character165, Character165Base, Character166, Character166Base, Character167, Character167Base, Character168, Character168Base, Character169, Character169Base, Character16Base, Character17, Character170, Character170Base, Character171, Character171Base, Character172, Character172Base, Character173, Character173Base, Character174, Character174Base, Character175, Character175Base, Character176, Character176Base, Character177, Character177Base, Character178, Character178Base, Character179, Character179Base, Character17Base, Character18, Character180, Character180Base, Character181, Character181Base, Character182, Character182Base, Character183, Character183Base, Character184, Character184Base, Character185, Character185Base, Character186, Character186Base, Character187, Character187Base, Character188, Character188Base, Character189, Character189Base, Character18Base, Character19, Character190, Character190Base, Character191, Character191Base, Character192, Character192Base, Character193, Character193Base, Character194, Character194Base, Character195, Character195Base, Character196, Character196Base, Character197, Character197Base, Character198, Character198Base, Character199, Character199Base, Character19Base, Character1Base, Character2, Character20, Character200, Character200Base, Character20Base, Character21, Character21Base, Character22, Character22Base, Character23, Character23Base, Character24, Character24Base, Character25, Character25Base, Character26, Character26Base, Character27, Character27Base, Character28, Character28Base, Character29, Character29Base, Character2Base, Character3, Character30, Character30Base, Character31, Character31Base, Character32, Character32Base, Character33, Character33Base, Character34, Character34Base, Character35, Character35Base, Character36, Character36Base, Character37, Character37Base, Character38, Character38Base, Character39, Character39Base, Character3Base, Character4, Character40, Character40Base, Character41, Character41Base, Character42, Character42Base, Character43, Character43Base, Character44, Character44Base, Character45, Character45Base, Character46, Character46Base, Character47, Character47Base, Character48, Character48Base, Character49, Character49Base, Character4Base, Character5, Character50, Character50Base, Character51, Character51Base, Character52, Character52Base, Character53, Character53Base, Character54, Character54Base, Character55, Character55Base, Character56, Character56Base, Character57, Character57Base, Character58, Character58Base, Character59, Character59Base, Character5Base, Character6, Character60, Character60Base, Character61, Character61Base, Character62, Character62Base, Character63, Character63Base, Character64, Character64Base, Character65, Character65Base, Character66, Character66Base, Character67, Character67Base, Character68, Character68Base, Character69, Character69Base, Character6Base, Character7, Character70, Character70Base, Character71, Character71Base, Character72, Character72Base, Character73, Character73Base, Character74, Character74Base, Character75, Character75Base, Character76, Character76Base, Character77, Character77Base, Character78, Character78Base, Character79, Character79Base, Character7Base, Character8, Character80, Character80Base, Character81, Character81Base, Character82, Character82Base, Character83, Character83Base, Character84, Character84Base, Character85, Character85Base, Character86, Character86Base, Character87, Character87Base, Character88, Character88Base, Character89, Character89Base, Character8Base, Character9, Character90, Character90Base, Character91, Character91Base, Character92, Character92Base, Character93, Character93Base, Character94, Character94Base, Character95, Character95Base, Character96, Character96Base, Character97, Character97Base, Character98, Character98Base, Character99, Character99Base, Character9Base, CharacterBase, CharacterPalletManager, Enemy1, Enemy1Base, Enemy2, Enemy2Base, Enemy3, Enemy3Base, Enemy4, Enemy4Base, Enemy5, Enemy5Base, EnemyBase, EnvManager, FieldManager, GameManager, InfoManager, Item, ItemCharacterPicker, ItemEditor, ItemEquipmentEditor, ItemManager, LeftInfoManager, LevelupController, LevelupManager, LevelupPanel, MenuManager, ObjectBase, Panel, PresentboxBase, PresentboxBasic, RightInfoManager, Utl;

ObjectBase = (function() {
  class ObjectBase {
    constructor(objectType) {
      this.objectType = objectType;
    }

    getObjectType() {
      return this.objectType;
    }

    isCharacterObject() {
      return this.objectType === this.constructor.OBJECT_TYPE.CHARACTER;
    }

    isEnemyObject() {
      return this.objectType === this.constructor.OBJECT_TYPE.ENEMY;
    }

    isPresentObject() {
      return this.objectType === this.constructor.OBJECT_TYPE.PRESENTBOX;
    }

    getHpMax(level = null) {
      if (level === null) {
        return this.constructor.hpBase * this.level;
      } else {
        return this.constructor.hpBase * level;
      }
    }

    getHp() {
      if (this.hp === null || this.getHpMax() < this.hp) {
        return this.getHpMax();
      } else if (this.hp <= 0) {
        return 0;
      } else {
        return this.hp;
      }
    }

    damage(amount) {
      if (amount <= 0) {
        return false;
      }
      this.hp = this.getHp() - amount;
      return this.getHp();
    }

    getLevel(level = null) {
      if (level === null) {
        return this.level;
      } else {
        return level;
      }
    }

    setLevel(level) {
      return this.level = level;
    }

    levelup(level) {
      return this.level += level;
    }

    getCharacterName() {
      return this.constructor.characterName;
    }

    getAttackType() {
      return this.constructor.attackTypeBase;
    }

    getAttack(level = null) {
      if (level === null) {
        return Math.ceil(this.constructor.attackBase * this.level);
      } else {
        return Math.ceil(this.constructor.attackBase * level);
      }
    }

    getAttackBase() {
      return this.constructor.attackBase;
    }

    getPDef(level = null) {
      if (level === null) {
        return Math.ceil(this.constructor.pDefBase * this.level);
      } else {
        return Math.ceil(this.constructor.pDefBase * level);
      }
    }

    getPDefBase() {
      return this.constructor.pDefBase;
    }

    getMDef(level = null) {
      if (level === null) {
        return Math.ceil(this.constructor.mDefBase * this.level);
      } else {
        return Math.ceil(this.constructor.mDefBase * level);
      }
    }

    getMDefBase() {
      return this.constructor.mDefBase;
    }

    getMove() {
      return this.constructor.moveBase;
    }

    getMoveBase() {
      return this.constructor.moveBase;
    }

    getRange() {
      return this.constructor.rangeBase;
    }

    getRangeBase() {
      return this.constructor.rangeBase;
    }

    getHitRate() {
      return this.constructor.hitRateBase;
    }

    getHitRateBase() {
      return this.constructor.hitRateBase;
    }

    getDodgeRate() {
      return this.constructor.dodgeRateBase;
    }

    getDodgeRateBase() {
      return this.constructor.dodgeRateBase;
    }

    getExp() {
      return Math.ceil(this.level * this.constructor.expRate);
    }

    getAbilityName() {
      return this.constructor.abilityName;
    }

    getAbilityDesc() {
      return this.constructor.abilityDesc;
    }

    getBaseImage() {
      return this.constructor.images[0];
    }

    getImages() {
      return this.constructor.images;
    }

    getImage(index) {
      if (!((0 <= index && index < this.constructor.images.length))) {
        return null;
      }
      return this.constructor.images[index];
    }

    // 指定したレベル上がるために必要な経験値量
    getNeededExp(level) {
      var baseExp, baseLevel, targetExp, targetLevel;
      targetLevel = this.level + level;
      baseLevel = this.level;
      targetExp = (Math.pow(targetLevel, 2)) * this.constructor.expRate;
      baseExp = (Math.pow(baseLevel, 2)) * this.constructor.expRate;
      return Math.ceil(targetExp - baseExp);
    }

    // 経験値で上げられるレベル量
    getLevelUpMax(exp) {
      var baseExp, targetExp;
      baseExp = (Math.pow(this.level, 2)) * this.constructor.expRate;
      targetExp = baseExp + exp;
      return Math.floor(Math.sqrt(targetExp / this.constructor.expRate) - this.level);
    }

    // ダメージ計算式
    static getDamageMin(attack, def) {
      var damage;
      damage = attack - def;
      if (damage < 1) {
        return 1;
      }
      damage = Math.round(damage - damage * this.DAMAGE_SHAKE_RATE);
      if (damage < 1) {
        return 1;
      }
      return damage;
    }

    static getDamageMax(attack, def) {
      var damage;
      damage = attack - def;
      if (damage < 1) {
        return 1;
      }
      damage = Math.round(damage + damage * this.DAMAGE_SHAKE_RATE);
      if (damage < 1) {
        return 1;
      }
      return damage;
    }

    static getDamage(attack, def) {
      return Utl.rand(this.getDamageMin(attack, def), this.getDamageMax(attack, def));
    }

    static getKnockoutRate(hp, attack, def) {
      var max, min;
      min = this.getDamageMin(attack, def);
      max = this.getDamageMax(attack, def);
      if (hp <= min) {
        return +2e308;
      } else if (hp <= max) {
        return Math.round((max - hp + 1) / (max - min + 1) * 100);
      } else {
        return -2e308;
      }
    }

  };

  ObjectBase.OBJECT_TYPE = {
    CHARACTER: 'CHARACTER',
    ENEMY: 'ENEMY',
    PRESENTBOX: 'PRESENTBOX'
  };

  ObjectBase.ATTACK_TYPE = {
    PHYSIC: '物理',
    MAGIC: '魔法'
  };

  // ダメージの振れ幅
  ObjectBase.DAMAGE_SHAKE_RATE = 0.1;

  // 倒せるか定数兼画像
  ObjectBase.KNOCKOUT = {
    OK: './img/circle.png',
    MAY: './img/triangle.png',
    NG: './img/cross.png'
  };

  return ObjectBase;

}).call(this);

BattleResultManager = (function() {
  class BattleResultManager {
    static init(parentElement) {
      this.parentElement = parentElement;
      this.divObject = $('<div>').attr('id', this.ID).addClass('no_display');
      this.progress = $('<div>').addClass('progress').appendTo(this.divObject);
      this.progressBar = $('<div>').addClass('progress-bar').attr('role', 'progressbar').appendTo(this.progress);
      this.character = $('<div>').addClass('character').appendTo(this.divObject);
      this.characterType = $('<div>').addClass('character_type').appendTo(this.divObject);
      this.enemy = $('<div>').addClass('enemy').appendTo(this.divObject);
      this.enemyType = $('<div>').addClass('enemy_type').appendTo(this.divObject);
      return this.divObject.appendTo(this.parentElement);
    }

    //@divObject.removeClass('no_display')

    // HPを減らす演出
    static async animate(characterObject, enemyObject, isCharacterOffence, hpMax, hpBase, hpTo) {
      var characterTypeImg, decrease, decreaseRate, enemyTypeImg, nowRate, res, restTime;
      characterTypeImg = characterObject.getAttackType() === ObjectBase.ATTACK_TYPE.PHYSIC && isCharacterOffence ? './img/sword.png' : characterObject.getAttackType() === ObjectBase.ATTACK_TYPE.MAGIC && isCharacterOffence ? './img/magic.png' : characterObject.getAttackType() === ObjectBase.ATTACK_TYPE.PHYSIC && !isCharacterOffence ? './img/shield.png' : './img/resist.png';
      enemyTypeImg = enemyObject.getAttackType() === ObjectBase.ATTACK_TYPE.PHYSIC && !isCharacterOffence ? './img/sword.png' : enemyObject.getAttackType() === ObjectBase.ATTACK_TYPE.MAGIC && !isCharacterOffence ? './img/magic.png' : enemyObject.getAttackType() === ObjectBase.ATTACK_TYPE.PHYSIC && isCharacterOffence ? './img/shield.png' : './img/resist.png';
      this.character.css('background-image', 'url(' + characterObject.getBaseImage() + ')');
      this.characterType.css('background-image', 'url(' + characterTypeImg + ')');
      this.enemy.css('background-image', 'url(' + enemyObject.getBaseImage() + ')');
      this.enemyType.css('background-image', 'url(' + enemyTypeImg + ')');
      this.setRate(hpBase / hpMax);
      this.divObject.removeClass('no_display');
      // 規定秒待つ
      await Utl.sleep(this.ANIMATION_WAIT_BEFORE_MSEC);
      restTime = Math.ceil(this.ANIMATION_DECREASE_MSEC / (1000 / this.ANIMATION_DECREASE_FPS));
      nowRate = hpBase / hpMax;
      decreaseRate = (nowRate - (hpTo / hpMax)) / restTime;
      decrease = async() => {
        nowRate -= decreaseRate;
        restTime--;
        this.setRate(nowRate);
        await Utl.sleep(1000 / this.ANIMATION_DECREASE_FPS);
        return restTime > 0;
      };
      while (true) {
        res = (await decrease());
        if (res === false) {
          break;
        }
      }
      await Utl.sleep(this.ANIMATION_WAIT_AFTER_MSEC);
      return this.divObject.addClass('no_display');
    }

    static setRate(rate) {
      if (rate > 1) {
        rate = 1;
      }
      if (rate < 0) {
        rate = 0;
      }
      return this.progressBar.css('width', '' + rate * 100 + '%');
    }

  };

  BattleResultManager.ID = 'battle_result';

  // アニメーションまで待つ時間
  BattleResultManager.ANIMATION_WAIT_BEFORE_MSEC = 1000;

  // HPが減る時間
  BattleResultManager.ANIMATION_DECREASE_MSEC = 1000;

  // HPが減るFPS
  BattleResultManager.ANIMATION_DECREASE_FPS = 10;

  // アニメーション終わってから待つ時間
  BattleResultManager.ANIMATION_WAIT_AFTER_MSEC = 1000;

  return BattleResultManager;

}).call(this);

Cell = (function() {
  class Cell {
    constructor(parentElement, xIndex1, yIndex1, borderSize) {
      this.stepObjectAnimation = this.stepObjectAnimation.bind(this);
      this.removeMe = this.removeMe.bind(this);
      this.parentElement = parentElement;
      this.xIndex = xIndex1;
      this.yIndex = yIndex1;
      this.elements = {
        mother: null,
        collision: null,
        background: null,
        object: null,
        movable: null,
        knockout: null
      };
      this.object = null;
      this.tempObject = null;
      this.background = this.constructor.IMAGE_BACKGROUND[Utl.rand(0, this.constructor.IMAGE_BACKGROUND.length - 1)];
      this.wayStack = null;
      this.knockout = null;
      this.objectAnimationIndex = 0;
      this.initElements(borderSize);
    }

    onMouseMiddleUp(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      GameManager.changeControllable(false);
      return GameManager.changeControllable(true);
    }

    async onMouseRightUp(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      GameManager.changeControllable(false);
      
      // キャラ移動選択をキャンセルするトライ
      if ((await this.tryMovePickCancel(evt))) {

      } else if ((await this.tryAttackCancel(evt))) {

      } else {
        return GameManager.changeControllable(true);
      }
    }

    async onMouseLeftUp(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      GameManager.changeControllable(false);
      // キャラを仮置きするトライ
      if ((await this.tryCharacterPut(evt))) {

      } else if ((await this.tryMovePick(evt))) {

      } else if ((await this.tryMoveTo(evt))) {

      } else if ((await this.tryAttack(evt))) {

      } else {
        return GameManager.changeControllable(true);
      }
    }

    onMouseLeftDown(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      GameManager.changeControllable(false);
      // 仮置きがあった場合はつかむ
      if (this.tempObject !== null) {
        CharacterPalletManager.pickCharacter(this.tempObject);
        this.tempObject = null;
      }
      return GameManager.changeControllable(true);
    }

    onMouseMiddleDown(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      GameManager.changeControllable(false);
      return GameManager.changeControllable(true);
    }

    onMouseRightDown(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      GameManager.changeControllable(false);
      return GameManager.changeControllable(true);
    }

    onMouseMove(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      // マス目移動時のパネルキャラ切り替え
      return this.changePanels(evt);
    }

    onMouseLeave(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      GameManager.changeControllable(false);
      return GameManager.changeControllable(true);
    }

    setTempObject(object) {
      // 仮置きに置く
      this.tempObject = object;
      // 出撃中にする
      object.setInField(true);
      // マスの再描画
      return this.draw();
    }

    setObject(object) {
      this.object = object;
      this.tempObject = null;
      return this.draw();
    }

    switchTemp() {
      if (this.tempObject !== null) {
        this.object = this.tempObject;
        this.tempObject = null;
        return this.draw();
      }
    }

    initElements(borderSize) {
      var cssPos, cssSize;
      this.elements.mother = $('<div>').addClass('cell cell_mother').css({
        left: this.xIndex * this.constructor.SIZE_X + borderSize * (this.xIndex + 1),
        top: this.yIndex * this.constructor.SIZE_Y + borderSize * (this.yIndex + 1),
        width: this.constructor.SIZE_X,
        height: this.constructor.SIZE_Y
      });
      cssPos = {
        left: 0,
        top: 0
      };
      cssSize = {
        width: this.constructor.SIZE_X,
        height: this.constructor.SIZE_Y
      };
      this.elements.collision = $('<div>').addClass('cell cell_collision').css(cssPos).css(cssSize).on('mousemove', this.onMouseMove.bind(this)).on('mouseup', (evt) => {
        switch (evt.which) {
          case 1:
            return this.onMouseLeftUp.bind(this)(evt);
          case 2:
            return this.onMouseMiddleUp.bind(this)(evt);
          case 3:
            return this.onMouseRightUp.bind(this)(evt);
        }
      }).on('mousedown', (evt) => {
        switch (evt.which) {
          case 1:
            return this.onMouseLeftDown.bind(this)(evt);
          case 2:
            return this.onMouseMiddleDown.bind(this)(evt);
          case 3:
            return this.onMouseRightDown.bind(this)(evt);
        }
      }).on('mouseleave', this.onMouseLeave.bind(this)).appendTo(this.elements.mother);
      this.elements.background = $('<div>').addClass('cell cell_background').css(cssPos).css(cssSize).appendTo(this.elements.mother);
      this.elements.object = $('<img>').addClass('cell cell_object').css({
        left: 0,
        bottom: 10
      }).css({
        width: '100%'
      }).appendTo(this.elements.mother);
      this.elements.movable = $('<div>').addClass('cell cell_movable').css(cssPos).css(cssSize).addClass('no_display').appendTo(this.elements.mother);
      this.elements.fin = $('<div>').addClass('cell cell_fin').css(cssPos).css(cssSize).addClass('no_display').appendTo(this.elements.mother);
      this.elements.knockout = $('<div>').addClass('cell cell_knockout').css({
        right: 0,
        top: 0
      }).css({
        width: this.constructor.SIZE_X * 0.3,
        height: this.constructor.SIZE_Y * 0.3
      }).addClass('no_display').appendTo(this.elements.mother);
      this.elements.animation = $('<div>').addClass('cell cell_animation').css(cssPos).css(cssSize).addClass('no_display').appendTo(this.elements.mother);
      this.changeBackground(this.background);
      this.changeMovable(this.constructor.IMAGE_MOVABLE);
      this.changeFin(this.constructor.IMAGE_FIN);
      return $(this.elements.mother).appendTo(this.parentElement);
    }

    // 画像の変更
    changeBackground(imagePath = null) {
      if (imagePath === null) {
        return this.elements.background.addClass('no_display');
      } else {
        return this.elements.background.css('background-image', 'url(' + imagePath + ')').removeClass('no_display');
      }
    }

    changeObject(imagePath = null) {
      if (imagePath === null) {
        return this.elements.object.addClass('no_display');
      } else {
        return this.elements.object.attr('src', imagePath).removeClass('no_display');
      }
    }

    changeAttackable(imagePath = null) {
      if (imagePath === null) {
        return this.elements.attackable.addClass('no_display');
      } else {
        return this.elements.attackable.css('background-image', 'url(' + imagePath + ')').removeClass('no_display');
      }
    }

    changeMovable(imagePath) {
      return this.elements.movable.css('background-image', 'url(' + imagePath + ')');
    }

    changeFin(imagePath) {
      return this.elements.fin.css('background-image', 'url(' + imagePath + ')');
    }

    changeKnockout(imagePath, num = '') {
      return this.elements.knockout.css('background-image', 'url(' + imagePath + ')').html(num).removeClass('no_display');
    }

    showAnimation(imagePath) {
      return this.elements.animation.css('background-image', 'url(' + imagePath + ')').removeClass('no_display');
    }

    hideAnimation() {
      return this.elements.animation.css('background-image', 'none').addClass('no_display');
    }

    showObject() {
      return this.elements.object.removeClass('no_display');
    }

    hideObject() {
      return this.elements.object.addClass('no_display');
    }

    showMovable(bool = true) {
      if (bool) {
        return this.elements.movable.removeClass('no_display');
      } else {
        return this.elements.movable.addClass('no_display');
      }
    }

    showFin(bool = true) {
      if (bool) {
        return this.elements.fin.removeClass('no_display');
      } else {
        return this.elements.fin.addClass('no_display');
      }
    }

    showKnockout(bool = true) {
      if (bool) {
        return this.elements.knockout.removeClass('no_display');
      } else {
        return this.elements.knockout.addClass('no_display');
      }
    }

    // 吹き出しを出す
    async showPopover(text = null, msec = null) {
      var position;
      if (text === null) {
        return $(this.elements.mother).popover('destroy');
      } else {
        position = this.xIndex < FieldManager.SIZE_X / 4 ? 'right' : FieldManager.SIZE_X / 4 * 3 < this.xIndex ? 'left' : this.yIndex < FieldManager.SIZE_Y / 4 ? 'bottom' : 'top';
        $(this.elements.mother).popover({
          content: text,
          placement: position
        }).popover('show');
        if (msec !== null) {
          await Utl.sleep(msec);
          return $(this.elements.mother).popover('destroy');
        }
      }
    }

    // 描画
    draw() {
      // 背景
      this.changeBackground(this.background);
      // オブジェクト
      if (this.object !== null) {
        this.changeObject(this.object.getBaseImage());
      } else if (this.tempObject !== null) {
        this.changeObject(this.tempObject.getBaseImage());
      } else {
        this.changeObject();
      }
      // 移動可能
      this.drawMovable();
      // 行動終了
      this.drawFin();
      // 倒す
      return this.drawKnockout();
    }

    isDroppableCharacter() {
      return this.xIndex <= this.constructor.PUT_FIELD_MAX_X && this.object === null;
    }

    // 進入可能か
    isEnterable() {
      return this.object === null;
    }

    tryCharacterPut(evt) {
      var redrawCharacter;
      if (GameManager.flags.pickedCharacterObject === null && GameManager.flags.pickedCharacterElement === null) {
        return;
      }
      redrawCharacter = null;
      // キャラクター出撃モードで、キャラクターがピックされている場合
      if (GameManager.flags.pickedCharacterObject !== null && this.isDroppableCharacter()) {
        // ここに置いてあった仮キャラを全削除
        FieldManager.removeAllTempObject(this.tempObject);
        // このセルに仮キャラを配置する
        this.setTempObject(GameManager.flags.pickedCharacterObject);
        redrawCharacter = GameManager.flags.pickedCharacterObject;
      }
      // 出撃選択を解除
      if (GameManager.flags.pickedCharacterElement !== null) {
        GameManager.flags.pickedCharacterElement.remove();
        GameManager.flags.pickedCharacterElement = null;
        if (redrawCharacter !== null) {
          CharacterPalletManager.redraw(redrawCharacter);
        }
        GameManager.flags.pickedCharacterObject = null;
      }
      GameManager.changeControllable(true);
      return true;
    }

    tryMovePick(evt) {
      // 戦闘モード時のみ
      if (!GameManager.isMode.battle) {
        return;
      }
      // 既に移動させたいキャラを選んでいる場合はダメ
      if (GameManager.flags.movePickCell !== null) {
        return;
      }
      // 攻撃待ち専用モードの時はダメ
      if (GameManager.flags.waitAttackCell !== null) {
        return;
      }
      // キャラクターが置かれている場合のみ
      if (!(this.object !== null && this.object.isCharacterObject())) {
        return;
      }
      // 行動済みでない場合のみ
      if (this.object.isMoved()) {
        return;
      }
      // 移動選択
      GameManager.movePick(this);
      // 左キャラ固定
      GameManager.isEnable.leftPanel = false;
      GameManager.changeControllable(true);
      return true;
    }

    tryMovePickCancel(evt) {
      var body, cell, j, l, len, len1, ref, x, y;
      // 戦闘モード時のみ
      if (!GameManager.isMode.battle) {
        return;
      }
      // 既に移動させたいキャラを選んでいない場合はダメ
      if (GameManager.flags.movePickCell === null) {
        return;
      }
      // 移動可能モード
      GameManager.flags.movePickCell = null;
      // 攻撃可能モード
      GameManager.flags.waitAttackCell = null;
      ref = FieldManager.cells;
      // 移動可能などをすべて消す
      for (x = j = 0, len = ref.length; j < len; x = ++j) {
        body = ref[x];
        for (y = l = 0, len1 = body.length; l < len1; y = ++l) {
          cell = body[y];
          cell.setWayStack(null);
          cell.setKnockout(null);
          cell.drawMovable();
          cell.drawKnockout();
        }
      }
      // パネル解放
      GameManager.isEnable.leftPanel = true;
      GameManager.isEnable.rightPanel = true;
      // 操作可能に
      GameManager.changeControllable(true);
      return true;
    }

    async tryMoveTo(evt) {
      // 戦闘モード時のみ
      if (!GameManager.isMode.battle) {
        return;
      }
      // 既に移動させたいキャラを選んでいない場合はダメ
      if (GameManager.flags.movePickCell === null) {
        return;
      }
      // ここにキャラがいる場合はダメ
      if (this.object !== null) {
        return;
      }
      // ここにいけない場合はダメ
      if (this.wayStack === null) {
        return;
      }
      await FieldManager.moveObject(GameManager.flags.movePickCell, this);
      GameManager.changeControllable(true);
      return true;
    }

    async tryAttack(evt) {
      // 戦闘モード時のみ
      if (!GameManager.isMode.battle) {
        return;
      }
      // 攻撃待ちでなければダメ
      if (GameManager.flags.waitAttackCell === null) {
        return;
      }
      // 攻撃可能が設定されてないとダメ
      if (this.knockout === null) {
        return;
      }
      // 攻撃する
      await GameManager.attack(this.knockout, this);
      // 移動・攻撃・戻るモードを解除
      GameManager.flags.movePickCell = null;
      GameManager.flags.moveToCell = null;
      GameManager.flags.waitAttackCell = null;
      // コールバックで操作可能にする
      return GameManager.changeControllable(true);
    }

    tryAttackCancel(evt) {
      // 戦闘モード時のみ
      if (!GameManager.isMode.battle) {
        return;
      }
      // 攻撃待ちでなければダメ
      if (GameManager.flags.waitAttackCell === null) {
        return;
      }
      // 移動・攻撃モードを解除
      GameManager.flags.movePickCell = null;
      GameManager.flags.waitAttackCell = null;
      // コールバックで操作可能にする
      return GameManager.changeControllable(true);
    }

    setWayStack(wayStack) {
      return this.wayStack = wayStack;
    }

    setKnockout(knockout) {
      return this.knockout = knockout;
    }

    drawMovable() {
      return this.showMovable(this.wayStack !== null);
    }

    drawKnockout() {
      var attack, attackType, def, hp, knockout;
      if (this.object !== null && this.knockout !== null) {
        // 攻撃側の攻撃タイプ
        attackType = this.knockout.object.getAttackType();
        // 攻撃側の攻撃力
        attack = this.knockout.object.getAttack();
        // 防御側の防御力
        def = attackType === ObjectBase.ATTACK_TYPE.PHYSIC ? this.object.getPDef() : this.object.getMDef();
        // 防御側のHP
        hp = this.object.getHp();
        knockout = ObjectBase.getKnockoutRate(hp, attack, def);
        if (knockout === +2e308) {
          return this.changeKnockout(ObjectBase.KNOCKOUT.OK);
        } else if (knockout === -2e308) {
          return this.changeKnockout(ObjectBase.KNOCKOUT.NG);
        } else {
          return this.changeKnockout(ObjectBase.KNOCKOUT.MAY, knockout);
        }
      } else {
        return this.showKnockout(false);
      }
    }

    drawFin() {
      if (this.object !== null && (this.object.isCharacterObject() || this.object.isEnemyObject()) && this.object.isMoved()) {
        return this.showFin(true);
      } else {
        return this.showFin(false);
      }
    }

    stepObjectAnimation() {
      if (this.object === null) {
        return this.hideObject;
      }
      this.objectAnimationIndex++;
      if (this.object.getImage(this.objectAnimationIndex) === null) {
        this.objectAnimationIndex = 0;
      }
      return this.changeObject(this.object.getImage(this.objectAnimationIndex));
    }

    removeMe() {
      var e, j, len, ref, results;
      ref = this.elements;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        e = ref[j];
        results.push(e.remove());
      }
      return results;
    }

    changePanels(evt) {
      // 戦闘中モードのみ
      if (!GameManager.flags.isBattle) {
        return;
      }
      // 左パネル切り替え可能
      if (GameManager.isEnable.leftPanel) {
        if (this.object === null) {
          LeftInfoManager.setObject(null);
        } else if (this.object.isCharacterObject()) {
          LeftInfoManager.setObject(this.object);
        } else if (this.object.isEnemyObject()) {
          LeftInfoManager.setObject(null);
        }
      }
      // 右パネル切り替え可能
      if (GameManager.isEnable.rightPanel) {
        if (this.object === null) {
          return RightInfoManager.setObject(null);
        } else if (this.object.isCharacterObject()) {
          return RightInfoManager.setObject(null);
        } else if (this.object.isEnemyObject()) {
          return RightInfoManager.setObject(this.object);
        }
      }
    }

  };

  Cell.SIZE_X = 70;

  Cell.SIZE_Y = 70;

  // セルのオブジェクトのアニメーションの間隔msec
  Cell.OBJECT_ANIMATION_MSEC = 500;

  // キャラ出撃で置けるxIndex
  Cell.PUT_FIELD_MAX_X = 1;

  // 画像
  Cell.IMAGE_BACKGROUND = ['./img/background/light_blue.png'];

  Cell.IMAGE_MOVABLE = './img/movable.png';

  Cell.IMAGE_FIN = './img/fin.png';

  Cell.IMAGE_SNIPE = './img/target.png';

  return Cell;

}).call(this);

CharacterBase = class CharacterBase extends ObjectBase {
  constructor(params) {
    super(ObjectBase.OBJECT_TYPE.CHARACTER);
    // 既に所有しているキャラクターであるか
    if (params.joined === null) {
      this.joined = this.constructor.defaultJoin;
    } else {
      this.joined = params.joined;
    }
    // 現在のレベル
    this.level = params.level;
    // 現在のHP
    this.hp = params.hp;
    // 装備しているアイテム
    this.items = params.items;
    // 出撃中であるか
    this.inField = params.inField;
    // 行動済みであるか
    this.moved = params.moved;
  }

  getId() {
    return this.constructor.characterId;
  }

  getName() {
    return this.constructor.characterName;
  }

  isInField() {
    return this.inField;
  }

  setInField(isInField) {
    this.inField = !!isInField;
    return CharacterPalletManager.redraw(this);
  }

  isMoved() {
    return this.moved;
  }

  setMoved(bool) {
    return this.moved = !!bool;
  }

  getTextOnDeath() {
    return this.constructor.textDeath;
  }

  getCostBase() {
    return this.constructor.costBase;
  }

  getCost(level = null) {
    if (level === null) {
      return Math.ceil(this.constructor.costBase * this.level);
    } else {
      return Math.ceil(this.constructor.costBase * level);
    }
  }

};

Character1Base = (function() {
  class Character1Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character1Base.characterId = 1;

  // キャラ名
  Character1Base.characterName = "島村卯月";

  // 最初からいるか
  Character1Base.defaultJoin = true;

  // 画像のリスト
  Character1Base.images = ["./img/character/1/1.png", "./img/character/1/2.png"];

  // 基本攻撃タイプ
  Character1Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character1Base.attackBase = 12;

  // 成長率：HP
  Character1Base.hpBase = 17;

  // 成長率：物理防御
  Character1Base.pDefBase = 1.7;

  // 成長率：魔法防御
  Character1Base.mDefBase = 1.5;

  // 基本移動力
  Character1Base.moveBase = 4;

  // 基本射程
  Character1Base.rangeBase = 1;

  // 基本命中率
  Character1Base.hitRateBase = 95;

  // 基本回避率
  Character1Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character1Base.itemMax = 10;

  // コスト
  Character1Base.costBase = 1.5;

  // 必要経験値
  Character1Base.expRate = 1.8;

  // 死んだ時の台詞
  Character1Base.textDeath = "島村卯月";

  Character1Base.abilityName = "笑顔の魔法";

  Character1Base.abilityDesc = "周囲8マスの味方の攻撃を10%上げる";

  return Character1Base;

}).call(this);

Character2Base = (function() {
  class Character2Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character2Base.characterId = 2;

  // キャラ名
  Character2Base.characterName = "渋谷凛";

  // 最初からいるか
  Character2Base.defaultJoin = true;

  // 画像のリスト
  Character2Base.images = ["./img/character/2/1.png", "./img/character/2/2.png"];

  // 基本攻撃タイプ
  Character2Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character2Base.attackBase = 15;

  // 成長率：HP
  Character2Base.hpBase = 16;

  // 成長率：物理防御
  Character2Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character2Base.mDefBase = 1.5;

  // 基本移動力
  Character2Base.moveBase = 5;

  // 基本射程
  Character2Base.rangeBase = 1;

  // 基本命中率
  Character2Base.hitRateBase = 95;

  // 基本回避率
  Character2Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character2Base.itemMax = 10;

  // コスト
  Character2Base.costBase = 1.5;

  // 必要経験値
  Character2Base.expRate = 1.8;

  // 死んだ時の台詞
  Character2Base.textDeath = "渋谷凛";

  Character2Base.abilityName = "蒼の波動";

  Character2Base.abilityDesc = "周囲8マスの味方の回避を10%上げる";

  return Character2Base;

}).call(this);

Character3Base = (function() {
  class Character3Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character3Base.characterId = 3;

  // キャラ名
  Character3Base.characterName = "本田未央";

  // 最初からいるか
  Character3Base.defaultJoin = true;

  // 画像のリスト
  Character3Base.images = ["./img/character/3/1.png", "./img/character/3/2.png"];

  // 基本攻撃タイプ
  Character3Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character3Base.attackBase = 13;

  // 成長率：HP
  Character3Base.hpBase = 17;

  // 成長率：物理防御
  Character3Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character3Base.mDefBase = 1.5;

  // 基本移動力
  Character3Base.moveBase = 4;

  // 基本射程
  Character3Base.rangeBase = 1;

  // 基本命中率
  Character3Base.hitRateBase = 95;

  // 基本回避率
  Character3Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character3Base.itemMax = 10;

  // コスト
  Character3Base.costBase = 1.5;

  // 必要経験値
  Character3Base.expRate = 1.8;

  // 死んだ時の台詞
  Character3Base.textDeath = "本田未央";

  Character3Base.abilityName = "フレンドリー";

  Character3Base.abilityDesc = "周囲8マスの味方の物防・魔防を10%上げる";

  return Character3Base;

}).call(this);

Character4Base = (function() {
  class Character4Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character4Base.characterId = 4;

  // キャラ名
  Character4Base.characterName = "相川千夏";

  // 最初からいるか
  Character4Base.defaultJoin = true;

  // 画像のリスト
  Character4Base.images = ["./img/character/4/1.png", "./img/character/4/2.png"];

  // 基本攻撃タイプ
  Character4Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character4Base.attackBase = 13;

  // 成長率：HP
  Character4Base.hpBase = 17;

  // 成長率：物理防御
  Character4Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character4Base.mDefBase = 1.5;

  // 基本移動力
  Character4Base.moveBase = 4;

  // 基本射程
  Character4Base.rangeBase = 1;

  // 基本命中率
  Character4Base.hitRateBase = 95;

  // 基本回避率
  Character4Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character4Base.itemMax = 10;

  // コスト
  Character4Base.costBase = 1.5;

  // 必要経験値
  Character4Base.expRate = 2.2;

  // 死んだ時の台詞
  Character4Base.textDeath = "相川千夏";

  Character4Base.abilityName = "なし";

  Character4Base.abilityDesc = "なし";

  return Character4Base;

}).call(this);

Character5Base = (function() {
  class Character5Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character5Base.characterId = 5;

  // キャラ名
  Character5Base.characterName = "愛野渚";

  // 最初からいるか
  Character5Base.defaultJoin = true;

  // 画像のリスト
  Character5Base.images = ["./img/character/5/1.png", "./img/character/5/2.png"];

  // 基本攻撃タイプ
  Character5Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character5Base.attackBase = 13;

  // 成長率：HP
  Character5Base.hpBase = 17;

  // 成長率：物理防御
  Character5Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character5Base.mDefBase = 1.5;

  // 基本移動力
  Character5Base.moveBase = 4;

  // 基本射程
  Character5Base.rangeBase = 1;

  // 基本命中率
  Character5Base.hitRateBase = 95;

  // 基本回避率
  Character5Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character5Base.itemMax = 10;

  // コスト
  Character5Base.costBase = 1.5;

  // 必要経験値
  Character5Base.expRate = 2.2;

  // 死んだ時の台詞
  Character5Base.textDeath = "愛野渚";

  Character5Base.abilityName = "なし";

  Character5Base.abilityDesc = "なし";

  return Character5Base;

}).call(this);

Character6Base = (function() {
  class Character6Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character6Base.characterId = 6;

  // キャラ名
  Character6Base.characterName = "相葉夕美";

  // 最初からいるか
  Character6Base.defaultJoin = true;

  // 画像のリスト
  Character6Base.images = ["./img/character/6/1.png", "./img/character/6/2.png"];

  // 基本攻撃タイプ
  Character6Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character6Base.attackBase = 12;

  // 成長率：HP
  Character6Base.hpBase = 18;

  // 成長率：物理防御
  Character6Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character6Base.mDefBase = 1.5;

  // 基本移動力
  Character6Base.moveBase = 4;

  // 基本射程
  Character6Base.rangeBase = 1;

  // 基本命中率
  Character6Base.hitRateBase = 95;

  // 基本回避率
  Character6Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character6Base.itemMax = 15;

  // コスト
  Character6Base.costBase = 1.5;

  // 必要経験値
  Character6Base.expRate = 2.2;

  // 死んだ時の台詞
  Character6Base.textDeath = "相葉夕美";

  Character6Base.abilityName = "なし";

  Character6Base.abilityDesc = "ターン終了時、周囲の空いているマスに花を出現させることがある";

  return Character6Base;

}).call(this);

Character7Base = (function() {
  class Character7Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character7Base.characterId = 7;

  // キャラ名
  Character7Base.characterName = "相原雪乃";

  // 最初からいるか
  Character7Base.defaultJoin = true;

  // 画像のリスト
  Character7Base.images = ["./img/character/7/1.png", "./img/character/7/2.png"];

  // 基本攻撃タイプ
  Character7Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character7Base.attackBase = 13;

  // 成長率：HP
  Character7Base.hpBase = 17;

  // 成長率：物理防御
  Character7Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character7Base.mDefBase = 1.5;

  // 基本移動力
  Character7Base.moveBase = 4;

  // 基本射程
  Character7Base.rangeBase = 1;

  // 基本命中率
  Character7Base.hitRateBase = 95;

  // 基本回避率
  Character7Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character7Base.itemMax = 10;

  // コスト
  Character7Base.costBase = 1.5;

  // 必要経験値
  Character7Base.expRate = 2.2;

  // 死んだ時の台詞
  Character7Base.textDeath = "相原雪乃";

  Character7Base.abilityName = "なし";

  Character7Base.abilityDesc = "なし";

  return Character7Base;

}).call(this);

Character8Base = (function() {
  class Character8Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character8Base.characterId = 8;

  // キャラ名
  Character8Base.characterName = "赤城みりあ";

  // 最初からいるか
  Character8Base.defaultJoin = true;

  // 画像のリスト
  Character8Base.images = ["./img/character/8/1.png", "./img/character/8/2.png"];

  // 基本攻撃タイプ
  Character8Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character8Base.attackBase = 12;

  // 成長率：HP
  Character8Base.hpBase = 15;

  // 成長率：物理防御
  Character8Base.pDefBase = 1.3;

  // 成長率：魔法防御
  Character8Base.mDefBase = 1.5;

  // 基本移動力
  Character8Base.moveBase = 5;

  // 基本射程
  Character8Base.rangeBase = 1;

  // 基本命中率
  Character8Base.hitRateBase = 95;

  // 基本回避率
  Character8Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character8Base.itemMax = 10;

  // コスト
  Character8Base.costBase = 1.5;

  // 必要経験値
  Character8Base.expRate = 2.0;

  // 死んだ時の台詞
  Character8Base.textDeath = "赤城みりあ";

  Character8Base.abilityName = "みりあもやるー！";

  Character8Base.abilityDesc = "行動終了後に味方が攻撃した時、1%の確率で再行動できる";

  return Character8Base;

}).call(this);

Character9Base = (function() {
  class Character9Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character9Base.characterId = 9;

  // キャラ名
  Character9Base.characterName = "赤西瑛梨華";

  // 最初からいるか
  Character9Base.defaultJoin = true;

  // 画像のリスト
  Character9Base.images = ["./img/character/9/1.png", "./img/character/9/2.png"];

  // 基本攻撃タイプ
  Character9Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character9Base.attackBase = 13;

  // 成長率：HP
  Character9Base.hpBase = 17;

  // 成長率：物理防御
  Character9Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character9Base.mDefBase = 1.5;

  // 基本移動力
  Character9Base.moveBase = 4;

  // 基本射程
  Character9Base.rangeBase = 1;

  // 基本命中率
  Character9Base.hitRateBase = 95;

  // 基本回避率
  Character9Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character9Base.itemMax = 10;

  // コスト
  Character9Base.costBase = 1.5;

  // 必要経験値
  Character9Base.expRate = 2.2;

  // 死んだ時の台詞
  Character9Base.textDeath = "赤西瑛梨華";

  Character9Base.abilityName = "なし";

  Character9Base.abilityDesc = "なし";

  return Character9Base;

}).call(this);

Character10Base = (function() {
  class Character10Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character10Base.characterId = 10;

  // キャラ名
  Character10Base.characterName = "浅野風香";

  // 最初からいるか
  Character10Base.defaultJoin = true;

  // 画像のリスト
  Character10Base.images = ["./img/character/10/1.png", "./img/character/10/2.png"];

  // 基本攻撃タイプ
  Character10Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character10Base.attackBase = 13;

  // 成長率：HP
  Character10Base.hpBase = 17;

  // 成長率：物理防御
  Character10Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character10Base.mDefBase = 1.5;

  // 基本移動力
  Character10Base.moveBase = 4;

  // 基本射程
  Character10Base.rangeBase = 1;

  // 基本命中率
  Character10Base.hitRateBase = 95;

  // 基本回避率
  Character10Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character10Base.itemMax = 10;

  // コスト
  Character10Base.costBase = 1.5;

  // 必要経験値
  Character10Base.expRate = 2.2;

  // 死んだ時の台詞
  Character10Base.textDeath = "浅野風香";

  Character10Base.abilityName = "なし";

  Character10Base.abilityDesc = "なし";

  return Character10Base;

}).call(this);

Character11Base = (function() {
  class Character11Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character11Base.characterId = 11;

  // キャラ名
  Character11Base.characterName = "浅利七海";

  // 最初からいるか
  Character11Base.defaultJoin = true;

  // 画像のリスト
  Character11Base.images = ["./img/character/11/1.png", "./img/character/11/2.png"];

  // 基本攻撃タイプ
  Character11Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character11Base.attackBase = 13;

  // 成長率：HP
  Character11Base.hpBase = 17;

  // 成長率：物理防御
  Character11Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character11Base.mDefBase = 1.5;

  // 基本移動力
  Character11Base.moveBase = 4;

  // 基本射程
  Character11Base.rangeBase = 1;

  // 基本命中率
  Character11Base.hitRateBase = 95;

  // 基本回避率
  Character11Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character11Base.itemMax = 10;

  // コスト
  Character11Base.costBase = 1.5;

  // 必要経験値
  Character11Base.expRate = 2.2;

  // 死んだ時の台詞
  Character11Base.textDeath = "浅利七海";

  Character11Base.abilityName = "なし";

  Character11Base.abilityDesc = "なし";

  return Character11Base;

}).call(this);

Character12Base = (function() {
  class Character12Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character12Base.characterId = 12;

  // キャラ名
  Character12Base.characterName = "アナスタシア";

  // 最初からいるか
  Character12Base.defaultJoin = true;

  // 画像のリスト
  Character12Base.images = ["./img/character/12/1.png", "./img/character/12/2.png"];

  // 基本攻撃タイプ
  Character12Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character12Base.attackBase = 13;

  // 成長率：HP
  Character12Base.hpBase = 17;

  // 成長率：物理防御
  Character12Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character12Base.mDefBase = 1.7;

  // 基本移動力
  Character12Base.moveBase = 4;

  // 基本射程
  Character12Base.rangeBase = 1;

  // 基本命中率
  Character12Base.hitRateBase = 95;

  // 基本回避率
  Character12Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character12Base.itemMax = 10;

  // コスト
  Character12Base.costBase = 1.5;

  // 必要経験値
  Character12Base.expRate = 2.2;

  // 死んだ時の台詞
  Character12Base.textDeath = "アナスタシア";

  Character12Base.abilityName = "なし";

  Character12Base.abilityDesc = "なし";

  return Character12Base;

}).call(this);

Character13Base = (function() {
  class Character13Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character13Base.characterId = 13;

  // キャラ名
  Character13Base.characterName = "安部菜々";

  // 最初からいるか
  Character13Base.defaultJoin = true;

  // 画像のリスト
  Character13Base.images = ["./img/character/13/1.png", "./img/character/13/2.png"];

  // 基本攻撃タイプ
  Character13Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character13Base.attackBase = 13;

  // 成長率：HP
  Character13Base.hpBase = 15;

  // 成長率：物理防御
  Character13Base.pDefBase = 1.4;

  // 成長率：魔法防御
  Character13Base.mDefBase = 1.4;

  // 基本移動力
  Character13Base.moveBase = 4;

  // 基本射程
  Character13Base.rangeBase = 1;

  // 基本命中率
  Character13Base.hitRateBase = 95;

  // 基本回避率
  Character13Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character13Base.itemMax = 10;

  // コスト
  Character13Base.costBase = 1.5;

  // 必要経験値
  Character13Base.expRate = 2.2;

  // 死んだ時の台詞
  Character13Base.textDeath = "安部菜々";

  Character13Base.abilityName = "なし";

  Character13Base.abilityDesc = "なし";

  return Character13Base;

}).call(this);

Character14Base = (function() {
  class Character14Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character14Base.characterId = 14;

  // キャラ名
  Character14Base.characterName = "綾瀬穂乃香";

  // 最初からいるか
  Character14Base.defaultJoin = true;

  // 画像のリスト
  Character14Base.images = ["./img/character/14/1.png", "./img/character/14/2.png"];

  // 基本攻撃タイプ
  Character14Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character14Base.attackBase = 13;

  // 成長率：HP
  Character14Base.hpBase = 14;

  // 成長率：物理防御
  Character14Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character14Base.mDefBase = 1.5;

  // 基本移動力
  Character14Base.moveBase = 4;

  // 基本射程
  Character14Base.rangeBase = 1;

  // 基本命中率
  Character14Base.hitRateBase = 95;

  // 基本回避率
  Character14Base.dodgeRateBase = 10;

  // アイテム装備可能数
  Character14Base.itemMax = 10;

  // コスト
  Character14Base.costBase = 1.5;

  // 必要経験値
  Character14Base.expRate = 2.2;

  // 死んだ時の台詞
  Character14Base.textDeath = "綾瀬穂乃香";

  Character14Base.abilityName = "なし";

  Character14Base.abilityDesc = "なし";

  return Character14Base;

}).call(this);

Character15Base = (function() {
  class Character15Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character15Base.characterId = 15;

  // キャラ名
  Character15Base.characterName = "荒木比奈";

  // 最初からいるか
  Character15Base.defaultJoin = true;

  // 画像のリスト
  Character15Base.images = ["./img/character/15/1.png", "./img/character/15/2.png"];

  // 基本攻撃タイプ
  Character15Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character15Base.attackBase = 13;

  // 成長率：HP
  Character15Base.hpBase = 16;

  // 成長率：物理防御
  Character15Base.pDefBase = 1.4;

  // 成長率：魔法防御
  Character15Base.mDefBase = 1.4;

  // 基本移動力
  Character15Base.moveBase = 4;

  // 基本射程
  Character15Base.rangeBase = 1;

  // 基本命中率
  Character15Base.hitRateBase = 93;

  // 基本回避率
  Character15Base.dodgeRateBase = 2;

  // アイテム装備可能数
  Character15Base.itemMax = 10;

  // コスト
  Character15Base.costBase = 1.5;

  // 必要経験値
  Character15Base.expRate = 2.2;

  // 死んだ時の台詞
  Character15Base.textDeath = "荒木比奈";

  Character15Base.abilityName = "なし";

  Character15Base.abilityDesc = "なし";

  return Character15Base;

}).call(this);

Character16Base = (function() {
  class Character16Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character16Base.characterId = 16;

  // キャラ名
  Character16Base.characterName = "有浦柑奈";

  // 最初からいるか
  Character16Base.defaultJoin = true;

  // 画像のリスト
  Character16Base.images = ["./img/character/16/1.png", "./img/character/16/2.png"];

  // 基本攻撃タイプ
  Character16Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character16Base.attackBase = 13;

  // 成長率：HP
  Character16Base.hpBase = 17;

  // 成長率：物理防御
  Character16Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character16Base.mDefBase = 1.5;

  // 基本移動力
  Character16Base.moveBase = 4;

  // 基本射程
  Character16Base.rangeBase = 1;

  // 基本命中率
  Character16Base.hitRateBase = 95;

  // 基本回避率
  Character16Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character16Base.itemMax = 10;

  // コスト
  Character16Base.costBase = 1.5;

  // 必要経験値
  Character16Base.expRate = 2.2;

  // 死んだ時の台詞
  Character16Base.textDeath = "有浦柑奈";

  Character16Base.abilityName = "なし";

  Character16Base.abilityDesc = "なし";

  return Character16Base;

}).call(this);

Character17Base = (function() {
  class Character17Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character17Base.characterId = 17;

  // キャラ名
  Character17Base.characterName = "安斎都";

  // 最初からいるか
  Character17Base.defaultJoin = true;

  // 画像のリスト
  Character17Base.images = ["./img/character/17/1.png", "./img/character/17/2.png"];

  // 基本攻撃タイプ
  Character17Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character17Base.attackBase = 13;

  // 成長率：HP
  Character17Base.hpBase = 17;

  // 成長率：物理防御
  Character17Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character17Base.mDefBase = 1.5;

  // 基本移動力
  Character17Base.moveBase = 4;

  // 基本射程
  Character17Base.rangeBase = 1;

  // 基本命中率
  Character17Base.hitRateBase = 95;

  // 基本回避率
  Character17Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character17Base.itemMax = 10;

  // コスト
  Character17Base.costBase = 1.5;

  // 必要経験値
  Character17Base.expRate = 2.2;

  // 死んだ時の台詞
  Character17Base.textDeath = "安斎都";

  Character17Base.abilityName = "なし";

  Character17Base.abilityDesc = "なし";

  return Character17Base;

}).call(this);

Character18Base = (function() {
  class Character18Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character18Base.characterId = 18;

  // キャラ名
  Character18Base.characterName = "イヴ・サンタクロース";

  // 最初からいるか
  Character18Base.defaultJoin = true;

  // 画像のリスト
  Character18Base.images = ["./img/character/18/1.png", "./img/character/18/2.png"];

  // 基本攻撃タイプ
  Character18Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character18Base.attackBase = 12;

  // 成長率：HP
  Character18Base.hpBase = 14;

  // 成長率：物理防御
  Character18Base.pDefBase = 1.4;

  // 成長率：魔法防御
  Character18Base.mDefBase = 1.8;

  // 基本移動力
  Character18Base.moveBase = 5;

  // 基本射程
  Character18Base.rangeBase = 2;

  // 基本命中率
  Character18Base.hitRateBase = 93;

  // 基本回避率
  Character18Base.dodgeRateBase = 4;

  // アイテム装備可能数
  Character18Base.itemMax = 20;

  // コスト
  Character18Base.costBase = 1.5;

  // 必要経験値
  Character18Base.expRate = 2.2;

  // 死んだ時の台詞
  Character18Base.textDeath = "イヴ・サンタクロース";

  Character18Base.abilityName = "プレゼント";

  Character18Base.abilityDesc = "プレゼントに与えるダメージが2倍になる";

  return Character18Base;

}).call(this);

Character19Base = (function() {
  class Character19Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character19Base.characterId = 19;

  // キャラ名
  Character19Base.characterName = "五十嵐響子";

  // 最初からいるか
  Character19Base.defaultJoin = true;

  // 画像のリスト
  Character19Base.images = ["./img/character/19/1.png", "./img/character/19/2.png"];

  // 基本攻撃タイプ
  Character19Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character19Base.attackBase = 12;

  // 成長率：HP
  Character19Base.hpBase = 17;

  // 成長率：物理防御
  Character19Base.pDefBase = 1.6;

  // 成長率：魔法防御
  Character19Base.mDefBase = 1.6;

  // 基本移動力
  Character19Base.moveBase = 4;

  // 基本射程
  Character19Base.rangeBase = 1;

  // 基本命中率
  Character19Base.hitRateBase = 95;

  // 基本回避率
  Character19Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character19Base.itemMax = 10;

  // コスト
  Character19Base.costBase = 1.5;

  // 必要経験値
  Character19Base.expRate = 2.2;

  // 死んだ時の台詞
  Character19Base.textDeath = "五十嵐響子";

  Character19Base.abilityName = "なし";

  Character19Base.abilityDesc = "ターン終了時、周囲の味方のHPを回復することがある";

  return Character19Base;

}).call(this);

Character20Base = (function() {
  class Character20Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character20Base.characterId = 20;

  // キャラ名
  Character20Base.characterName = "池袋晶葉";

  // 最初からいるか
  Character20Base.defaultJoin = true;

  // 画像のリスト
  Character20Base.images = ["./img/character/20/1.png", "./img/character/20/2.png"];

  // 基本攻撃タイプ
  Character20Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character20Base.attackBase = 14;

  // 成長率：HP
  Character20Base.hpBase = 13;

  // 成長率：物理防御
  Character20Base.pDefBase = 1.8;

  // 成長率：魔法防御
  Character20Base.mDefBase = 1.2;

  // 基本移動力
  Character20Base.moveBase = 4;

  // 基本射程
  Character20Base.rangeBase = 2;

  // 基本命中率
  Character20Base.hitRateBase = 93;

  // 基本回避率
  Character20Base.dodgeRateBase = 2;

  // アイテム装備可能数
  Character20Base.itemMax = 12;

  // コスト
  Character20Base.costBase = 1.5;

  // 必要経験値
  Character20Base.expRate = 2.2;

  // 死んだ時の台詞
  Character20Base.textDeath = "池袋晶葉";

  Character20Base.abilityName = "大丈夫博士";

  Character20Base.abilityDesc = "ターン開始時、周囲にいる味方一人の攻撃、物防、魔防を30%上げるか下げるかすることがある";

  return Character20Base;

}).call(this);

Character21Base = (function() {
  class Character21Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character21Base.characterId = 21;

  // キャラ名
  Character21Base.characterName = "伊集院惠";

  // 最初からいるか
  Character21Base.defaultJoin = true;

  // 画像のリスト
  Character21Base.images = ["./img/character/21/1.png", "./img/character/21/2.png"];

  // 基本攻撃タイプ
  Character21Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character21Base.attackBase = 13;

  // 成長率：HP
  Character21Base.hpBase = 17;

  // 成長率：物理防御
  Character21Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character21Base.mDefBase = 1.5;

  // 基本移動力
  Character21Base.moveBase = 4;

  // 基本射程
  Character21Base.rangeBase = 1;

  // 基本命中率
  Character21Base.hitRateBase = 95;

  // 基本回避率
  Character21Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character21Base.itemMax = 10;

  // コスト
  Character21Base.costBase = 1.5;

  // 必要経験値
  Character21Base.expRate = 2.2;

  // 死んだ時の台詞
  Character21Base.textDeath = "伊集院惠";

  Character21Base.abilityName = "なし";

  Character21Base.abilityDesc = "なし";

  return Character21Base;

}).call(this);

Character22Base = (function() {
  class Character22Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character22Base.characterId = 22;

  // キャラ名
  Character22Base.characterName = "一ノ瀬志希";

  // 最初からいるか
  Character22Base.defaultJoin = true;

  // 画像のリスト
  Character22Base.images = ["./img/character/22/1.png", "./img/character/22/2.png"];

  // 基本攻撃タイプ
  Character22Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character22Base.attackBase = 15;

  // 成長率：HP
  Character22Base.hpBase = 18;

  // 成長率：物理防御
  Character22Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character22Base.mDefBase = 1.8;

  // 基本移動力
  Character22Base.moveBase = 5;

  // 基本射程
  Character22Base.rangeBase = 2;

  // 基本命中率
  Character22Base.hitRateBase = 93;

  // 基本回避率
  Character22Base.dodgeRateBase = 4;

  // アイテム装備可能数
  Character22Base.itemMax = 10;

  // コスト
  Character22Base.costBase = 1.5;

  // 必要経験値
  Character22Base.expRate = 2.2;

  // 死んだ時の台詞
  Character22Base.textDeath = "一ノ瀬志希";

  Character22Base.abilityName = "失踪";

  Character22Base.abilityDesc = "味方ターン終了時に、ランダムなマスに移動することがある";

  return Character22Base;

}).call(this);

Character23Base = (function() {
  class Character23Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character23Base.characterId = 23;

  // キャラ名
  Character23Base.characterName = "市原仁奈";

  // 最初からいるか
  Character23Base.defaultJoin = true;

  // 画像のリスト
  Character23Base.images = ["./img/character/23/1.png", "./img/character/23/2.png"];

  // 基本攻撃タイプ
  Character23Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character23Base.attackBase = 11;

  // 成長率：HP
  Character23Base.hpBase = 13;

  // 成長率：物理防御
  Character23Base.pDefBase = 1.4;

  // 成長率：魔法防御
  Character23Base.mDefBase = 1.4;

  // 基本移動力
  Character23Base.moveBase = 4;

  // 基本射程
  Character23Base.rangeBase = 1;

  // 基本命中率
  Character23Base.hitRateBase = 93;

  // 基本回避率
  Character23Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character23Base.itemMax = 10;

  // コスト
  Character23Base.costBase = 1.5;

  // 必要経験値
  Character23Base.expRate = 2.2;

  // 死んだ時の台詞
  Character23Base.textDeath = "市原仁奈";

  Character23Base.abilityName = "誰かのきもちになるですよ";

  Character23Base.abilityDesc = "敵ターン終了時に、ランダムなステータスがフィールド内の誰かの値に変わる";

  return Character23Base;

}).call(this);

Character24Base = (function() {
  class Character24Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character24Base.characterId = 24;

  // キャラ名
  Character24Base.characterName = "今井加奈";

  // 最初からいるか
  Character24Base.defaultJoin = true;

  // 画像のリスト
  Character24Base.images = ["./img/character/24/1.png", "./img/character/24/2.png"];

  // 基本攻撃タイプ
  Character24Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character24Base.attackBase = 13;

  // 成長率：HP
  Character24Base.hpBase = 15;

  // 成長率：物理防御
  Character24Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character24Base.mDefBase = 1.5;

  // 基本移動力
  Character24Base.moveBase = 4;

  // 基本射程
  Character24Base.rangeBase = 1;

  // 基本命中率
  Character24Base.hitRateBase = 95;

  // 基本回避率
  Character24Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character24Base.itemMax = 10;

  // コスト
  Character24Base.costBase = 1.5;

  // 必要経験値
  Character24Base.expRate = 2.2;

  // 死んだ時の台詞
  Character24Base.textDeath = "今井加奈";

  Character24Base.abilityName = "なし";

  Character24Base.abilityDesc = "なし";

  return Character24Base;

}).call(this);

Character25Base = (function() {
  class Character25Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character25Base.characterId = 25;

  // キャラ名
  Character25Base.characterName = "井村雪菜";

  // 最初からいるか
  Character25Base.defaultJoin = true;

  // 画像のリスト
  Character25Base.images = ["./img/character/25/1.png", "./img/character/25/2.png"];

  // 基本攻撃タイプ
  Character25Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character25Base.attackBase = 13;

  // 成長率：HP
  Character25Base.hpBase = 17;

  // 成長率：物理防御
  Character25Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character25Base.mDefBase = 1.5;

  // 基本移動力
  Character25Base.moveBase = 4;

  // 基本射程
  Character25Base.rangeBase = 1;

  // 基本命中率
  Character25Base.hitRateBase = 95;

  // 基本回避率
  Character25Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character25Base.itemMax = 10;

  // コスト
  Character25Base.costBase = 1.5;

  // 必要経験値
  Character25Base.expRate = 2.2;

  // 死んだ時の台詞
  Character25Base.textDeath = "井村雪菜";

  Character25Base.abilityName = "なし";

  Character25Base.abilityDesc = "なし";

  return Character25Base;

}).call(this);

Character26Base = (function() {
  class Character26Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character26Base.characterId = 26;

  // キャラ名
  Character26Base.characterName = "上田鈴帆";

  // 最初からいるか
  Character26Base.defaultJoin = true;

  // 画像のリスト
  Character26Base.images = ["./img/character/26/1.png", "./img/character/26/2.png"];

  // 基本攻撃タイプ
  Character26Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character26Base.attackBase = 12;

  // 成長率：HP
  Character26Base.hpBase = 15;

  // 成長率：物理防御
  Character26Base.pDefBase = 3.5;

  // 成長率：魔法防御
  Character26Base.mDefBase = 3.5;

  // 基本移動力
  Character26Base.moveBase = 4;

  // 基本射程
  Character26Base.rangeBase = 1;

  // 基本命中率
  Character26Base.hitRateBase = 95;

  // 基本回避率
  Character26Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character26Base.itemMax = 15;

  // コスト
  Character26Base.costBase = 1.5;

  // 必要経験値
  Character26Base.expRate = 2.3;

  // 死んだ時の台詞
  Character26Base.textDeath = "上田鈴帆";

  Character26Base.abilityName = "なし";

  Character26Base.abilityDesc = "なし";

  return Character26Base;

}).call(this);

Character27Base = (function() {
  class Character27Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character27Base.characterId = 27;

  // キャラ名
  Character27Base.characterName = "氏家むつみ";

  // 最初からいるか
  Character27Base.defaultJoin = true;

  // 画像のリスト
  Character27Base.images = ["./img/character/27/1.png", "./img/character/27/2.png"];

  // 基本攻撃タイプ
  Character27Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character27Base.attackBase = 13;

  // 成長率：HP
  Character27Base.hpBase = 17;

  // 成長率：物理防御
  Character27Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character27Base.mDefBase = 1.5;

  // 基本移動力
  Character27Base.moveBase = 4;

  // 基本射程
  Character27Base.rangeBase = 1;

  // 基本命中率
  Character27Base.hitRateBase = 95;

  // 基本回避率
  Character27Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character27Base.itemMax = 10;

  // コスト
  Character27Base.costBase = 1.5;

  // 必要経験値
  Character27Base.expRate = 2.2;

  // 死んだ時の台詞
  Character27Base.textDeath = "氏家むつみ";

  Character27Base.abilityName = "なし";

  Character27Base.abilityDesc = "なし";

  return Character27Base;

}).call(this);

Character28Base = (function() {
  class Character28Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character28Base.characterId = 28;

  // キャラ名
  Character28Base.characterName = "梅木音葉";

  // 最初からいるか
  Character28Base.defaultJoin = true;

  // 画像のリスト
  Character28Base.images = ["./img/character/28/1.png", "./img/character/28/2.png"];

  // 基本攻撃タイプ
  Character28Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character28Base.attackBase = 13;

  // 成長率：HP
  Character28Base.hpBase = 17;

  // 成長率：物理防御
  Character28Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character28Base.mDefBase = 1.5;

  // 基本移動力
  Character28Base.moveBase = 4;

  // 基本射程
  Character28Base.rangeBase = 1;

  // 基本命中率
  Character28Base.hitRateBase = 95;

  // 基本回避率
  Character28Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character28Base.itemMax = 10;

  // コスト
  Character28Base.costBase = 1.5;

  // 必要経験値
  Character28Base.expRate = 2.2;

  // 死んだ時の台詞
  Character28Base.textDeath = "梅木音葉";

  Character28Base.abilityName = "なし";

  Character28Base.abilityDesc = "なし";

  return Character28Base;

}).call(this);

Character29Base = (function() {
  class Character29Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character29Base.characterId = 29;

  // キャラ名
  Character29Base.characterName = "江上椿";

  // 最初からいるか
  Character29Base.defaultJoin = true;

  // 画像のリスト
  Character29Base.images = ["./img/character/29/1.png", "./img/character/29/2.png"];

  // 基本攻撃タイプ
  Character29Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character29Base.attackBase = 13;

  // 成長率：HP
  Character29Base.hpBase = 17;

  // 成長率：物理防御
  Character29Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character29Base.mDefBase = 1.5;

  // 基本移動力
  Character29Base.moveBase = 4;

  // 基本射程
  Character29Base.rangeBase = 1;

  // 基本命中率
  Character29Base.hitRateBase = 95;

  // 基本回避率
  Character29Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character29Base.itemMax = 10;

  // コスト
  Character29Base.costBase = 1.5;

  // 必要経験値
  Character29Base.expRate = 2.2;

  // 死んだ時の台詞
  Character29Base.textDeath = "江上椿";

  Character29Base.abilityName = "なし";

  Character29Base.abilityDesc = "なし";

  return Character29Base;

}).call(this);

Character30Base = (function() {
  class Character30Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character30Base.characterId = 30;

  // キャラ名
  Character30Base.characterName = "衛藤美紗希";

  // 最初からいるか
  Character30Base.defaultJoin = true;

  // 画像のリスト
  Character30Base.images = ["./img/character/30/1.png", "./img/character/30/2.png"];

  // 基本攻撃タイプ
  Character30Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character30Base.attackBase = 13;

  // 成長率：HP
  Character30Base.hpBase = 17;

  // 成長率：物理防御
  Character30Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character30Base.mDefBase = 1.5;

  // 基本移動力
  Character30Base.moveBase = 4;

  // 基本射程
  Character30Base.rangeBase = 1;

  // 基本命中率
  Character30Base.hitRateBase = 95;

  // 基本回避率
  Character30Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character30Base.itemMax = 10;

  // コスト
  Character30Base.costBase = 1.5;

  // 必要経験値
  Character30Base.expRate = 2.2;

  // 死んだ時の台詞
  Character30Base.textDeath = "衛藤美紗希";

  Character30Base.abilityName = "なし";

  Character30Base.abilityDesc = "なし";

  return Character30Base;

}).call(this);

Character31Base = (function() {
  class Character31Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character31Base.characterId = 31;

  // キャラ名
  Character31Base.characterName = "海老原菜帆";

  // 最初からいるか
  Character31Base.defaultJoin = true;

  // 画像のリスト
  Character31Base.images = ["./img/character/31/1.png", "./img/character/31/2.png"];

  // 基本攻撃タイプ
  Character31Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character31Base.attackBase = 13;

  // 成長率：HP
  Character31Base.hpBase = 17;

  // 成長率：物理防御
  Character31Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character31Base.mDefBase = 1.5;

  // 基本移動力
  Character31Base.moveBase = 4;

  // 基本射程
  Character31Base.rangeBase = 1;

  // 基本命中率
  Character31Base.hitRateBase = 95;

  // 基本回避率
  Character31Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character31Base.itemMax = 10;

  // コスト
  Character31Base.costBase = 1.5;

  // 必要経験値
  Character31Base.expRate = 2.2;

  // 死んだ時の台詞
  Character31Base.textDeath = "海老原菜帆";

  Character31Base.abilityName = "なし";

  Character31Base.abilityDesc = "なし";

  return Character31Base;

}).call(this);

Character32Base = (function() {
  class Character32Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character32Base.characterId = 32;

  // キャラ名
  Character32Base.characterName = "及川雫";

  // 最初からいるか
  Character32Base.defaultJoin = true;

  // 画像のリスト
  Character32Base.images = ["./img/character/32/1.png", "./img/character/32/2.png"];

  // 基本攻撃タイプ
  Character32Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character32Base.attackBase = 13;

  // 成長率：HP
  Character32Base.hpBase = 20;

  // 成長率：物理防御
  Character32Base.pDefBase = 1.7;

  // 成長率：魔法防御
  Character32Base.mDefBase = 1.5;

  // 基本移動力
  Character32Base.moveBase = 3;

  // 基本射程
  Character32Base.rangeBase = 1;

  // 基本命中率
  Character32Base.hitRateBase = 95;

  // 基本回避率
  Character32Base.dodgeRateBase = 2;

  // アイテム装備可能数
  Character32Base.itemMax = 14;

  // コスト
  Character32Base.costBase = 1.5;

  // 必要経験値
  Character32Base.expRate = 2.3;

  // 死んだ時の台詞
  Character32Base.textDeath = "及川雫";

  Character32Base.abilityName = "なし";

  Character32Base.abilityDesc = "なし";

  return Character32Base;

}).call(this);

Character33Base = (function() {
  class Character33Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character33Base.characterId = 33;

  // キャラ名
  Character33Base.characterName = "大石泉";

  // 最初からいるか
  Character33Base.defaultJoin = true;

  // 画像のリスト
  Character33Base.images = ["./img/character/33/1.png", "./img/character/33/2.png"];

  // 基本攻撃タイプ
  Character33Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character33Base.attackBase = 12;

  // 成長率：HP
  Character33Base.hpBase = 16;

  // 成長率：物理防御
  Character33Base.pDefBase = 1.3;

  // 成長率：魔法防御
  Character33Base.mDefBase = 1.4;

  // 基本移動力
  Character33Base.moveBase = 4;

  // 基本射程
  Character33Base.rangeBase = 2;

  // 基本命中率
  Character33Base.hitRateBase = 95;

  // 基本回避率
  Character33Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character33Base.itemMax = 10;

  // コスト
  Character33Base.costBase = 1.5;

  // 必要経験値
  Character33Base.expRate = 2.3;

  // 死んだ時の台詞
  Character33Base.textDeath = "大石泉";

  Character33Base.abilityName = "なし";

  Character33Base.abilityDesc = "なし";

  return Character33Base;

}).call(this);

Character34Base = (function() {
  class Character34Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character34Base.characterId = 34;

  // キャラ名
  Character34Base.characterName = "太田優";

  // 最初からいるか
  Character34Base.defaultJoin = true;

  // 画像のリスト
  Character34Base.images = ["./img/character/34/1.png", "./img/character/34/2.png"];

  // 基本攻撃タイプ
  Character34Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character34Base.attackBase = 13;

  // 成長率：HP
  Character34Base.hpBase = 17;

  // 成長率：物理防御
  Character34Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character34Base.mDefBase = 1.5;

  // 基本移動力
  Character34Base.moveBase = 4;

  // 基本射程
  Character34Base.rangeBase = 1;

  // 基本命中率
  Character34Base.hitRateBase = 95;

  // 基本回避率
  Character34Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character34Base.itemMax = 10;

  // コスト
  Character34Base.costBase = 1.5;

  // 必要経験値
  Character34Base.expRate = 2.2;

  // 死んだ時の台詞
  Character34Base.textDeath = "太田優";

  Character34Base.abilityName = "なし";

  Character34Base.abilityDesc = "なし";

  return Character34Base;

}).call(this);

Character35Base = (function() {
  class Character35Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character35Base.characterId = 35;

  // キャラ名
  Character35Base.characterName = "大槻唯";

  // 最初からいるか
  Character35Base.defaultJoin = true;

  // 画像のリスト
  Character35Base.images = ["./img/character/35/1.png", "./img/character/35/2.png"];

  // 基本攻撃タイプ
  Character35Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character35Base.attackBase = 14;

  // 成長率：HP
  Character35Base.hpBase = 17;

  // 成長率：物理防御
  Character35Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character35Base.mDefBase = 1.5;

  // 基本移動力
  Character35Base.moveBase = 4;

  // 基本射程
  Character35Base.rangeBase = 1;

  // 基本命中率
  Character35Base.hitRateBase = 93;

  // 基本回避率
  Character35Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character35Base.itemMax = 10;

  // コスト
  Character35Base.costBase = 1.5;

  // 必要経験値
  Character35Base.expRate = 2.0;

  // 死んだ時の台詞
  Character35Base.textDeath = "大槻唯";

  Character35Base.abilityName = "なし";

  Character35Base.abilityDesc = "なし";

  return Character35Base;

}).call(this);

Character36Base = (function() {
  class Character36Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character36Base.characterId = 36;

  // キャラ名
  Character36Base.characterName = "大西由里子";

  // 最初からいるか
  Character36Base.defaultJoin = true;

  // 画像のリスト
  Character36Base.images = ["./img/character/36/1.png", "./img/character/36/2.png"];

  // 基本攻撃タイプ
  Character36Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character36Base.attackBase = 13;

  // 成長率：HP
  Character36Base.hpBase = 17;

  // 成長率：物理防御
  Character36Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character36Base.mDefBase = 1.5;

  // 基本移動力
  Character36Base.moveBase = 4;

  // 基本射程
  Character36Base.rangeBase = 1;

  // 基本命中率
  Character36Base.hitRateBase = 95;

  // 基本回避率
  Character36Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character36Base.itemMax = 10;

  // コスト
  Character36Base.costBase = 1.5;

  // 必要経験値
  Character36Base.expRate = 2.2;

  // 死んだ時の台詞
  Character36Base.textDeath = "大西由里子";

  Character36Base.abilityName = "なし";

  Character36Base.abilityDesc = "ターン開始時、別の敵に隣接している敵の3マス以内にいると、物防・魔防が10%上がることがある";

  return Character36Base;

}).call(this);

Character37Base = (function() {
  class Character37Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character37Base.characterId = 37;

  // キャラ名
  Character37Base.characterName = "大沼くるみ";

  // 最初からいるか
  Character37Base.defaultJoin = true;

  // 画像のリスト
  Character37Base.images = ["./img/character/37/1.png", "./img/character/37/2.png"];

  // 基本攻撃タイプ
  Character37Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character37Base.attackBase = 13;

  // 成長率：HP
  Character37Base.hpBase = 17;

  // 成長率：物理防御
  Character37Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character37Base.mDefBase = 1.5;

  // 基本移動力
  Character37Base.moveBase = 4;

  // 基本射程
  Character37Base.rangeBase = 1;

  // 基本命中率
  Character37Base.hitRateBase = 95;

  // 基本回避率
  Character37Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character37Base.itemMax = 10;

  // コスト
  Character37Base.costBase = 1.5;

  // 必要経験値
  Character37Base.expRate = 2.2;

  // 死んだ時の台詞
  Character37Base.textDeath = "大沼くるみ";

  Character37Base.abilityName = "なし";

  Character37Base.abilityDesc = "なし";

  return Character37Base;

}).call(this);

Character38Base = (function() {
  class Character38Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character38Base.characterId = 38;

  // キャラ名
  Character38Base.characterName = "大原みちる";

  // 最初からいるか
  Character38Base.defaultJoin = true;

  // 画像のリスト
  Character38Base.images = ["./img/character/38/1.png", "./img/character/38/2.png"];

  // 基本攻撃タイプ
  Character38Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character38Base.attackBase = 13;

  // 成長率：HP
  Character38Base.hpBase = 17;

  // 成長率：物理防御
  Character38Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character38Base.mDefBase = 1.5;

  // 基本移動力
  Character38Base.moveBase = 4;

  // 基本射程
  Character38Base.rangeBase = 1;

  // 基本命中率
  Character38Base.hitRateBase = 95;

  // 基本回避率
  Character38Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character38Base.itemMax = 10;

  // コスト
  Character38Base.costBase = 1.5;

  // 必要経験値
  Character38Base.expRate = 2.2;

  // 死んだ時の台詞
  Character38Base.textDeath = "大原みちる";

  Character38Base.abilityName = "なし";

  Character38Base.abilityDesc = "なし";

  return Character38Base;

}).call(this);

Character39Base = (function() {
  class Character39Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character39Base.characterId = 39;

  // キャラ名
  Character39Base.characterName = "岡崎泰葉";

  // 最初からいるか
  Character39Base.defaultJoin = true;

  // 画像のリスト
  Character39Base.images = ["./img/character/39/1.png", "./img/character/39/2.png"];

  // 基本攻撃タイプ
  Character39Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character39Base.attackBase = 13;

  // 成長率：HP
  Character39Base.hpBase = 17;

  // 成長率：物理防御
  Character39Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character39Base.mDefBase = 1.5;

  // 基本移動力
  Character39Base.moveBase = 4;

  // 基本射程
  Character39Base.rangeBase = 1;

  // 基本命中率
  Character39Base.hitRateBase = 95;

  // 基本回避率
  Character39Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character39Base.itemMax = 10;

  // コスト
  Character39Base.costBase = 1.5;

  // 必要経験値
  Character39Base.expRate = 2.2;

  // 死んだ時の台詞
  Character39Base.textDeath = "岡崎泰葉";

  Character39Base.abilityName = "なし";

  Character39Base.abilityDesc = "なし";

  return Character39Base;

}).call(this);

Character40Base = (function() {
  class Character40Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character40Base.characterId = 40;

  // キャラ名
  Character40Base.characterName = "緒方智絵里";

  // 最初からいるか
  Character40Base.defaultJoin = true;

  // 画像のリスト
  Character40Base.images = ["./img/character/40/1.png", "./img/character/40/2.png"];

  // 基本攻撃タイプ
  Character40Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character40Base.attackBase = 11;

  // 成長率：HP
  Character40Base.hpBase = 15;

  // 成長率：物理防御
  Character40Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character40Base.mDefBase = 1.6;

  // 基本移動力
  Character40Base.moveBase = 4;

  // 基本射程
  Character40Base.rangeBase = 1;

  // 基本命中率
  Character40Base.hitRateBase = 95;

  // 基本回避率
  Character40Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character40Base.itemMax = 12;

  // コスト
  Character40Base.costBase = 1.5;

  // 必要経験値
  Character40Base.expRate = 2.2;

  // 死んだ時の台詞
  Character40Base.textDeath = "緒方智絵里";

  Character40Base.abilityName = "なし";

  Character40Base.abilityDesc = "なし";

  return Character40Base;

}).call(this);

Character41Base = (function() {
  class Character41Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character41Base.characterId = 41;

  // キャラ名
  Character41Base.characterName = "奥山沙織";

  // 最初からいるか
  Character41Base.defaultJoin = true;

  // 画像のリスト
  Character41Base.images = ["./img/character/41/1.png", "./img/character/41/2.png"];

  // 基本攻撃タイプ
  Character41Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character41Base.attackBase = 13;

  // 成長率：HP
  Character41Base.hpBase = 17;

  // 成長率：物理防御
  Character41Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character41Base.mDefBase = 1.5;

  // 基本移動力
  Character41Base.moveBase = 4;

  // 基本射程
  Character41Base.rangeBase = 1;

  // 基本命中率
  Character41Base.hitRateBase = 95;

  // 基本回避率
  Character41Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character41Base.itemMax = 10;

  // コスト
  Character41Base.costBase = 1.5;

  // 必要経験値
  Character41Base.expRate = 2.2;

  // 死んだ時の台詞
  Character41Base.textDeath = "奥山沙織";

  Character41Base.abilityName = "なし";

  Character41Base.abilityDesc = "なし";

  return Character41Base;

}).call(this);

Character42Base = (function() {
  class Character42Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character42Base.characterId = 42;

  // キャラ名
  Character42Base.characterName = "乙倉悠貴";

  // 最初からいるか
  Character42Base.defaultJoin = true;

  // 画像のリスト
  Character42Base.images = ["./img/character/42/1.png", "./img/character/42/2.png"];

  // 基本攻撃タイプ
  Character42Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character42Base.attackBase = 13;

  // 成長率：HP
  Character42Base.hpBase = 17;

  // 成長率：物理防御
  Character42Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character42Base.mDefBase = 1.5;

  // 基本移動力
  Character42Base.moveBase = 4;

  // 基本射程
  Character42Base.rangeBase = 1;

  // 基本命中率
  Character42Base.hitRateBase = 95;

  // 基本回避率
  Character42Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character42Base.itemMax = 10;

  // コスト
  Character42Base.costBase = 1.5;

  // 必要経験値
  Character42Base.expRate = 2.2;

  // 死んだ時の台詞
  Character42Base.textDeath = "乙倉悠貴";

  Character42Base.abilityName = "なし";

  Character42Base.abilityDesc = "なし";

  return Character42Base;

}).call(this);

Character43Base = (function() {
  class Character43Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character43Base.characterId = 43;

  // キャラ名
  Character43Base.characterName = "片桐早苗";

  // 最初からいるか
  Character43Base.defaultJoin = true;

  // 画像のリスト
  Character43Base.images = ["./img/character/43/1.png", "./img/character/43/2.png"];

  // 基本攻撃タイプ
  Character43Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character43Base.attackBase = 14;

  // 成長率：HP
  Character43Base.hpBase = 18;

  // 成長率：物理防御
  Character43Base.pDefBase = 1.7;

  // 成長率：魔法防御
  Character43Base.mDefBase = 1.4;

  // 基本移動力
  Character43Base.moveBase = 4;

  // 基本射程
  Character43Base.rangeBase = 4;

  // 基本命中率
  Character43Base.hitRateBase = 93;

  // 基本回避率
  Character43Base.dodgeRateBase = 2;

  // アイテム装備可能数
  Character43Base.itemMax = 12;

  // コスト
  Character43Base.costBase = 1.5;

  // 必要経験値
  Character43Base.expRate = 2.4;

  // 死んだ時の台詞
  Character43Base.textDeath = "片桐早苗";

  Character43Base.abilityName = "なし";

  Character43Base.abilityDesc = "なし";

  return Character43Base;

}).call(this);

Character44Base = (function() {
  class Character44Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character44Base.characterId = 44;

  // キャラ名
  Character44Base.characterName = "上条春菜";

  // 最初からいるか
  Character44Base.defaultJoin = true;

  // 画像のリスト
  Character44Base.images = ["./img/character/44/1.png", "./img/character/44/2.png"];

  // 基本攻撃タイプ
  Character44Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character44Base.attackBase = 13;

  // 成長率：HP
  Character44Base.hpBase = 17;

  // 成長率：物理防御
  Character44Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character44Base.mDefBase = 1.5;

  // 基本移動力
  Character44Base.moveBase = 4;

  // 基本射程
  Character44Base.rangeBase = 1;

  // 基本命中率
  Character44Base.hitRateBase = 95;

  // 基本回避率
  Character44Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character44Base.itemMax = 10;

  // コスト
  Character44Base.costBase = 1.5;

  // 必要経験値
  Character44Base.expRate = 2.2;

  // 死んだ時の台詞
  Character44Base.textDeath = "上条春菜";

  Character44Base.abilityName = "なし";

  Character44Base.abilityDesc = "なし";

  return Character44Base;

}).call(this);

Character45Base = (function() {
  class Character45Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character45Base.characterId = 45;

  // キャラ名
  Character45Base.characterName = "神谷奈緒";

  // 最初からいるか
  Character45Base.defaultJoin = true;

  // 画像のリスト
  Character45Base.images = ["./img/character/45/1.png", "./img/character/45/2.png"];

  // 基本攻撃タイプ
  Character45Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character45Base.attackBase = 13;

  // 成長率：HP
  Character45Base.hpBase = 17;

  // 成長率：物理防御
  Character45Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character45Base.mDefBase = 1.5;

  // 基本移動力
  Character45Base.moveBase = 4;

  // 基本射程
  Character45Base.rangeBase = 1;

  // 基本命中率
  Character45Base.hitRateBase = 95;

  // 基本回避率
  Character45Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character45Base.itemMax = 10;

  // コスト
  Character45Base.costBase = 1.5;

  // 必要経験値
  Character45Base.expRate = 1.8;

  // 死んだ時の台詞
  Character45Base.textDeath = "神谷奈緒";

  Character45Base.abilityName = "なし";

  Character45Base.abilityDesc = "なし";

  return Character45Base;

}).call(this);

Character46Base = (function() {
  class Character46Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character46Base.characterId = 46;

  // キャラ名
  Character46Base.characterName = "川島瑞樹";

  // 最初からいるか
  Character46Base.defaultJoin = true;

  // 画像のリスト
  Character46Base.images = ["./img/character/46/1.png", "./img/character/46/2.png"];

  // 基本攻撃タイプ
  Character46Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character46Base.attackBase = 13;

  // 成長率：HP
  Character46Base.hpBase = 17;

  // 成長率：物理防御
  Character46Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character46Base.mDefBase = 1.5;

  // 基本移動力
  Character46Base.moveBase = 4;

  // 基本射程
  Character46Base.rangeBase = 1;

  // 基本命中率
  Character46Base.hitRateBase = 95;

  // 基本回避率
  Character46Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character46Base.itemMax = 12;

  // コスト
  Character46Base.costBase = 1.5;

  // 必要経験値
  Character46Base.expRate = 2.2;

  // 死んだ時の台詞
  Character46Base.textDeath = "川島瑞樹";

  Character46Base.abilityName = "なし";

  Character46Base.abilityDesc = "なし";

  return Character46Base;

}).call(this);

Character47Base = (function() {
  class Character47Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character47Base.characterId = 47;

  // キャラ名
  Character47Base.characterName = "神崎蘭子";

  // 最初からいるか
  Character47Base.defaultJoin = true;

  // 画像のリスト
  Character47Base.images = ["./img/character/47/1.png", "./img/character/47/2.png"];

  // 基本攻撃タイプ
  Character47Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character47Base.attackBase = 13;

  // 成長率：HP
  Character47Base.hpBase = 14;

  // 成長率：物理防御
  Character47Base.pDefBase = 1.3;

  // 成長率：魔法防御
  Character47Base.mDefBase = 3;

  // 基本移動力
  Character47Base.moveBase = 4;

  // 基本射程
  Character47Base.rangeBase = 3;

  // 基本命中率
  Character47Base.hitRateBase = 90;

  // 基本回避率
  Character47Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character47Base.itemMax = 10;

  // コスト
  Character47Base.costBase = 1.5;

  // 必要経験値
  Character47Base.expRate = 2.0;

  // 死んだ時の台詞
  Character47Base.textDeath = "神崎蘭子";

  Character47Base.abilityName = "黒魔術";

  Character47Base.abilityDesc = "攻撃した敵を一撃で倒すことがある";

  return Character47Base;

}).call(this);

Character48Base = (function() {
  class Character48Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character48Base.characterId = 48;

  // キャラ名
  Character48Base.characterName = "岸部彩華";

  // 最初からいるか
  Character48Base.defaultJoin = true;

  // 画像のリスト
  Character48Base.images = ["./img/character/48/1.png", "./img/character/48/2.png"];

  // 基本攻撃タイプ
  Character48Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character48Base.attackBase = 13;

  // 成長率：HP
  Character48Base.hpBase = 17;

  // 成長率：物理防御
  Character48Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character48Base.mDefBase = 1.5;

  // 基本移動力
  Character48Base.moveBase = 4;

  // 基本射程
  Character48Base.rangeBase = 1;

  // 基本命中率
  Character48Base.hitRateBase = 95;

  // 基本回避率
  Character48Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character48Base.itemMax = 10;

  // コスト
  Character48Base.costBase = 1.5;

  // 必要経験値
  Character48Base.expRate = 2.2;

  // 死んだ時の台詞
  Character48Base.textDeath = "岸部彩華";

  Character48Base.abilityName = "なし";

  Character48Base.abilityDesc = "なし";

  return Character48Base;

}).call(this);

Character49Base = (function() {
  class Character49Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character49Base.characterId = 49;

  // キャラ名
  Character49Base.characterName = "北川真尋";

  // 最初からいるか
  Character49Base.defaultJoin = true;

  // 画像のリスト
  Character49Base.images = ["./img/character/49/1.png", "./img/character/49/2.png"];

  // 基本攻撃タイプ
  Character49Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character49Base.attackBase = 13;

  // 成長率：HP
  Character49Base.hpBase = 17;

  // 成長率：物理防御
  Character49Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character49Base.mDefBase = 1.5;

  // 基本移動力
  Character49Base.moveBase = 4;

  // 基本射程
  Character49Base.rangeBase = 1;

  // 基本命中率
  Character49Base.hitRateBase = 95;

  // 基本回避率
  Character49Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character49Base.itemMax = 10;

  // コスト
  Character49Base.costBase = 1.5;

  // 必要経験値
  Character49Base.expRate = 2.2;

  // 死んだ時の台詞
  Character49Base.textDeath = "北川真尋";

  Character49Base.abilityName = "なし";

  Character49Base.abilityDesc = "なし";

  return Character49Base;

}).call(this);

Character50Base = (function() {
  class Character50Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character50Base.characterId = 50;

  // キャラ名
  Character50Base.characterName = "喜多日菜子";

  // 最初からいるか
  Character50Base.defaultJoin = true;

  // 画像のリスト
  Character50Base.images = ["./img/character/50/1.png", "./img/character/50/2.png"];

  // 基本攻撃タイプ
  Character50Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character50Base.attackBase = 13;

  // 成長率：HP
  Character50Base.hpBase = 17;

  // 成長率：物理防御
  Character50Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character50Base.mDefBase = 1.5;

  // 基本移動力
  Character50Base.moveBase = 4;

  // 基本射程
  Character50Base.rangeBase = 1;

  // 基本命中率
  Character50Base.hitRateBase = 95;

  // 基本回避率
  Character50Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character50Base.itemMax = 10;

  // コスト
  Character50Base.costBase = 1.5;

  // 必要経験値
  Character50Base.expRate = 2.2;

  // 死んだ時の台詞
  Character50Base.textDeath = "喜多日菜子";

  Character50Base.abilityName = "なし";

  Character50Base.abilityDesc = "なし";

  return Character50Base;

}).call(this);

Character51Base = (function() {
  class Character51Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character51Base.characterId = 51;

  // キャラ名
  Character51Base.characterName = "喜多見柚";

  // 最初からいるか
  Character51Base.defaultJoin = true;

  // 画像のリスト
  Character51Base.images = ["./img/character/51/1.png", "./img/character/51/2.png"];

  // 基本攻撃タイプ
  Character51Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character51Base.attackBase = 13;

  // 成長率：HP
  Character51Base.hpBase = 17;

  // 成長率：物理防御
  Character51Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character51Base.mDefBase = 1.5;

  // 基本移動力
  Character51Base.moveBase = 4;

  // 基本射程
  Character51Base.rangeBase = 1;

  // 基本命中率
  Character51Base.hitRateBase = 95;

  // 基本回避率
  Character51Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character51Base.itemMax = 10;

  // コスト
  Character51Base.costBase = 1.5;

  // 必要経験値
  Character51Base.expRate = 2.2;

  // 死んだ時の台詞
  Character51Base.textDeath = "喜多見柚";

  Character51Base.abilityName = "なし";

  Character51Base.abilityDesc = "なし";

  return Character51Base;

}).call(this);

Character52Base = (function() {
  class Character52Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character52Base.characterId = 52;

  // キャラ名
  Character52Base.characterName = "木場真奈美";

  // 最初からいるか
  Character52Base.defaultJoin = true;

  // 画像のリスト
  Character52Base.images = ["./img/character/52/1.png", "./img/character/52/2.png"];

  // 基本攻撃タイプ
  Character52Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character52Base.attackBase = 15;

  // 成長率：HP
  Character52Base.hpBase = 18;

  // 成長率：物理防御
  Character52Base.pDefBase = 1.7;

  // 成長率：魔法防御
  Character52Base.mDefBase = 1.4;

  // 基本移動力
  Character52Base.moveBase = 4;

  // 基本射程
  Character52Base.rangeBase = 1;

  // 基本命中率
  Character52Base.hitRateBase = 97;

  // 基本回避率
  Character52Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character52Base.itemMax = 12;

  // コスト
  Character52Base.costBase = 1.5;

  // 必要経験値
  Character52Base.expRate = 2.2;

  // 死んだ時の台詞
  Character52Base.textDeath = "木場真奈美";

  Character52Base.abilityName = "なし";

  Character52Base.abilityDesc = "なし";

  return Character52Base;

}).call(this);

Character53Base = (function() {
  class Character53Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character53Base.characterId = 53;

  // キャラ名
  Character53Base.characterName = "木村夏樹";

  // 最初からいるか
  Character53Base.defaultJoin = true;

  // 画像のリスト
  Character53Base.images = ["./img/character/53/1.png", "./img/character/53/2.png"];

  // 基本攻撃タイプ
  Character53Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character53Base.attackBase = 15;

  // 成長率：HP
  Character53Base.hpBase = 17;

  // 成長率：物理防御
  Character53Base.pDefBase = 1.6;

  // 成長率：魔法防御
  Character53Base.mDefBase = 1.6;

  // 基本移動力
  Character53Base.moveBase = 4;

  // 基本射程
  Character53Base.rangeBase = 1;

  // 基本命中率
  Character53Base.hitRateBase = 95;

  // 基本回避率
  Character53Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character53Base.itemMax = 10;

  // コスト
  Character53Base.costBase = 1.5;

  // 必要経験値
  Character53Base.expRate = 2.2;

  // 死んだ時の台詞
  Character53Base.textDeath = "木村夏樹";

  Character53Base.abilityName = "なし";

  Character53Base.abilityDesc = "なし";

  return Character53Base;

}).call(this);

Character54Base = (function() {
  class Character54Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character54Base.characterId = 54;

  // キャラ名
  Character54Base.characterName = "キャシー・グラハム";

  // 最初からいるか
  Character54Base.defaultJoin = true;

  // 画像のリスト
  Character54Base.images = ["./img/character/54/1.png", "./img/character/54/2.png"];

  // 基本攻撃タイプ
  Character54Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character54Base.attackBase = 13;

  // 成長率：HP
  Character54Base.hpBase = 17;

  // 成長率：物理防御
  Character54Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character54Base.mDefBase = 1.5;

  // 基本移動力
  Character54Base.moveBase = 4;

  // 基本射程
  Character54Base.rangeBase = 1;

  // 基本命中率
  Character54Base.hitRateBase = 95;

  // 基本回避率
  Character54Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character54Base.itemMax = 10;

  // コスト
  Character54Base.costBase = 1.5;

  // 必要経験値
  Character54Base.expRate = 2.2;

  // 死んだ時の台詞
  Character54Base.textDeath = "キャシー・グラハム";

  Character54Base.abilityName = "なし";

  Character54Base.abilityDesc = "なし";

  return Character54Base;

}).call(this);

Character55Base = (function() {
  class Character55Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character55Base.characterId = 55;

  // キャラ名
  Character55Base.characterName = "桐野アヤ";

  // 最初からいるか
  Character55Base.defaultJoin = true;

  // 画像のリスト
  Character55Base.images = ["./img/character/55/1.png", "./img/character/55/2.png"];

  // 基本攻撃タイプ
  Character55Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character55Base.attackBase = 13;

  // 成長率：HP
  Character55Base.hpBase = 17;

  // 成長率：物理防御
  Character55Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character55Base.mDefBase = 1.5;

  // 基本移動力
  Character55Base.moveBase = 4;

  // 基本射程
  Character55Base.rangeBase = 1;

  // 基本命中率
  Character55Base.hitRateBase = 95;

  // 基本回避率
  Character55Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character55Base.itemMax = 10;

  // コスト
  Character55Base.costBase = 1.5;

  // 必要経験値
  Character55Base.expRate = 2.2;

  // 死んだ時の台詞
  Character55Base.textDeath = "桐野アヤ";

  Character55Base.abilityName = "なし";

  Character55Base.abilityDesc = "なし";

  return Character55Base;

}).call(this);

Character56Base = (function() {
  class Character56Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character56Base.characterId = 56;

  // キャラ名
  Character56Base.characterName = "桐生つかさ";

  // 最初からいるか
  Character56Base.defaultJoin = true;

  // 画像のリスト
  Character56Base.images = ["./img/character/56/1.png", "./img/character/56/2.png"];

  // 基本攻撃タイプ
  Character56Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character56Base.attackBase = 13;

  // 成長率：HP
  Character56Base.hpBase = 17;

  // 成長率：物理防御
  Character56Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character56Base.mDefBase = 1.5;

  // 基本移動力
  Character56Base.moveBase = 4;

  // 基本射程
  Character56Base.rangeBase = 1;

  // 基本命中率
  Character56Base.hitRateBase = 95;

  // 基本回避率
  Character56Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character56Base.itemMax = 10;

  // コスト
  Character56Base.costBase = 1.5;

  // 必要経験値
  Character56Base.expRate = 2.2;

  // 死んだ時の台詞
  Character56Base.textDeath = "桐生つかさ";

  Character56Base.abilityName = "なし";

  Character56Base.abilityDesc = "なし";

  return Character56Base;

}).call(this);

Character57Base = (function() {
  class Character57Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character57Base.characterId = 57;

  // キャラ名
  Character57Base.characterName = "日下部若葉";

  // 最初からいるか
  Character57Base.defaultJoin = true;

  // 画像のリスト
  Character57Base.images = ["./img/character/57/1.png", "./img/character/57/2.png"];

  // 基本攻撃タイプ
  Character57Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character57Base.attackBase = 13;

  // 成長率：HP
  Character57Base.hpBase = 17;

  // 成長率：物理防御
  Character57Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character57Base.mDefBase = 1.5;

  // 基本移動力
  Character57Base.moveBase = 4;

  // 基本射程
  Character57Base.rangeBase = 1;

  // 基本命中率
  Character57Base.hitRateBase = 95;

  // 基本回避率
  Character57Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character57Base.itemMax = 10;

  // コスト
  Character57Base.costBase = 1.5;

  // 必要経験値
  Character57Base.expRate = 2.2;

  // 死んだ時の台詞
  Character57Base.textDeath = "日下部若葉";

  Character57Base.abilityName = "なし";

  Character57Base.abilityDesc = "なし";

  return Character57Base;

}).call(this);

Character58Base = (function() {
  class Character58Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character58Base.characterId = 58;

  // キャラ名
  Character58Base.characterName = "工藤忍";

  // 最初からいるか
  Character58Base.defaultJoin = true;

  // 画像のリスト
  Character58Base.images = ["./img/character/58/1.png", "./img/character/58/2.png"];

  // 基本攻撃タイプ
  Character58Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character58Base.attackBase = 13;

  // 成長率：HP
  Character58Base.hpBase = 17;

  // 成長率：物理防御
  Character58Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character58Base.mDefBase = 1.5;

  // 基本移動力
  Character58Base.moveBase = 4;

  // 基本射程
  Character58Base.rangeBase = 1;

  // 基本命中率
  Character58Base.hitRateBase = 95;

  // 基本回避率
  Character58Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character58Base.itemMax = 10;

  // コスト
  Character58Base.costBase = 1.5;

  // 必要経験値
  Character58Base.expRate = 2.2;

  // 死んだ時の台詞
  Character58Base.textDeath = "工藤忍";

  Character58Base.abilityName = "なし";

  Character58Base.abilityDesc = "なし";

  return Character58Base;

}).call(this);

Character59Base = (function() {
  class Character59Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character59Base.characterId = 59;

  // キャラ名
  Character59Base.characterName = "クラリス";

  // 最初からいるか
  Character59Base.defaultJoin = true;

  // 画像のリスト
  Character59Base.images = ["./img/character/59/1.png", "./img/character/59/2.png"];

  // 基本攻撃タイプ
  Character59Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character59Base.attackBase = 13;

  // 成長率：HP
  Character59Base.hpBase = 17;

  // 成長率：物理防御
  Character59Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character59Base.mDefBase = 1.5;

  // 基本移動力
  Character59Base.moveBase = 4;

  // 基本射程
  Character59Base.rangeBase = 1;

  // 基本命中率
  Character59Base.hitRateBase = 95;

  // 基本回避率
  Character59Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character59Base.itemMax = 10;

  // コスト
  Character59Base.costBase = 1.5;

  // 必要経験値
  Character59Base.expRate = 2.2;

  // 死んだ時の台詞
  Character59Base.textDeath = "クラリス";

  Character59Base.abilityName = "なし";

  Character59Base.abilityDesc = "なし";

  return Character59Base;

}).call(this);

Character60Base = (function() {
  class Character60Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character60Base.characterId = 60;

  // キャラ名
  Character60Base.characterName = "栗原ネネ";

  // 最初からいるか
  Character60Base.defaultJoin = true;

  // 画像のリスト
  Character60Base.images = ["./img/character/60/1.png", "./img/character/60/2.png"];

  // 基本攻撃タイプ
  Character60Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character60Base.attackBase = 13;

  // 成長率：HP
  Character60Base.hpBase = 17;

  // 成長率：物理防御
  Character60Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character60Base.mDefBase = 1.5;

  // 基本移動力
  Character60Base.moveBase = 4;

  // 基本射程
  Character60Base.rangeBase = 1;

  // 基本命中率
  Character60Base.hitRateBase = 95;

  // 基本回避率
  Character60Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character60Base.itemMax = 10;

  // コスト
  Character60Base.costBase = 1.5;

  // 必要経験値
  Character60Base.expRate = 2.2;

  // 死んだ時の台詞
  Character60Base.textDeath = "栗原ネネ";

  Character60Base.abilityName = "なし";

  Character60Base.abilityDesc = "なし";

  return Character60Base;

}).call(this);

Character61Base = (function() {
  class Character61Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character61Base.characterId = 61;

  // キャラ名
  Character61Base.characterName = "黒川千秋";

  // 最初からいるか
  Character61Base.defaultJoin = true;

  // 画像のリスト
  Character61Base.images = ["./img/character/61/1.png", "./img/character/61/2.png"];

  // 基本攻撃タイプ
  Character61Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character61Base.attackBase = 13;

  // 成長率：HP
  Character61Base.hpBase = 17;

  // 成長率：物理防御
  Character61Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character61Base.mDefBase = 1.5;

  // 基本移動力
  Character61Base.moveBase = 4;

  // 基本射程
  Character61Base.rangeBase = 1;

  // 基本命中率
  Character61Base.hitRateBase = 95;

  // 基本回避率
  Character61Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character61Base.itemMax = 10;

  // コスト
  Character61Base.costBase = 1.5;

  // 必要経験値
  Character61Base.expRate = 2.2;

  // 死んだ時の台詞
  Character61Base.textDeath = "黒川千秋";

  Character61Base.abilityName = "なし";

  Character61Base.abilityDesc = "なし";

  return Character61Base;

}).call(this);

Character62Base = (function() {
  class Character62Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character62Base.characterId = 62;

  // キャラ名
  Character62Base.characterName = "ケイト";

  // 最初からいるか
  Character62Base.defaultJoin = true;

  // 画像のリスト
  Character62Base.images = ["./img/character/62/1.png", "./img/character/62/2.png"];

  // 基本攻撃タイプ
  Character62Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character62Base.attackBase = 13;

  // 成長率：HP
  Character62Base.hpBase = 17;

  // 成長率：物理防御
  Character62Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character62Base.mDefBase = 1.5;

  // 基本移動力
  Character62Base.moveBase = 4;

  // 基本射程
  Character62Base.rangeBase = 1;

  // 基本命中率
  Character62Base.hitRateBase = 95;

  // 基本回避率
  Character62Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character62Base.itemMax = 10;

  // コスト
  Character62Base.costBase = 1.5;

  // 必要経験値
  Character62Base.expRate = 2.2;

  // 死んだ時の台詞
  Character62Base.textDeath = "ケイト";

  Character62Base.abilityName = "なし";

  Character62Base.abilityDesc = "なし";

  return Character62Base;

}).call(this);

Character63Base = (function() {
  class Character63Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character63Base.characterId = 63;

  // キャラ名
  Character63Base.characterName = "古賀小春";

  // 最初からいるか
  Character63Base.defaultJoin = true;

  // 画像のリスト
  Character63Base.images = ["./img/character/63/1.png", "./img/character/63/2.png"];

  // 基本攻撃タイプ
  Character63Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character63Base.attackBase = 13;

  // 成長率：HP
  Character63Base.hpBase = 17;

  // 成長率：物理防御
  Character63Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character63Base.mDefBase = 1.5;

  // 基本移動力
  Character63Base.moveBase = 4;

  // 基本射程
  Character63Base.rangeBase = 1;

  // 基本命中率
  Character63Base.hitRateBase = 95;

  // 基本回避率
  Character63Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character63Base.itemMax = 10;

  // コスト
  Character63Base.costBase = 1.5;

  // 必要経験値
  Character63Base.expRate = 2.2;

  // 死んだ時の台詞
  Character63Base.textDeath = "古賀小春";

  Character63Base.abilityName = "なし";

  Character63Base.abilityDesc = "なし";

  return Character63Base;

}).call(this);

Character64Base = (function() {
  class Character64Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character64Base.characterId = 64;

  // キャラ名
  Character64Base.characterName = "輿水幸子";

  // 最初からいるか
  Character64Base.defaultJoin = true;

  // 画像のリスト
  Character64Base.images = ["./img/character/64/1.png", "./img/character/64/2.png"];

  // 基本攻撃タイプ
  Character64Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character64Base.attackBase = 13;

  // 成長率：HP
  Character64Base.hpBase = 22;

  // 成長率：物理防御
  Character64Base.pDefBase = 1.2;

  // 成長率：魔法防御
  Character64Base.mDefBase = 1.5;

  // 基本移動力
  Character64Base.moveBase = 4;

  // 基本射程
  Character64Base.rangeBase = 1;

  // 基本命中率
  Character64Base.hitRateBase = 95;

  // 基本回避率
  Character64Base.dodgeRateBase = 1;

  // アイテム装備可能数
  Character64Base.itemMax = 10;

  // コスト
  Character64Base.costBase = 1.5;

  // 必要経験値
  Character64Base.expRate = 2.2;

  // 死んだ時の台詞
  Character64Base.textDeath = "輿水幸子";

  Character64Base.abilityName = "なし";

  Character64Base.abilityDesc = "なし";

  return Character64Base;

}).call(this);

Character65Base = (function() {
  class Character65Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character65Base.characterId = 65;

  // キャラ名
  Character65Base.characterName = "小関麗奈";

  // 最初からいるか
  Character65Base.defaultJoin = true;

  // 画像のリスト
  Character65Base.images = ["./img/character/65/1.png", "./img/character/65/2.png"];

  // 基本攻撃タイプ
  Character65Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character65Base.attackBase = 13;

  // 成長率：HP
  Character65Base.hpBase = 17;

  // 成長率：物理防御
  Character65Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character65Base.mDefBase = 1.5;

  // 基本移動力
  Character65Base.moveBase = 4;

  // 基本射程
  Character65Base.rangeBase = 1;

  // 基本命中率
  Character65Base.hitRateBase = 95;

  // 基本回避率
  Character65Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character65Base.itemMax = 10;

  // コスト
  Character65Base.costBase = 1.5;

  // 必要経験値
  Character65Base.expRate = 2.2;

  // 死んだ時の台詞
  Character65Base.textDeath = "小関麗奈";

  Character65Base.abilityName = "いたずら";

  Character65Base.abilityDesc = "味方ターン開始時に、10%の確率で周囲4マスのどこかに岩を置く";

  return Character65Base;

}).call(this);

Character66Base = (function() {
  class Character66Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character66Base.characterId = 66;

  // キャラ名
  Character66Base.characterName = "小早川紗枝";

  // 最初からいるか
  Character66Base.defaultJoin = true;

  // 画像のリスト
  Character66Base.images = ["./img/character/66/1.png", "./img/character/66/2.png"];

  // 基本攻撃タイプ
  Character66Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character66Base.attackBase = 13;

  // 成長率：HP
  Character66Base.hpBase = 17;

  // 成長率：物理防御
  Character66Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character66Base.mDefBase = 1.5;

  // 基本移動力
  Character66Base.moveBase = 4;

  // 基本射程
  Character66Base.rangeBase = 1;

  // 基本命中率
  Character66Base.hitRateBase = 95;

  // 基本回避率
  Character66Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character66Base.itemMax = 10;

  // コスト
  Character66Base.costBase = 1.5;

  // 必要経験値
  Character66Base.expRate = 2.2;

  // 死んだ時の台詞
  Character66Base.textDeath = "小早川紗枝";

  Character66Base.abilityName = "なし";

  Character66Base.abilityDesc = "なし";

  return Character66Base;

}).call(this);

Character67Base = (function() {
  class Character67Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character67Base.characterId = 67;

  // キャラ名
  Character67Base.characterName = "秋月律子";

  // 最初からいるか
  Character67Base.defaultJoin = false;

  // 画像のリスト
  Character67Base.images = [];

  // 基本攻撃タイプ
  Character67Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character67Base.attackBase = 14;

  // 成長率：HP
  Character67Base.hpBase = 18;

  // 成長率：物理防御
  Character67Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character67Base.mDefBase = 1.5;

  // 基本移動力
  Character67Base.moveBase = 4;

  // 基本射程
  Character67Base.rangeBase = 2;

  // 基本命中率
  Character67Base.hitRateBase = 99;

  // 基本回避率
  Character67Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character67Base.itemMax = 14;

  // コスト
  Character67Base.costBase = 1.5;

  // 必要経験値
  Character67Base.expRate = 2.2;

  // 死んだ時の台詞
  Character67Base.textDeath = "秋月律子";

  Character67Base.abilityName = "なし";

  Character67Base.abilityDesc = "なし";

  return Character67Base;

}).call(this);

Character68Base = (function() {
  class Character68Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character68Base.characterId = 68;

  // キャラ名
  Character68Base.characterName = "秋月涼";

  // 最初からいるか
  Character68Base.defaultJoin = false;

  // 画像のリスト
  Character68Base.images = [];

  // 基本攻撃タイプ
  Character68Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character68Base.attackBase = 13;

  // 成長率：HP
  Character68Base.hpBase = 17;

  // 成長率：物理防御
  Character68Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character68Base.mDefBase = 1.5;

  // 基本移動力
  Character68Base.moveBase = 4;

  // 基本射程
  Character68Base.rangeBase = 1;

  // 基本命中率
  Character68Base.hitRateBase = 95;

  // 基本回避率
  Character68Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character68Base.itemMax = 10;

  // コスト
  Character68Base.costBase = 1.5;

  // 必要経験値
  Character68Base.expRate = 2.2;

  // 死んだ時の台詞
  Character68Base.textDeath = "秋月涼";

  Character68Base.abilityName = "なし";

  Character68Base.abilityDesc = "なし";

  return Character68Base;

}).call(this);

Character69Base = (function() {
  class Character69Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character69Base.characterId = 69;

  // キャラ名
  Character69Base.characterName = "天海春香";

  // 最初からいるか
  Character69Base.defaultJoin = false;

  // 画像のリスト
  Character69Base.images = [];

  // 基本攻撃タイプ
  Character69Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character69Base.attackBase = 13;

  // 成長率：HP
  Character69Base.hpBase = 17;

  // 成長率：物理防御
  Character69Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character69Base.mDefBase = 1.5;

  // 基本移動力
  Character69Base.moveBase = 4;

  // 基本射程
  Character69Base.rangeBase = 1;

  // 基本命中率
  Character69Base.hitRateBase = 95;

  // 基本回避率
  Character69Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character69Base.itemMax = 10;

  // コスト
  Character69Base.costBase = 1.5;

  // 必要経験値
  Character69Base.expRate = 2.2;

  // 死んだ時の台詞
  Character69Base.textDeath = "天海春香";

  Character69Base.abilityName = "なし";

  Character69Base.abilityDesc = "なし";

  return Character69Base;

}).call(this);

Character70Base = (function() {
  class Character70Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character70Base.characterId = 70;

  // キャラ名
  Character70Base.characterName = "我那覇響";

  // 最初からいるか
  Character70Base.defaultJoin = false;

  // 画像のリスト
  Character70Base.images = [];

  // 基本攻撃タイプ
  Character70Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character70Base.attackBase = 13;

  // 成長率：HP
  Character70Base.hpBase = 17;

  // 成長率：物理防御
  Character70Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character70Base.mDefBase = 1.5;

  // 基本移動力
  Character70Base.moveBase = 4;

  // 基本射程
  Character70Base.rangeBase = 1;

  // 基本命中率
  Character70Base.hitRateBase = 95;

  // 基本回避率
  Character70Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character70Base.itemMax = 10;

  // コスト
  Character70Base.costBase = 1.5;

  // 必要経験値
  Character70Base.expRate = 2.2;

  // 死んだ時の台詞
  Character70Base.textDeath = "我那覇響";

  Character70Base.abilityName = "なし";

  Character70Base.abilityDesc = "なし";

  return Character70Base;

}).call(this);

Character71Base = (function() {
  class Character71Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character71Base.characterId = 71;

  // キャラ名
  Character71Base.characterName = "菊地真";

  // 最初からいるか
  Character71Base.defaultJoin = false;

  // 画像のリスト
  Character71Base.images = [];

  // 基本攻撃タイプ
  Character71Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character71Base.attackBase = 19;

  // 成長率：HP
  Character71Base.hpBase = 19;

  // 成長率：物理防御
  Character71Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character71Base.mDefBase = 1.5;

  // 基本移動力
  Character71Base.moveBase = 4;

  // 基本射程
  Character71Base.rangeBase = 1;

  // 基本命中率
  Character71Base.hitRateBase = 95;

  // 基本回避率
  Character71Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character71Base.itemMax = 10;

  // コスト
  Character71Base.costBase = 1.5;

  // 必要経験値
  Character71Base.expRate = 2.2;

  // 死んだ時の台詞
  Character71Base.textDeath = "菊地真";

  Character71Base.abilityName = "なし";

  Character71Base.abilityDesc = "なし";

  return Character71Base;

}).call(this);

Character72Base = (function() {
  class Character72Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character72Base.characterId = 72;

  // キャラ名
  Character72Base.characterName = "如月千早";

  // 最初からいるか
  Character72Base.defaultJoin = false;

  // 画像のリスト
  Character72Base.images = [];

  // 基本攻撃タイプ
  Character72Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character72Base.attackBase = 18;

  // 成長率：HP
  Character72Base.hpBase = 16;

  // 成長率：物理防御
  Character72Base.pDefBase = 1.8;

  // 成長率：魔法防御
  Character72Base.mDefBase = 1.4;

  // 基本移動力
  Character72Base.moveBase = 4;

  // 基本射程
  Character72Base.rangeBase = 4;

  // 基本命中率
  Character72Base.hitRateBase = 95;

  // 基本回避率
  Character72Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character72Base.itemMax = 10;

  // コスト
  Character72Base.costBase = 1.5;

  // 必要経験値
  Character72Base.expRate = 2.2;

  // 死んだ時の台詞
  Character72Base.textDeath = "如月千早";

  Character72Base.abilityName = "なし";

  Character72Base.abilityDesc = "なし";

  return Character72Base;

}).call(this);

Character73Base = (function() {
  class Character73Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character73Base.characterId = 73;

  // キャラ名
  Character73Base.characterName = "小日向美穂";

  // 最初からいるか
  Character73Base.defaultJoin = false;

  // 画像のリスト
  Character73Base.images = [];

  // 基本攻撃タイプ
  Character73Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character73Base.attackBase = 13;

  // 成長率：HP
  Character73Base.hpBase = 17;

  // 成長率：物理防御
  Character73Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character73Base.mDefBase = 1.5;

  // 基本移動力
  Character73Base.moveBase = 4;

  // 基本射程
  Character73Base.rangeBase = 1;

  // 基本命中率
  Character73Base.hitRateBase = 95;

  // 基本回避率
  Character73Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character73Base.itemMax = 8;

  // コスト
  Character73Base.costBase = 1.5;

  // 必要経験値
  Character73Base.expRate = 2.0;

  // 死んだ時の台詞
  Character73Base.textDeath = "小日向美穂";

  Character73Base.abilityName = "なし";

  Character73Base.abilityDesc = "なし";

  return Character73Base;

}).call(this);

Character74Base = (function() {
  class Character74Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character74Base.characterId = 74;

  // キャラ名
  Character74Base.characterName = "小松伊吹";

  // 最初からいるか
  Character74Base.defaultJoin = false;

  // 画像のリスト
  Character74Base.images = [];

  // 基本攻撃タイプ
  Character74Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character74Base.attackBase = 13;

  // 成長率：HP
  Character74Base.hpBase = 17;

  // 成長率：物理防御
  Character74Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character74Base.mDefBase = 1.5;

  // 基本移動力
  Character74Base.moveBase = 4;

  // 基本射程
  Character74Base.rangeBase = 1;

  // 基本命中率
  Character74Base.hitRateBase = 95;

  // 基本回避率
  Character74Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character74Base.itemMax = 10;

  // コスト
  Character74Base.costBase = 1.5;

  // 必要経験値
  Character74Base.expRate = 2.2;

  // 死んだ時の台詞
  Character74Base.textDeath = "小松伊吹";

  Character74Base.abilityName = "なし";

  Character74Base.abilityDesc = "なし";

  return Character74Base;

}).call(this);

Character75Base = (function() {
  class Character75Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character75Base.characterId = 75;

  // キャラ名
  Character75Base.characterName = "小室千奈美";

  // 最初からいるか
  Character75Base.defaultJoin = false;

  // 画像のリスト
  Character75Base.images = [];

  // 基本攻撃タイプ
  Character75Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character75Base.attackBase = 13;

  // 成長率：HP
  Character75Base.hpBase = 17;

  // 成長率：物理防御
  Character75Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character75Base.mDefBase = 1.5;

  // 基本移動力
  Character75Base.moveBase = 4;

  // 基本射程
  Character75Base.rangeBase = 1;

  // 基本命中率
  Character75Base.hitRateBase = 95;

  // 基本回避率
  Character75Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character75Base.itemMax = 10;

  // コスト
  Character75Base.costBase = 1.5;

  // 必要経験値
  Character75Base.expRate = 2.2;

  // 死んだ時の台詞
  Character75Base.textDeath = "小室千奈美";

  Character75Base.abilityName = "なし";

  Character75Base.abilityDesc = "なし";

  return Character75Base;

}).call(this);

Character76Base = (function() {
  class Character76Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character76Base.characterId = 76;

  // キャラ名
  Character76Base.characterName = "西園寺琴歌";

  // 最初からいるか
  Character76Base.defaultJoin = false;

  // 画像のリスト
  Character76Base.images = [];

  // 基本攻撃タイプ
  Character76Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character76Base.attackBase = 11;

  // 成長率：HP
  Character76Base.hpBase = 19;

  // 成長率：物理防御
  Character76Base.pDefBase = 1.6;

  // 成長率：魔法防御
  Character76Base.mDefBase = 1.6;

  // 基本移動力
  Character76Base.moveBase = 3;

  // 基本射程
  Character76Base.rangeBase = 1;

  // 基本命中率
  Character76Base.hitRateBase = 93;

  // 基本回避率
  Character76Base.dodgeRateBase = 2;

  // アイテム装備可能数
  Character76Base.itemMax = 20;

  // コスト
  Character76Base.costBase = 1.5;

  // 必要経験値
  Character76Base.expRate = 2.2;

  // 死んだ時の台詞
  Character76Base.textDeath = "西園寺琴歌";

  Character76Base.abilityName = "なし";

  Character76Base.abilityDesc = "なし";

  return Character76Base;

}).call(this);

Character77Base = (function() {
  class Character77Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character77Base.characterId = 77;

  // キャラ名
  Character77Base.characterName = "財前時子";

  // 最初からいるか
  Character77Base.defaultJoin = false;

  // 画像のリスト
  Character77Base.images = [];

  // 基本攻撃タイプ
  Character77Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character77Base.attackBase = 21;

  // 成長率：HP
  Character77Base.hpBase = 18;

  // 成長率：物理防御
  Character77Base.pDefBase = 1.7;

  // 成長率：魔法防御
  Character77Base.mDefBase = 1.4;

  // 基本移動力
  Character77Base.moveBase = 4;

  // 基本射程
  Character77Base.rangeBase = 2;

  // 基本命中率
  Character77Base.hitRateBase = 95;

  // 基本回避率
  Character77Base.dodgeRateBase = 2;

  // アイテム装備可能数
  Character77Base.itemMax = 6;

  // コスト
  Character77Base.costBase = 1.5;

  // 必要経験値
  Character77Base.expRate = 2.2;

  // 死んだ時の台詞
  Character77Base.textDeath = "財前時子";

  Character77Base.abilityName = "愛のムチ";

  Character77Base.abilityDesc = "時子が攻撃した敵は、このターン以降、なるべく時子に近づこうとする";

  return Character77Base;

}).call(this);

Character78Base = (function() {
  class Character78Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character78Base.characterId = 78;

  // キャラ名
  Character78Base.characterName = "斉藤洋子";

  // 最初からいるか
  Character78Base.defaultJoin = false;

  // 画像のリスト
  Character78Base.images = [];

  // 基本攻撃タイプ
  Character78Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character78Base.attackBase = 13;

  // 成長率：HP
  Character78Base.hpBase = 17;

  // 成長率：物理防御
  Character78Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character78Base.mDefBase = 1.5;

  // 基本移動力
  Character78Base.moveBase = 4;

  // 基本射程
  Character78Base.rangeBase = 1;

  // 基本命中率
  Character78Base.hitRateBase = 95;

  // 基本回避率
  Character78Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character78Base.itemMax = 10;

  // コスト
  Character78Base.costBase = 1.5;

  // 必要経験値
  Character78Base.expRate = 2.2;

  // 死んだ時の台詞
  Character78Base.textDeath = "斉藤洋子";

  Character78Base.abilityName = "なし";

  Character78Base.abilityDesc = "なし";

  return Character78Base;

}).call(this);

Character79Base = (function() {
  class Character79Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character79Base.characterId = 79;

  // キャラ名
  Character79Base.characterName = "冴島清美";

  // 最初からいるか
  Character79Base.defaultJoin = false;

  // 画像のリスト
  Character79Base.images = [];

  // 基本攻撃タイプ
  Character79Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character79Base.attackBase = 13;

  // 成長率：HP
  Character79Base.hpBase = 17;

  // 成長率：物理防御
  Character79Base.pDefBase = 1.8;

  // 成長率：魔法防御
  Character79Base.mDefBase = 1.3;

  // 基本移動力
  Character79Base.moveBase = 4;

  // 基本射程
  Character79Base.rangeBase = 1;

  // 基本命中率
  Character79Base.hitRateBase = 95;

  // 基本回避率
  Character79Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character79Base.itemMax = 10;

  // コスト
  Character79Base.costBase = 1.5;

  // 必要経験値
  Character79Base.expRate = 2.2;

  // 死んだ時の台詞
  Character79Base.textDeath = "冴島清美";

  Character79Base.abilityName = "風紀";

  Character79Base.abilityDesc = "すべてのユニットの特殊能力を無効化する";

  return Character79Base;

}).call(this);

Character80Base = (function() {
  class Character80Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character80Base.characterId = 80;

  // キャラ名
  Character80Base.characterName = "榊原里美";

  // 最初からいるか
  Character80Base.defaultJoin = false;

  // 画像のリスト
  Character80Base.images = [];

  // 基本攻撃タイプ
  Character80Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character80Base.attackBase = 13;

  // 成長率：HP
  Character80Base.hpBase = 17;

  // 成長率：物理防御
  Character80Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character80Base.mDefBase = 1.5;

  // 基本移動力
  Character80Base.moveBase = 4;

  // 基本射程
  Character80Base.rangeBase = 1;

  // 基本命中率
  Character80Base.hitRateBase = 95;

  // 基本回避率
  Character80Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character80Base.itemMax = 10;

  // コスト
  Character80Base.costBase = 1.5;

  // 必要経験値
  Character80Base.expRate = 2.2;

  // 死んだ時の台詞
  Character80Base.textDeath = "榊原里美";

  Character80Base.abilityName = "なし";

  Character80Base.abilityDesc = "なし";

  return Character80Base;

}).call(this);

Character81Base = (function() {
  class Character81Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character81Base.characterId = 81;

  // キャラ名
  Character81Base.characterName = "鷺沢文香";

  // 最初からいるか
  Character81Base.defaultJoin = false;

  // 画像のリスト
  Character81Base.images = [];

  // 基本攻撃タイプ
  Character81Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character81Base.attackBase = 10;

  // 成長率：HP
  Character81Base.hpBase = 14;

  // 成長率：物理防御
  Character81Base.pDefBase = 1;

  // 成長率：魔法防御
  Character81Base.mDefBase = 1;

  // 基本移動力
  Character81Base.moveBase = 2;

  // 基本射程
  Character81Base.rangeBase = 2;

  // 基本命中率
  Character81Base.hitRateBase = 88;

  // 基本回避率
  Character81Base.dodgeRateBase = 1;

  // アイテム装備可能数
  Character81Base.itemMax = 20;

  // コスト
  Character81Base.costBase = 1.5;

  // 必要経験値
  Character81Base.expRate = 2.2;

  // 死んだ時の台詞
  Character81Base.textDeath = "鷺沢文香";

  Character81Base.abilityName = "なし";

  Character81Base.abilityDesc = "装備したアイテムの効果が倍になる";

  return Character81Base;

}).call(this);

Character82Base = (function() {
  class Character82Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character82Base.characterId = 82;

  // キャラ名
  Character82Base.characterName = "佐久間まゆ";

  // 最初からいるか
  Character82Base.defaultJoin = false;

  // 画像のリスト
  Character82Base.images = [];

  // 基本攻撃タイプ
  Character82Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character82Base.attackBase = 15;

  // 成長率：HP
  Character82Base.hpBase = 18;

  // 成長率：物理防御
  Character82Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character82Base.mDefBase = 1.5;

  // 基本移動力
  Character82Base.moveBase = 4;

  // 基本射程
  Character82Base.rangeBase = 2;

  // 基本命中率
  Character82Base.hitRateBase = 95;

  // 基本回避率
  Character82Base.dodgeRateBase = 2;

  // アイテム装備可能数
  Character82Base.itemMax = 10;

  // コスト
  Character82Base.costBase = 1.5;

  // 必要経験値
  Character82Base.expRate = 2.2;

  // 死んだ時の台詞
  Character82Base.textDeath = "佐久間まゆ";

  Character82Base.abilityName = "恐怖";

  Character82Base.abilityDesc = "まゆが攻撃した敵は、次のターン、移動力が+1され、なるべくまゆから遠ざかろうとする";

  return Character82Base;

}).call(this);

Character83Base = (function() {
  class Character83Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character83Base.characterId = 83;

  // キャラ名
  Character83Base.characterName = "櫻井桃華";

  // 最初からいるか
  Character83Base.defaultJoin = false;

  // 画像のリスト
  Character83Base.images = [];

  // 基本攻撃タイプ
  Character83Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character83Base.attackBase = 13;

  // 成長率：HP
  Character83Base.hpBase = 15;

  // 成長率：物理防御
  Character83Base.pDefBase = 1.3;

  // 成長率：魔法防御
  Character83Base.mDefBase = 2.5;

  // 基本移動力
  Character83Base.moveBase = 4;

  // 基本射程
  Character83Base.rangeBase = 1;

  // 基本命中率
  Character83Base.hitRateBase = 95;

  // 基本回避率
  Character83Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character83Base.itemMax = 10;

  // コスト
  Character83Base.costBase = 1.5;

  // 必要経験値
  Character83Base.expRate = 2.2;

  // 死んだ時の台詞
  Character83Base.textDeath = "櫻井桃華";

  Character83Base.abilityName = "なし";

  Character83Base.abilityDesc = "なし";

  return Character83Base;

}).call(this);

Character84Base = (function() {
  class Character84Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character84Base.characterId = 84;

  // キャラ名
  Character84Base.characterName = "佐々木千枝";

  // 最初からいるか
  Character84Base.defaultJoin = false;

  // 画像のリスト
  Character84Base.images = [];

  // 基本攻撃タイプ
  Character84Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character84Base.attackBase = 13;

  // 成長率：HP
  Character84Base.hpBase = 17;

  // 成長率：物理防御
  Character84Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character84Base.mDefBase = 1.5;

  // 基本移動力
  Character84Base.moveBase = 4;

  // 基本射程
  Character84Base.rangeBase = 1;

  // 基本命中率
  Character84Base.hitRateBase = 95;

  // 基本回避率
  Character84Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character84Base.itemMax = 10;

  // コスト
  Character84Base.costBase = 1.5;

  // 必要経験値
  Character84Base.expRate = 2.2;

  // 死んだ時の台詞
  Character84Base.textDeath = "佐々木千枝";

  Character84Base.abilityName = "なし";

  Character84Base.abilityDesc = "なし";

  return Character84Base;

}).call(this);

Character85Base = (function() {
  class Character85Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character85Base.characterId = 85;

  // キャラ名
  Character85Base.characterName = "佐城雪美";

  // 最初からいるか
  Character85Base.defaultJoin = false;

  // 画像のリスト
  Character85Base.images = [];

  // 基本攻撃タイプ
  Character85Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character85Base.attackBase = 13;

  // 成長率：HP
  Character85Base.hpBase = 17;

  // 成長率：物理防御
  Character85Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character85Base.mDefBase = 1.5;

  // 基本移動力
  Character85Base.moveBase = 4;

  // 基本射程
  Character85Base.rangeBase = 1;

  // 基本命中率
  Character85Base.hitRateBase = 95;

  // 基本回避率
  Character85Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character85Base.itemMax = 10;

  // コスト
  Character85Base.costBase = 1.5;

  // 必要経験値
  Character85Base.expRate = 2.2;

  // 死んだ時の台詞
  Character85Base.textDeath = "佐城雪美";

  Character85Base.abilityName = "なし";

  Character85Base.abilityDesc = "なし";

  return Character85Base;

}).call(this);

Character86Base = (function() {
  class Character86Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character86Base.characterId = 86;

  // キャラ名
  Character86Base.characterName = "佐藤心";

  // 最初からいるか
  Character86Base.defaultJoin = false;

  // 画像のリスト
  Character86Base.images = [];

  // 基本攻撃タイプ
  Character86Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character86Base.attackBase = 14;

  // 成長率：HP
  Character86Base.hpBase = 15;

  // 成長率：物理防御
  Character86Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character86Base.mDefBase = 2;

  // 基本移動力
  Character86Base.moveBase = 3;

  // 基本射程
  Character86Base.rangeBase = 2;

  // 基本命中率
  Character86Base.hitRateBase = 95;

  // 基本回避率
  Character86Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character86Base.itemMax = 10;

  // コスト
  Character86Base.costBase = 1.5;

  // 必要経験値
  Character86Base.expRate = 2.2;

  // 死んだ時の台詞
  Character86Base.textDeath = "佐藤心";

  Character86Base.abilityName = "キャラ付け";

  Character86Base.abilityDesc = "HPが50%以上ある時、攻撃が30%上がる";

  return Character86Base;

}).call(this);

Character87Base = (function() {
  class Character87Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character87Base.characterId = 87;

  // キャラ名
  Character87Base.characterName = "沢田麻理菜";

  // 最初からいるか
  Character87Base.defaultJoin = false;

  // 画像のリスト
  Character87Base.images = [];

  // 基本攻撃タイプ
  Character87Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character87Base.attackBase = 13;

  // 成長率：HP
  Character87Base.hpBase = 17;

  // 成長率：物理防御
  Character87Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character87Base.mDefBase = 1.5;

  // 基本移動力
  Character87Base.moveBase = 4;

  // 基本射程
  Character87Base.rangeBase = 1;

  // 基本命中率
  Character87Base.hitRateBase = 95;

  // 基本回避率
  Character87Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character87Base.itemMax = 10;

  // コスト
  Character87Base.costBase = 1.5;

  // 必要経験値
  Character87Base.expRate = 2.2;

  // 死んだ時の台詞
  Character87Base.textDeath = "沢田麻理菜";

  Character87Base.abilityName = "なし";

  Character87Base.abilityDesc = "なし";

  return Character87Base;

}).call(this);

Character88Base = (function() {
  class Character88Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character88Base.characterId = 88;

  // キャラ名
  Character88Base.characterName = "椎名法子";

  // 最初からいるか
  Character88Base.defaultJoin = false;

  // 画像のリスト
  Character88Base.images = [];

  // 基本攻撃タイプ
  Character88Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character88Base.attackBase = 12;

  // 成長率：HP
  Character88Base.hpBase = 17;

  // 成長率：物理防御
  Character88Base.pDefBase = 1.4;

  // 成長率：魔法防御
  Character88Base.mDefBase = 1.4;

  // 基本移動力
  Character88Base.moveBase = 4;

  // 基本射程
  Character88Base.rangeBase = 1;

  // 基本命中率
  Character88Base.hitRateBase = 93;

  // 基本回避率
  Character88Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character88Base.itemMax = 10;

  // コスト
  Character88Base.costBase = 1.5;

  // 必要経験値
  Character88Base.expRate = 2.2;

  // 死んだ時の台詞
  Character88Base.textDeath = "椎名法子";

  Character88Base.abilityName = "ドーナツ配布";

  Character88Base.abilityDesc = "周囲8マスの味方のHPを10%回復することがある";

  return Character88Base;

}).call(this);

Character89Base = (function() {
  class Character89Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character89Base.characterId = 89;

  // キャラ名
  Character89Base.characterName = "塩見周子";

  // 最初からいるか
  Character89Base.defaultJoin = false;

  // 画像のリスト
  Character89Base.images = [];

  // 基本攻撃タイプ
  Character89Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character89Base.attackBase = 12;

  // 成長率：HP
  Character89Base.hpBase = 16;

  // 成長率：物理防御
  Character89Base.pDefBase = 1.4;

  // 成長率：魔法防御
  Character89Base.mDefBase = 1.6;

  // 基本移動力
  Character89Base.moveBase = 4;

  // 基本射程
  Character89Base.rangeBase = 2;

  // 基本命中率
  Character89Base.hitRateBase = 95;

  // 基本回避率
  Character89Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character89Base.itemMax = 12;

  // コスト
  Character89Base.costBase = 1.5;

  // 必要経験値
  Character89Base.expRate = 2.3;

  // 死んだ時の台詞
  Character89Base.textDeath = "塩見周子";

  Character89Base.abilityName = "気まぐれ";

  Character89Base.abilityDesc = "ターン開始時、HPが10%回復するか、5%のダメージを受ける";

  return Character89Base;

}).call(this);

Character90Base = (function() {
  class Character90Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character90Base.characterId = 90;

  // キャラ名
  Character90Base.characterName = "四条貴音";

  // 最初からいるか
  Character90Base.defaultJoin = false;

  // 画像のリスト
  Character90Base.images = [];

  // 基本攻撃タイプ
  Character90Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character90Base.attackBase = 13;

  // 成長率：HP
  Character90Base.hpBase = 17;

  // 成長率：物理防御
  Character90Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character90Base.mDefBase = 1.5;

  // 基本移動力
  Character90Base.moveBase = 4;

  // 基本射程
  Character90Base.rangeBase = 1;

  // 基本命中率
  Character90Base.hitRateBase = 95;

  // 基本回避率
  Character90Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character90Base.itemMax = 10;

  // コスト
  Character90Base.costBase = 1.5;

  // 必要経験値
  Character90Base.expRate = 2.2;

  // 死んだ時の台詞
  Character90Base.textDeath = "四条貴音";

  Character90Base.abilityName = "なし";

  Character90Base.abilityDesc = "なし";

  return Character90Base;

}).call(this);

Character91Base = (function() {
  class Character91Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character91Base.characterId = 91;

  // キャラ名
  Character91Base.characterName = "篠原礼";

  // 最初からいるか
  Character91Base.defaultJoin = false;

  // 画像のリスト
  Character91Base.images = [];

  // 基本攻撃タイプ
  Character91Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character91Base.attackBase = 13;

  // 成長率：HP
  Character91Base.hpBase = 17;

  // 成長率：物理防御
  Character91Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character91Base.mDefBase = 1.5;

  // 基本移動力
  Character91Base.moveBase = 4;

  // 基本射程
  Character91Base.rangeBase = 1;

  // 基本命中率
  Character91Base.hitRateBase = 95;

  // 基本回避率
  Character91Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character91Base.itemMax = 10;

  // コスト
  Character91Base.costBase = 1.5;

  // 必要経験値
  Character91Base.expRate = 2.2;

  // 死んだ時の台詞
  Character91Base.textDeath = "篠原礼";

  Character91Base.abilityName = "なし";

  Character91Base.abilityDesc = "なし";

  return Character91Base;

}).call(this);

Character92Base = (function() {
  class Character92Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character92Base.characterId = 92;

  // キャラ名
  Character92Base.characterName = "首藤葵";

  // 最初からいるか
  Character92Base.defaultJoin = false;

  // 画像のリスト
  Character92Base.images = [];

  // 基本攻撃タイプ
  Character92Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character92Base.attackBase = 13;

  // 成長率：HP
  Character92Base.hpBase = 17;

  // 成長率：物理防御
  Character92Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character92Base.mDefBase = 1.5;

  // 基本移動力
  Character92Base.moveBase = 4;

  // 基本射程
  Character92Base.rangeBase = 1;

  // 基本命中率
  Character92Base.hitRateBase = 95;

  // 基本回避率
  Character92Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character92Base.itemMax = 10;

  // コスト
  Character92Base.costBase = 1.5;

  // 必要経験値
  Character92Base.expRate = 2.2;

  // 死んだ時の台詞
  Character92Base.textDeath = "首藤葵";

  Character92Base.abilityName = "なし";

  Character92Base.abilityDesc = "なし";

  return Character92Base;

}).call(this);

Character93Base = (function() {
  class Character93Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character93Base.characterId = 93;

  // キャラ名
  Character93Base.characterName = "城ヶ崎美嘉";

  // 最初からいるか
  Character93Base.defaultJoin = false;

  // 画像のリスト
  Character93Base.images = [];

  // 基本攻撃タイプ
  Character93Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character93Base.attackBase = 14;

  // 成長率：HP
  Character93Base.hpBase = 18;

  // 成長率：物理防御
  Character93Base.pDefBase = 1;

  // 成長率：魔法防御
  Character93Base.mDefBase = 2;

  // 基本移動力
  Character93Base.moveBase = 4;

  // 基本射程
  Character93Base.rangeBase = 1;

  // 基本命中率
  Character93Base.hitRateBase = 95;

  // 基本回避率
  Character93Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character93Base.itemMax = 12;

  // コスト
  Character93Base.costBase = 1.5;

  // 必要経験値
  Character93Base.expRate = 2.2;

  // 死んだ時の台詞
  Character93Base.textDeath = "城ヶ崎美嘉";

  Character93Base.abilityName = "姉妹";

  Character93Base.abilityDesc = "城ヶ崎莉嘉が出撃している間、物防が2倍になり、移動、射程が1上がる";

  return Character93Base;

}).call(this);

Character94Base = (function() {
  class Character94Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character94Base.characterId = 94;

  // キャラ名
  Character94Base.characterName = "城ヶ崎莉嘉";

  // 最初からいるか
  Character94Base.defaultJoin = false;

  // 画像のリスト
  Character94Base.images = [];

  // 基本攻撃タイプ
  Character94Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character94Base.attackBase = 14;

  // 成長率：HP
  Character94Base.hpBase = 16;

  // 成長率：物理防御
  Character94Base.pDefBase = 2;

  // 成長率：魔法防御
  Character94Base.mDefBase = 1;

  // 基本移動力
  Character94Base.moveBase = 4;

  // 基本射程
  Character94Base.rangeBase = 1;

  // 基本命中率
  Character94Base.hitRateBase = 93;

  // 基本回避率
  Character94Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character94Base.itemMax = 10;

  // コスト
  Character94Base.costBase = 1.5;

  // 必要経験値
  Character94Base.expRate = 2.2;

  // 死んだ時の台詞
  Character94Base.textDeath = "城ヶ崎莉嘉";

  Character94Base.abilityName = "姉妹";

  Character94Base.abilityDesc = "城ヶ崎美嘉が出撃している間、魔防が2倍になり、移動、射程が1上がる";

  return Character94Base;

}).call(this);

Character95Base = (function() {
  class Character95Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character95Base.characterId = 95;

  // キャラ名
  Character95Base.characterName = "白菊ほたる";

  // 最初からいるか
  Character95Base.defaultJoin = false;

  // 画像のリスト
  Character95Base.images = [];

  // 基本攻撃タイプ
  Character95Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character95Base.attackBase = 13;

  // 成長率：HP
  Character95Base.hpBase = 17;

  // 成長率：物理防御
  Character95Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character95Base.mDefBase = 1.5;

  // 基本移動力
  Character95Base.moveBase = 4;

  // 基本射程
  Character95Base.rangeBase = 1;

  // 基本命中率
  Character95Base.hitRateBase = 95;

  // 基本回避率
  Character95Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character95Base.itemMax = 10;

  // コスト
  Character95Base.costBase = 1.5;

  // 必要経験値
  Character95Base.expRate = 2.2;

  // 死んだ時の台詞
  Character95Base.textDeath = "白菊ほたる";

  Character95Base.abilityName = "なし";

  Character95Base.abilityDesc = "なし";

  return Character95Base;

}).call(this);

Character96Base = (function() {
  class Character96Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character96Base.characterId = 96;

  // キャラ名
  Character96Base.characterName = "白坂小梅";

  // 最初からいるか
  Character96Base.defaultJoin = false;

  // 画像のリスト
  Character96Base.images = [];

  // 基本攻撃タイプ
  Character96Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character96Base.attackBase = 13;

  // 成長率：HP
  Character96Base.hpBase = 13;

  // 成長率：物理防御
  Character96Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character96Base.mDefBase = 1.5;

  // 基本移動力
  Character96Base.moveBase = 3;

  // 基本射程
  Character96Base.rangeBase = 4;

  // 基本命中率
  Character96Base.hitRateBase = 95;

  // 基本回避率
  Character96Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character96Base.itemMax = 10;

  // コスト
  Character96Base.costBase = 1.5;

  // 必要経験値
  Character96Base.expRate = 2.2;

  // 死んだ時の台詞
  Character96Base.textDeath = "白坂小梅";

  Character96Base.abilityName = "あの子が遊びにきた";

  Character96Base.abilityDesc = "敵ターンの間だけ、自身の周囲のマスにランダムで攻撃不可のユニットが出現する";

  return Character96Base;

}).call(this);

Character97Base = (function() {
  class Character97Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character97Base.characterId = 97;

  // キャラ名
  Character97Base.characterName = "杉坂海";

  // 最初からいるか
  Character97Base.defaultJoin = false;

  // 画像のリスト
  Character97Base.images = [];

  // 基本攻撃タイプ
  Character97Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character97Base.attackBase = 13;

  // 成長率：HP
  Character97Base.hpBase = 17;

  // 成長率：物理防御
  Character97Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character97Base.mDefBase = 1.5;

  // 基本移動力
  Character97Base.moveBase = 4;

  // 基本射程
  Character97Base.rangeBase = 1;

  // 基本命中率
  Character97Base.hitRateBase = 95;

  // 基本回避率
  Character97Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character97Base.itemMax = 10;

  // コスト
  Character97Base.costBase = 1.5;

  // 必要経験値
  Character97Base.expRate = 2.2;

  // 死んだ時の台詞
  Character97Base.textDeath = "杉坂海";

  Character97Base.abilityName = "なし";

  Character97Base.abilityDesc = "なし";

  return Character97Base;

}).call(this);

Character98Base = (function() {
  class Character98Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character98Base.characterId = 98;

  // キャラ名
  Character98Base.characterName = "涼宮星花";

  // 最初からいるか
  Character98Base.defaultJoin = false;

  // 画像のリスト
  Character98Base.images = [];

  // 基本攻撃タイプ
  Character98Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character98Base.attackBase = 13;

  // 成長率：HP
  Character98Base.hpBase = 17;

  // 成長率：物理防御
  Character98Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character98Base.mDefBase = 1.5;

  // 基本移動力
  Character98Base.moveBase = 4;

  // 基本射程
  Character98Base.rangeBase = 1;

  // 基本命中率
  Character98Base.hitRateBase = 95;

  // 基本回避率
  Character98Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character98Base.itemMax = 10;

  // コスト
  Character98Base.costBase = 1.5;

  // 必要経験値
  Character98Base.expRate = 2.2;

  // 死んだ時の台詞
  Character98Base.textDeath = "涼宮星花";

  Character98Base.abilityName = "なし";

  Character98Base.abilityDesc = "なし";

  return Character98Base;

}).call(this);

Character99Base = (function() {
  class Character99Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character99Base.characterId = 99;

  // キャラ名
  Character99Base.characterName = "関裕美";

  // 最初からいるか
  Character99Base.defaultJoin = false;

  // 画像のリスト
  Character99Base.images = [];

  // 基本攻撃タイプ
  Character99Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character99Base.attackBase = 13;

  // 成長率：HP
  Character99Base.hpBase = 17;

  // 成長率：物理防御
  Character99Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character99Base.mDefBase = 1.5;

  // 基本移動力
  Character99Base.moveBase = 4;

  // 基本射程
  Character99Base.rangeBase = 1;

  // 基本命中率
  Character99Base.hitRateBase = 95;

  // 基本回避率
  Character99Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character99Base.itemMax = 10;

  // コスト
  Character99Base.costBase = 1.5;

  // 必要経験値
  Character99Base.expRate = 2.2;

  // 死んだ時の台詞
  Character99Base.textDeath = "関裕美";

  Character99Base.abilityName = "なし";

  Character99Base.abilityDesc = "なし";

  return Character99Base;

}).call(this);

Character100Base = (function() {
  class Character100Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character100Base.characterId = 100;

  // キャラ名
  Character100Base.characterName = "瀬名詩織";

  // 最初からいるか
  Character100Base.defaultJoin = false;

  // 画像のリスト
  Character100Base.images = [];

  // 基本攻撃タイプ
  Character100Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character100Base.attackBase = 13;

  // 成長率：HP
  Character100Base.hpBase = 17;

  // 成長率：物理防御
  Character100Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character100Base.mDefBase = 1.5;

  // 基本移動力
  Character100Base.moveBase = 4;

  // 基本射程
  Character100Base.rangeBase = 1;

  // 基本命中率
  Character100Base.hitRateBase = 95;

  // 基本回避率
  Character100Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character100Base.itemMax = 10;

  // コスト
  Character100Base.costBase = 1.5;

  // 必要経験値
  Character100Base.expRate = 2.2;

  // 死んだ時の台詞
  Character100Base.textDeath = "瀬名詩織";

  Character100Base.abilityName = "なし";

  Character100Base.abilityDesc = "なし";

  return Character100Base;

}).call(this);

Character101Base = (function() {
  class Character101Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character101Base.characterId = 101;

  // キャラ名
  Character101Base.characterName = "仙崎恵磨";

  // 最初からいるか
  Character101Base.defaultJoin = false;

  // 画像のリスト
  Character101Base.images = [];

  // 基本攻撃タイプ
  Character101Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character101Base.attackBase = 13;

  // 成長率：HP
  Character101Base.hpBase = 17;

  // 成長率：物理防御
  Character101Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character101Base.mDefBase = 1.5;

  // 基本移動力
  Character101Base.moveBase = 4;

  // 基本射程
  Character101Base.rangeBase = 1;

  // 基本命中率
  Character101Base.hitRateBase = 95;

  // 基本回避率
  Character101Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character101Base.itemMax = 10;

  // コスト
  Character101Base.costBase = 1.5;

  // 必要経験値
  Character101Base.expRate = 2.2;

  // 死んだ時の台詞
  Character101Base.textDeath = "仙崎恵磨";

  Character101Base.abilityName = "なし";

  Character101Base.abilityDesc = "なし";

  return Character101Base;

}).call(this);

Character102Base = (function() {
  class Character102Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character102Base.characterId = 102;

  // キャラ名
  Character102Base.characterName = "相馬夏美";

  // 最初からいるか
  Character102Base.defaultJoin = false;

  // 画像のリスト
  Character102Base.images = [];

  // 基本攻撃タイプ
  Character102Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character102Base.attackBase = 13;

  // 成長率：HP
  Character102Base.hpBase = 17;

  // 成長率：物理防御
  Character102Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character102Base.mDefBase = 1.5;

  // 基本移動力
  Character102Base.moveBase = 4;

  // 基本射程
  Character102Base.rangeBase = 1;

  // 基本命中率
  Character102Base.hitRateBase = 95;

  // 基本回避率
  Character102Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character102Base.itemMax = 10;

  // コスト
  Character102Base.costBase = 1.5;

  // 必要経験値
  Character102Base.expRate = 2.2;

  // 死んだ時の台詞
  Character102Base.textDeath = "相馬夏美";

  Character102Base.abilityName = "なし";

  Character102Base.abilityDesc = "なし";

  return Character102Base;

}).call(this);

Character103Base = (function() {
  class Character103Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character103Base.characterId = 103;

  // キャラ名
  Character103Base.characterName = "高垣楓";

  // 最初からいるか
  Character103Base.defaultJoin = false;

  // 画像のリスト
  Character103Base.images = [];

  // 基本攻撃タイプ
  Character103Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character103Base.attackBase = 16;

  // 成長率：HP
  Character103Base.hpBase = 17;

  // 成長率：物理防御
  Character103Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character103Base.mDefBase = 2;

  // 基本移動力
  Character103Base.moveBase = 4;

  // 基本射程
  Character103Base.rangeBase = 3;

  // 基本命中率
  Character103Base.hitRateBase = 99;

  // 基本回避率
  Character103Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character103Base.itemMax = 12;

  // コスト
  Character103Base.costBase = 1.5;

  // 必要経験値
  Character103Base.expRate = 4.4;

  // 死んだ時の台詞
  Character103Base.textDeath = "高垣楓";

  Character103Base.abilityName = "歌姫";

  Character103Base.abilityDesc = "攻撃した敵の周囲の敵にもダメージ、味方を回復する";

  return Character103Base;

}).call(this);

Character104Base = (function() {
  class Character104Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character104Base.characterId = 104;

  // キャラ名
  Character104Base.characterName = "高槻やよい";

  // 最初からいるか
  Character104Base.defaultJoin = false;

  // 画像のリスト
  Character104Base.images = [];

  // 基本攻撃タイプ
  Character104Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character104Base.attackBase = 13;

  // 成長率：HP
  Character104Base.hpBase = 17;

  // 成長率：物理防御
  Character104Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character104Base.mDefBase = 1.5;

  // 基本移動力
  Character104Base.moveBase = 4;

  // 基本射程
  Character104Base.rangeBase = 1;

  // 基本命中率
  Character104Base.hitRateBase = 95;

  // 基本回避率
  Character104Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character104Base.itemMax = 10;

  // コスト
  Character104Base.costBase = 1.5;

  // 必要経験値
  Character104Base.expRate = 2.2;

  // 死んだ時の台詞
  Character104Base.textDeath = "高槻やよい";

  Character104Base.abilityName = "なし";

  Character104Base.abilityDesc = "なし";

  return Character104Base;

}).call(this);

Character105Base = (function() {
  class Character105Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character105Base.characterId = 105;

  // キャラ名
  Character105Base.characterName = "高橋礼子";

  // 最初からいるか
  Character105Base.defaultJoin = false;

  // 画像のリスト
  Character105Base.images = [];

  // 基本攻撃タイプ
  Character105Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character105Base.attackBase = 13;

  // 成長率：HP
  Character105Base.hpBase = 17;

  // 成長率：物理防御
  Character105Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character105Base.mDefBase = 1.5;

  // 基本移動力
  Character105Base.moveBase = 4;

  // 基本射程
  Character105Base.rangeBase = 1;

  // 基本命中率
  Character105Base.hitRateBase = 95;

  // 基本回避率
  Character105Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character105Base.itemMax = 10;

  // コスト
  Character105Base.costBase = 1.5;

  // 必要経験値
  Character105Base.expRate = 2.2;

  // 死んだ時の台詞
  Character105Base.textDeath = "高橋礼子";

  Character105Base.abilityName = "なし";

  Character105Base.abilityDesc = "なし";

  return Character105Base;

}).call(this);

Character106Base = (function() {
  class Character106Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character106Base.characterId = 106;

  // キャラ名
  Character106Base.characterName = "鷹富士茄子";

  // 最初からいるか
  Character106Base.defaultJoin = false;

  // 画像のリスト
  Character106Base.images = [];

  // 基本攻撃タイプ
  Character106Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character106Base.attackBase = 10;

  // 成長率：HP
  Character106Base.hpBase = 15;

  // 成長率：物理防御
  Character106Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character106Base.mDefBase = 1.7;

  // 基本移動力
  Character106Base.moveBase = 3;

  // 基本射程
  Character106Base.rangeBase = 1;

  // 基本命中率
  Character106Base.hitRateBase = 88;

  // 基本回避率
  Character106Base.dodgeRateBase = 15;

  // アイテム装備可能数
  Character106Base.itemMax = 12;

  // コスト
  Character106Base.costBase = 1.5;

  // 必要経験値
  Character106Base.expRate = 2.2;

  // 死んだ時の台詞
  Character106Base.textDeath = "鷹富士茄子";

  Character106Base.abilityName = "幸運";

  Character106Base.abilityDesc = "攻撃したプレゼントのランクが1上がる";

  return Character106Base;

}).call(this);

Character107Base = (function() {
  class Character107Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character107Base.characterId = 107;

  // キャラ名
  Character107Base.characterName = "高峯のあ";

  // 最初からいるか
  Character107Base.defaultJoin = false;

  // 画像のリスト
  Character107Base.images = [];

  // 基本攻撃タイプ
  Character107Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character107Base.attackBase = 13;

  // 成長率：HP
  Character107Base.hpBase = 17;

  // 成長率：物理防御
  Character107Base.pDefBase = 1.7;

  // 成長率：魔法防御
  Character107Base.mDefBase = 2;

  // 基本移動力
  Character107Base.moveBase = 4;

  // 基本射程
  Character107Base.rangeBase = 1;

  // 基本命中率
  Character107Base.hitRateBase = 96;

  // 基本回避率
  Character107Base.dodgeRateBase = 4;

  // アイテム装備可能数
  Character107Base.itemMax = 10;

  // コスト
  Character107Base.costBase = 1.5;

  // 必要経験値
  Character107Base.expRate = 2.2;

  // 死んだ時の台詞
  Character107Base.textDeath = "高峯のあ";

  Character107Base.abilityName = "なし";

  Character107Base.abilityDesc = "なし";

  return Character107Base;

}).call(this);

Character108Base = (function() {
  class Character108Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character108Base.characterId = 108;

  // キャラ名
  Character108Base.characterName = "高森藍子";

  // 最初からいるか
  Character108Base.defaultJoin = false;

  // 画像のリスト
  Character108Base.images = [];

  // 基本攻撃タイプ
  Character108Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character108Base.attackBase = 10;

  // 成長率：HP
  Character108Base.hpBase = 18;

  // 成長率：物理防御
  Character108Base.pDefBase = 1.7;

  // 成長率：魔法防御
  Character108Base.mDefBase = 1.7;

  // 基本移動力
  Character108Base.moveBase = 3;

  // 基本射程
  Character108Base.rangeBase = 2;

  // 基本命中率
  Character108Base.hitRateBase = 95;

  // 基本回避率
  Character108Base.dodgeRateBase = 1;

  // アイテム装備可能数
  Character108Base.itemMax = 10;

  // コスト
  Character108Base.costBase = 1.5;

  // 必要経験値
  Character108Base.expRate = 2.2;

  // 死んだ時の台詞
  Character108Base.textDeath = "高森藍子";

  Character108Base.abilityName = "ゆるふわ時間";

  Character108Base.abilityDesc = "攻撃した相手を行動終了にすることがある";

  return Character108Base;

}).call(this);

Character109Base = (function() {
  class Character109Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character109Base.characterId = 109;

  // キャラ名
  Character109Base.characterName = "多田李衣菜";

  // 最初からいるか
  Character109Base.defaultJoin = false;

  // 画像のリスト
  Character109Base.images = [];

  // 基本攻撃タイプ
  Character109Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character109Base.attackBase = 13;

  // 成長率：HP
  Character109Base.hpBase = 17;

  // 成長率：物理防御
  Character109Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character109Base.mDefBase = 1.5;

  // 基本移動力
  Character109Base.moveBase = 4;

  // 基本射程
  Character109Base.rangeBase = 1;

  // 基本命中率
  Character109Base.hitRateBase = 95;

  // 基本回避率
  Character109Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character109Base.itemMax = 10;

  // コスト
  Character109Base.costBase = 1.5;

  // 必要経験値
  Character109Base.expRate = 2.2;

  // 死んだ時の台詞
  Character109Base.textDeath = "多田李衣菜";

  Character109Base.abilityName = "なし";

  Character109Base.abilityDesc = "なし";

  return Character109Base;

}).call(this);

Character110Base = (function() {
  class Character110Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character110Base.characterId = 110;

  // キャラ名
  Character110Base.characterName = "橘ありす";

  // 最初からいるか
  Character110Base.defaultJoin = false;

  // 画像のリスト
  Character110Base.images = [];

  // 基本攻撃タイプ
  Character110Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character110Base.attackBase = 13;

  // 成長率：HP
  Character110Base.hpBase = 13;

  // 成長率：物理防御
  Character110Base.pDefBase = 1.4;

  // 成長率：魔法防御
  Character110Base.mDefBase = 1.5;

  // 基本移動力
  Character110Base.moveBase = 3;

  // 基本射程
  Character110Base.rangeBase = 2;

  // 基本命中率
  Character110Base.hitRateBase = 94;

  // 基本回避率
  Character110Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character110Base.itemMax = 10;

  // コスト
  Character110Base.costBase = 1.5;

  // 必要経験値
  Character110Base.expRate = 2.2;

  // 死んだ時の台詞
  Character110Base.textDeath = "橘ありす";

  Character110Base.abilityName = "なし";

  Character110Base.abilityDesc = "なし";

  return Character110Base;

}).call(this);

Character111Base = (function() {
  class Character111Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character111Base.characterId = 111;

  // キャラ名
  Character111Base.characterName = "月宮雅";

  // 最初からいるか
  Character111Base.defaultJoin = false;

  // 画像のリスト
  Character111Base.images = [];

  // 基本攻撃タイプ
  Character111Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character111Base.attackBase = 13;

  // 成長率：HP
  Character111Base.hpBase = 17;

  // 成長率：物理防御
  Character111Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character111Base.mDefBase = 1.5;

  // 基本移動力
  Character111Base.moveBase = 4;

  // 基本射程
  Character111Base.rangeBase = 1;

  // 基本命中率
  Character111Base.hitRateBase = 95;

  // 基本回避率
  Character111Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character111Base.itemMax = 10;

  // コスト
  Character111Base.costBase = 1.5;

  // 必要経験値
  Character111Base.expRate = 2.2;

  // 死んだ時の台詞
  Character111Base.textDeath = "月宮雅";

  Character111Base.abilityName = "なし";

  Character111Base.abilityDesc = "なし";

  return Character111Base;

}).call(this);

Character112Base = (function() {
  class Character112Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character112Base.characterId = 112;

  // キャラ名
  Character112Base.characterName = "土屋亜子";

  // 最初からいるか
  Character112Base.defaultJoin = false;

  // 画像のリスト
  Character112Base.images = [];

  // 基本攻撃タイプ
  Character112Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character112Base.attackBase = 13;

  // 成長率：HP
  Character112Base.hpBase = 17;

  // 成長率：物理防御
  Character112Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character112Base.mDefBase = 1.5;

  // 基本移動力
  Character112Base.moveBase = 4;

  // 基本射程
  Character112Base.rangeBase = 1;

  // 基本命中率
  Character112Base.hitRateBase = 95;

  // 基本回避率
  Character112Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character112Base.itemMax = 10;

  // コスト
  Character112Base.costBase = 1.5;

  // 必要経験値
  Character112Base.expRate = 2.2;

  // 死んだ時の台詞
  Character112Base.textDeath = "土屋亜子";

  Character112Base.abilityName = "なし";

  Character112Base.abilityDesc = "なし";

  return Character112Base;

}).call(this);

Character113Base = (function() {
  class Character113Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character113Base.characterId = 113;

  // キャラ名
  Character113Base.characterName = "東郷あい";

  // 最初からいるか
  Character113Base.defaultJoin = false;

  // 画像のリスト
  Character113Base.images = [];

  // 基本攻撃タイプ
  Character113Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character113Base.attackBase = 13;

  // 成長率：HP
  Character113Base.hpBase = 17;

  // 成長率：物理防御
  Character113Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character113Base.mDefBase = 1.5;

  // 基本移動力
  Character113Base.moveBase = 4;

  // 基本射程
  Character113Base.rangeBase = 1;

  // 基本命中率
  Character113Base.hitRateBase = 95;

  // 基本回避率
  Character113Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character113Base.itemMax = 10;

  // コスト
  Character113Base.costBase = 1.5;

  // 必要経験値
  Character113Base.expRate = 2.2;

  // 死んだ時の台詞
  Character113Base.textDeath = "東郷あい";

  Character113Base.abilityName = "なし";

  Character113Base.abilityDesc = "なし";

  return Character113Base;

}).call(this);

Character114Base = (function() {
  class Character114Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character114Base.characterId = 114;

  // キャラ名
  Character114Base.characterName = "道明寺歌鈴";

  // 最初からいるか
  Character114Base.defaultJoin = false;

  // 画像のリスト
  Character114Base.images = [];

  // 基本攻撃タイプ
  Character114Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character114Base.attackBase = 13;

  // 成長率：HP
  Character114Base.hpBase = 18;

  // 成長率：物理防御
  Character114Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character114Base.mDefBase = 2;

  // 基本移動力
  Character114Base.moveBase = 6;

  // 基本射程
  Character114Base.rangeBase = 2;

  // 基本命中率
  Character114Base.hitRateBase = 90;

  // 基本回避率
  Character114Base.dodgeRateBase = 1;

  // アイテム装備可能数
  Character114Base.itemMax = 10;

  // コスト
  Character114Base.costBase = 1.5;

  // 必要経験値
  Character114Base.expRate = 2.2;

  // 死んだ時の台詞
  Character114Base.textDeath = "道明寺歌鈴";

  Character114Base.abilityName = "ドジ";

  Character114Base.abilityDesc = "移動後、周囲の味方・敵にダメージを与えることがある";

  return Character114Base;

}).call(this);

Character115Base = (function() {
  class Character115Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character115Base.characterId = 115;

  // キャラ名
  Character115Base.characterName = "十時愛梨";

  // 最初からいるか
  Character115Base.defaultJoin = false;

  // 画像のリスト
  Character115Base.images = [];

  // 基本攻撃タイプ
  Character115Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character115Base.attackBase = 14;

  // 成長率：HP
  Character115Base.hpBase = 22;

  // 成長率：物理防御
  Character115Base.pDefBase = 1.8;

  // 成長率：魔法防御
  Character115Base.mDefBase = 1.8;

  // 基本移動力
  Character115Base.moveBase = 4;

  // 基本射程
  Character115Base.rangeBase = 1;

  // 基本命中率
  Character115Base.hitRateBase = 95;

  // 基本回避率
  Character115Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character115Base.itemMax = 10;

  // コスト
  Character115Base.costBase = 1.5;

  // 必要経験値
  Character115Base.expRate = 2.2;

  // 死んだ時の台詞
  Character115Base.textDeath = "十時愛梨";

  Character115Base.abilityName = "すぐ脱ぐ";

  Character115Base.abilityDesc = "ターン開始時、物防と魔防が10%下がることがある";

  return Character115Base;

}).call(this);

Character116Base = (function() {
  class Character116Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character116Base.characterId = 116;

  // キャラ名
  Character116Base.characterName = "長富蓮実";

  // 最初からいるか
  Character116Base.defaultJoin = false;

  // 画像のリスト
  Character116Base.images = [];

  // 基本攻撃タイプ
  Character116Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character116Base.attackBase = 13;

  // 成長率：HP
  Character116Base.hpBase = 17;

  // 成長率：物理防御
  Character116Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character116Base.mDefBase = 1.5;

  // 基本移動力
  Character116Base.moveBase = 4;

  // 基本射程
  Character116Base.rangeBase = 1;

  // 基本命中率
  Character116Base.hitRateBase = 95;

  // 基本回避率
  Character116Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character116Base.itemMax = 10;

  // コスト
  Character116Base.costBase = 1.5;

  // 必要経験値
  Character116Base.expRate = 2.2;

  // 死んだ時の台詞
  Character116Base.textDeath = "長富蓮実";

  Character116Base.abilityName = "なし";

  Character116Base.abilityDesc = "なし";

  return Character116Base;

}).call(this);

Character117Base = (function() {
  class Character117Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character117Base.characterId = 117;

  // キャラ名
  Character117Base.characterName = "中野有香";

  // 最初からいるか
  Character117Base.defaultJoin = false;

  // 画像のリスト
  Character117Base.images = [];

  // 基本攻撃タイプ
  Character117Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character117Base.attackBase = 18;

  // 成長率：HP
  Character117Base.hpBase = 19;

  // 成長率：物理防御
  Character117Base.pDefBase = 2;

  // 成長率：魔法防御
  Character117Base.mDefBase = 1;

  // 基本移動力
  Character117Base.moveBase = 4;

  // 基本射程
  Character117Base.rangeBase = 1;

  // 基本命中率
  Character117Base.hitRateBase = 98;

  // 基本回避率
  Character117Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character117Base.itemMax = 8;

  // コスト
  Character117Base.costBase = 1.5;

  // 必要経験値
  Character117Base.expRate = 2.2;

  // 死んだ時の台詞
  Character117Base.textDeath = "中野有香";

  Character117Base.abilityName = "会心の一撃";

  Character117Base.abilityDesc = "攻撃時、敵の防御力を無視することがある";

  return Character117Base;

}).call(this);

Character118Base = (function() {
  class Character118Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character118Base.characterId = 118;

  // キャラ名
  Character118Base.characterName = "ナターリア";

  // 最初からいるか
  Character118Base.defaultJoin = false;

  // 画像のリスト
  Character118Base.images = [];

  // 基本攻撃タイプ
  Character118Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character118Base.attackBase = 13;

  // 成長率：HP
  Character118Base.hpBase = 17;

  // 成長率：物理防御
  Character118Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character118Base.mDefBase = 1.5;

  // 基本移動力
  Character118Base.moveBase = 4;

  // 基本射程
  Character118Base.rangeBase = 1;

  // 基本命中率
  Character118Base.hitRateBase = 95;

  // 基本回避率
  Character118Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character118Base.itemMax = 10;

  // コスト
  Character118Base.costBase = 1.5;

  // 必要経験値
  Character118Base.expRate = 2.2;

  // 死んだ時の台詞
  Character118Base.textDeath = "ナターリア";

  Character118Base.abilityName = "なし";

  Character118Base.abilityDesc = "なし";

  return Character118Base;

}).call(this);

Character119Base = (function() {
  class Character119Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character119Base.characterId = 119;

  // キャラ名
  Character119Base.characterName = "並木芽衣子";

  // 最初からいるか
  Character119Base.defaultJoin = false;

  // 画像のリスト
  Character119Base.images = [];

  // 基本攻撃タイプ
  Character119Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character119Base.attackBase = 13;

  // 成長率：HP
  Character119Base.hpBase = 17;

  // 成長率：物理防御
  Character119Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character119Base.mDefBase = 1.5;

  // 基本移動力
  Character119Base.moveBase = 4;

  // 基本射程
  Character119Base.rangeBase = 1;

  // 基本命中率
  Character119Base.hitRateBase = 95;

  // 基本回避率
  Character119Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character119Base.itemMax = 10;

  // コスト
  Character119Base.costBase = 1.5;

  // 必要経験値
  Character119Base.expRate = 2.2;

  // 死んだ時の台詞
  Character119Base.textDeath = "並木芽衣子";

  Character119Base.abilityName = "なし";

  Character119Base.abilityDesc = "なし";

  return Character119Base;

}).call(this);

Character120Base = (function() {
  class Character120Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character120Base.characterId = 120;

  // キャラ名
  Character120Base.characterName = "成宮由愛";

  // 最初からいるか
  Character120Base.defaultJoin = false;

  // 画像のリスト
  Character120Base.images = [];

  // 基本攻撃タイプ
  Character120Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character120Base.attackBase = 13;

  // 成長率：HP
  Character120Base.hpBase = 17;

  // 成長率：物理防御
  Character120Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character120Base.mDefBase = 1.5;

  // 基本移動力
  Character120Base.moveBase = 4;

  // 基本射程
  Character120Base.rangeBase = 1;

  // 基本命中率
  Character120Base.hitRateBase = 95;

  // 基本回避率
  Character120Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character120Base.itemMax = 10;

  // コスト
  Character120Base.costBase = 1.5;

  // 必要経験値
  Character120Base.expRate = 2.2;

  // 死んだ時の台詞
  Character120Base.textDeath = "成宮由愛";

  Character120Base.abilityName = "なし";

  Character120Base.abilityDesc = "なし";

  return Character120Base;

}).call(this);

Character121Base = (function() {
  class Character121Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character121Base.characterId = 121;

  // キャラ名
  Character121Base.characterName = "南条光";

  // 最初からいるか
  Character121Base.defaultJoin = false;

  // 画像のリスト
  Character121Base.images = [];

  // 基本攻撃タイプ
  Character121Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character121Base.attackBase = 13;

  // 成長率：HP
  Character121Base.hpBase = 17;

  // 成長率：物理防御
  Character121Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character121Base.mDefBase = 1.5;

  // 基本移動力
  Character121Base.moveBase = 4;

  // 基本射程
  Character121Base.rangeBase = 1;

  // 基本命中率
  Character121Base.hitRateBase = 95;

  // 基本回避率
  Character121Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character121Base.itemMax = 10;

  // コスト
  Character121Base.costBase = 1.5;

  // 必要経験値
  Character121Base.expRate = 2.2;

  // 死んだ時の台詞
  Character121Base.textDeath = "南条光";

  Character121Base.abilityName = "なし";

  Character121Base.abilityDesc = "なし";

  return Character121Base;

}).call(this);

Character122Base = (function() {
  class Character122Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character122Base.characterId = 122;

  // キャラ名
  Character122Base.characterName = "難波笑美";

  // 最初からいるか
  Character122Base.defaultJoin = false;

  // 画像のリスト
  Character122Base.images = [];

  // 基本攻撃タイプ
  Character122Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character122Base.attackBase = 15;

  // 成長率：HP
  Character122Base.hpBase = 17;

  // 成長率：物理防御
  Character122Base.pDefBase = 1.6;

  // 成長率：魔法防御
  Character122Base.mDefBase = 1.5;

  // 基本移動力
  Character122Base.moveBase = 4;

  // 基本射程
  Character122Base.rangeBase = 1;

  // 基本命中率
  Character122Base.hitRateBase = 95;

  // 基本回避率
  Character122Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character122Base.itemMax = 10;

  // コスト
  Character122Base.costBase = 1.5;

  // 必要経験値
  Character122Base.expRate = 2.2;

  // 死んだ時の台詞
  Character122Base.textDeath = "難波笑美";

  Character122Base.abilityName = "なし";

  Character122Base.abilityDesc = "なし";

  return Character122Base;

}).call(this);

Character123Base = (function() {
  class Character123Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character123Base.characterId = 123;

  // キャラ名
  Character123Base.characterName = "西川保奈美";

  // 最初からいるか
  Character123Base.defaultJoin = false;

  // 画像のリスト
  Character123Base.images = [];

  // 基本攻撃タイプ
  Character123Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character123Base.attackBase = 13;

  // 成長率：HP
  Character123Base.hpBase = 17;

  // 成長率：物理防御
  Character123Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character123Base.mDefBase = 1.5;

  // 基本移動力
  Character123Base.moveBase = 4;

  // 基本射程
  Character123Base.rangeBase = 1;

  // 基本命中率
  Character123Base.hitRateBase = 95;

  // 基本回避率
  Character123Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character123Base.itemMax = 10;

  // コスト
  Character123Base.costBase = 1.5;

  // 必要経験値
  Character123Base.expRate = 2.2;

  // 死んだ時の台詞
  Character123Base.textDeath = "西川保奈美";

  Character123Base.abilityName = "なし";

  Character123Base.abilityDesc = "なし";

  return Character123Base;

}).call(this);

Character124Base = (function() {
  class Character124Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character124Base.characterId = 124;

  // キャラ名
  Character124Base.characterName = "西島櫂";

  // 最初からいるか
  Character124Base.defaultJoin = false;

  // 画像のリスト
  Character124Base.images = [];

  // 基本攻撃タイプ
  Character124Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character124Base.attackBase = 13;

  // 成長率：HP
  Character124Base.hpBase = 17;

  // 成長率：物理防御
  Character124Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character124Base.mDefBase = 1.5;

  // 基本移動力
  Character124Base.moveBase = 4;

  // 基本射程
  Character124Base.rangeBase = 1;

  // 基本命中率
  Character124Base.hitRateBase = 95;

  // 基本回避率
  Character124Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character124Base.itemMax = 10;

  // コスト
  Character124Base.costBase = 1.5;

  // 必要経験値
  Character124Base.expRate = 2.2;

  // 死んだ時の台詞
  Character124Base.textDeath = "西島櫂";

  Character124Base.abilityName = "なし";

  Character124Base.abilityDesc = "なし";

  return Character124Base;

}).call(this);

Character125Base = (function() {
  class Character125Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character125Base.characterId = 125;

  // キャラ名
  Character125Base.characterName = "新田美波";

  // 最初からいるか
  Character125Base.defaultJoin = false;

  // 画像のリスト
  Character125Base.images = [];

  // 基本攻撃タイプ
  Character125Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character125Base.attackBase = 14;

  // 成長率：HP
  Character125Base.hpBase = 18;

  // 成長率：物理防御
  Character125Base.pDefBase = 1.6;

  // 成長率：魔法防御
  Character125Base.mDefBase = 1.6;

  // 基本移動力
  Character125Base.moveBase = 5;

  // 基本射程
  Character125Base.rangeBase = 2;

  // 基本命中率
  Character125Base.hitRateBase = 96;

  // 基本回避率
  Character125Base.dodgeRateBase = 4;

  // アイテム装備可能数
  Character125Base.itemMax = 10;

  // コスト
  Character125Base.costBase = 1.5;

  // 必要経験値
  Character125Base.expRate = 2.2;

  // 死んだ時の台詞
  Character125Base.textDeath = "新田美波";

  Character125Base.abilityName = "万能";

  Character125Base.abilityDesc = "ターン終了時、ランダムなステータスが10%上昇する（フィールドから出ると戻る）";

  return Character125Base;

}).call(this);

Character126Base = (function() {
  class Character126Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character126Base.characterId = 126;

  // キャラ名
  Character126Base.characterName = "二宮飛鳥";

  // 最初からいるか
  Character126Base.defaultJoin = false;

  // 画像のリスト
  Character126Base.images = [];

  // 基本攻撃タイプ
  Character126Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character126Base.attackBase = 15;

  // 成長率：HP
  Character126Base.hpBase = 16;

  // 成長率：物理防御
  Character126Base.pDefBase = 1.4;

  // 成長率：魔法防御
  Character126Base.mDefBase = 1.6;

  // 基本移動力
  Character126Base.moveBase = 4;

  // 基本射程
  Character126Base.rangeBase = 1;

  // 基本命中率
  Character126Base.hitRateBase = 95;

  // 基本回避率
  Character126Base.dodgeRateBase = 4;

  // アイテム装備可能数
  Character126Base.itemMax = 10;

  // コスト
  Character126Base.costBase = 1.5;

  // 必要経験値
  Character126Base.expRate = 2.2;

  // 死んだ時の台詞
  Character126Base.textDeath = "二宮飛鳥";

  Character126Base.abilityName = "孤高";

  Character126Base.abilityDesc = "ターン開始時、周りにユニットがいなければ、そのターン、全ステータスが10%上がる";

  return Character126Base;

}).call(this);

Character127Base = (function() {
  class Character127Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character127Base.characterId = 127;

  // キャラ名
  Character127Base.characterName = "丹羽仁美";

  // 最初からいるか
  Character127Base.defaultJoin = false;

  // 画像のリスト
  Character127Base.images = [];

  // 基本攻撃タイプ
  Character127Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character127Base.attackBase = 13;

  // 成長率：HP
  Character127Base.hpBase = 17;

  // 成長率：物理防御
  Character127Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character127Base.mDefBase = 1.5;

  // 基本移動力
  Character127Base.moveBase = 4;

  // 基本射程
  Character127Base.rangeBase = 1;

  // 基本命中率
  Character127Base.hitRateBase = 95;

  // 基本回避率
  Character127Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character127Base.itemMax = 10;

  // コスト
  Character127Base.costBase = 1.5;

  // 必要経験値
  Character127Base.expRate = 2.2;

  // 死んだ時の台詞
  Character127Base.textDeath = "丹羽仁美";

  Character127Base.abilityName = "なし";

  Character127Base.abilityDesc = "なし";

  return Character127Base;

}).call(this);

Character128Base = (function() {
  class Character128Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character128Base.characterId = 128;

  // キャラ名
  Character128Base.characterName = "野々村そら";

  // 最初からいるか
  Character128Base.defaultJoin = false;

  // 画像のリスト
  Character128Base.images = [];

  // 基本攻撃タイプ
  Character128Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character128Base.attackBase = 13;

  // 成長率：HP
  Character128Base.hpBase = 17;

  // 成長率：物理防御
  Character128Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character128Base.mDefBase = 1.5;

  // 基本移動力
  Character128Base.moveBase = 4;

  // 基本射程
  Character128Base.rangeBase = 1;

  // 基本命中率
  Character128Base.hitRateBase = 95;

  // 基本回避率
  Character128Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character128Base.itemMax = 10;

  // コスト
  Character128Base.costBase = 1.5;

  // 必要経験値
  Character128Base.expRate = 2.2;

  // 死んだ時の台詞
  Character128Base.textDeath = "野々村そら";

  Character128Base.abilityName = "なし";

  Character128Base.abilityDesc = "なし";

  return Character128Base;

}).call(this);

Character129Base = (function() {
  class Character129Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character129Base.characterId = 129;

  // キャラ名
  Character129Base.characterName = "萩原雪歩";

  // 最初からいるか
  Character129Base.defaultJoin = false;

  // 画像のリスト
  Character129Base.images = [];

  // 基本攻撃タイプ
  Character129Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character129Base.attackBase = 13;

  // 成長率：HP
  Character129Base.hpBase = 17;

  // 成長率：物理防御
  Character129Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character129Base.mDefBase = 1.5;

  // 基本移動力
  Character129Base.moveBase = 4;

  // 基本射程
  Character129Base.rangeBase = 1;

  // 基本命中率
  Character129Base.hitRateBase = 95;

  // 基本回避率
  Character129Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character129Base.itemMax = 10;

  // コスト
  Character129Base.costBase = 1.5;

  // 必要経験値
  Character129Base.expRate = 2.2;

  // 死んだ時の台詞
  Character129Base.textDeath = "萩原雪歩";

  Character129Base.abilityName = "なし";

  Character129Base.abilityDesc = "なし";

  return Character129Base;

}).call(this);

Character130Base = (function() {
  class Character130Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character130Base.characterId = 130;

  // キャラ名
  Character130Base.characterName = "服部瞳子";

  // 最初からいるか
  Character130Base.defaultJoin = false;

  // 画像のリスト
  Character130Base.images = [];

  // 基本攻撃タイプ
  Character130Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character130Base.attackBase = 13;

  // 成長率：HP
  Character130Base.hpBase = 17;

  // 成長率：物理防御
  Character130Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character130Base.mDefBase = 1.5;

  // 基本移動力
  Character130Base.moveBase = 4;

  // 基本射程
  Character130Base.rangeBase = 1;

  // 基本命中率
  Character130Base.hitRateBase = 95;

  // 基本回避率
  Character130Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character130Base.itemMax = 10;

  // コスト
  Character130Base.costBase = 1.5;

  // 必要経験値
  Character130Base.expRate = 2.2;

  // 死んだ時の台詞
  Character130Base.textDeath = "服部瞳子";

  Character130Base.abilityName = "なし";

  Character130Base.abilityDesc = "なし";

  return Character130Base;

}).call(this);

Character131Base = (function() {
  class Character131Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character131Base.characterId = 131;

  // キャラ名
  Character131Base.characterName = "浜川愛結奈";

  // 最初からいるか
  Character131Base.defaultJoin = false;

  // 画像のリスト
  Character131Base.images = [];

  // 基本攻撃タイプ
  Character131Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character131Base.attackBase = 13;

  // 成長率：HP
  Character131Base.hpBase = 17;

  // 成長率：物理防御
  Character131Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character131Base.mDefBase = 1.5;

  // 基本移動力
  Character131Base.moveBase = 4;

  // 基本射程
  Character131Base.rangeBase = 1;

  // 基本命中率
  Character131Base.hitRateBase = 95;

  // 基本回避率
  Character131Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character131Base.itemMax = 10;

  // コスト
  Character131Base.costBase = 1.5;

  // 必要経験値
  Character131Base.expRate = 2.2;

  // 死んだ時の台詞
  Character131Base.textDeath = "浜川愛結奈";

  Character131Base.abilityName = "なし";

  Character131Base.abilityDesc = "なし";

  return Character131Base;

}).call(this);

Character132Base = (function() {
  class Character132Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character132Base.characterId = 132;

  // キャラ名
  Character132Base.characterName = "浜口あやめ";

  // 最初からいるか
  Character132Base.defaultJoin = false;

  // 画像のリスト
  Character132Base.images = [];

  // 基本攻撃タイプ
  Character132Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character132Base.attackBase = 15;

  // 成長率：HP
  Character132Base.hpBase = 11;

  // 成長率：物理防御
  Character132Base.pDefBase = 0.8;

  // 成長率：魔法防御
  Character132Base.mDefBase = 0.8;

  // 基本移動力
  Character132Base.moveBase = 6;

  // 基本射程
  Character132Base.rangeBase = 1;

  // 基本命中率
  Character132Base.hitRateBase = 97;

  // 基本回避率
  Character132Base.dodgeRateBase = 35;

  // アイテム装備可能数
  Character132Base.itemMax = 10;

  // コスト
  Character132Base.costBase = 1.5;

  // 必要経験値
  Character132Base.expRate = 2.2;

  // 死んだ時の台詞
  Character132Base.textDeath = "浜口あやめ";

  Character132Base.abilityName = "忍法変わり身の術";

  Character132Base.abilityDesc = "回避時に、味方と入れ替わることがある";

  return Character132Base;

}).call(this);

Character133Base = (function() {
  class Character133Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character133Base.characterId = 133;

  // キャラ名
  Character133Base.characterName = "早坂美玲";

  // 最初からいるか
  Character133Base.defaultJoin = false;

  // 画像のリスト
  Character133Base.images = [];

  // 基本攻撃タイプ
  Character133Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character133Base.attackBase = 13;

  // 成長率：HP
  Character133Base.hpBase = 17;

  // 成長率：物理防御
  Character133Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character133Base.mDefBase = 1.5;

  // 基本移動力
  Character133Base.moveBase = 4;

  // 基本射程
  Character133Base.rangeBase = 1;

  // 基本命中率
  Character133Base.hitRateBase = 95;

  // 基本回避率
  Character133Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character133Base.itemMax = 10;

  // コスト
  Character133Base.costBase = 1.5;

  // 必要経験値
  Character133Base.expRate = 2.2;

  // 死んだ時の台詞
  Character133Base.textDeath = "早坂美玲";

  Character133Base.abilityName = "なし";

  Character133Base.abilityDesc = "なし";

  return Character133Base;

}).call(this);

Character134Base = (function() {
  class Character134Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character134Base.characterId = 134;

  // キャラ名
  Character134Base.characterName = "速水奏";

  // 最初からいるか
  Character134Base.defaultJoin = false;

  // 画像のリスト
  Character134Base.images = [];

  // 基本攻撃タイプ
  Character134Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character134Base.attackBase = 15;

  // 成長率：HP
  Character134Base.hpBase = 17;

  // 成長率：物理防御
  Character134Base.pDefBase = 1.3;

  // 成長率：魔法防御
  Character134Base.mDefBase = 1.4;

  // 基本移動力
  Character134Base.moveBase = 4;

  // 基本射程
  Character134Base.rangeBase = 1;

  // 基本命中率
  Character134Base.hitRateBase = 97;

  // 基本回避率
  Character134Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character134Base.itemMax = 10;

  // コスト
  Character134Base.costBase = 1.5;

  // 必要経験値
  Character134Base.expRate = 2.2;

  // 死んだ時の台詞
  Character134Base.textDeath = "速水奏";

  Character134Base.abilityName = "ムーンサイド";

  Character134Base.abilityDesc = "味方ターン終了時、最大HPとHPの差がHPになることがある";

  return Character134Base;

}).call(this);

Character135Base = (function() {
  class Character135Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character135Base.characterId = 135;

  // キャラ名
  Character135Base.characterName = "原田美世";

  // 最初からいるか
  Character135Base.defaultJoin = false;

  // 画像のリスト
  Character135Base.images = [];

  // 基本攻撃タイプ
  Character135Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character135Base.attackBase = 13;

  // 成長率：HP
  Character135Base.hpBase = 18;

  // 成長率：物理防御
  Character135Base.pDefBase = 1.7;

  // 成長率：魔法防御
  Character135Base.mDefBase = 1.4;

  // 基本移動力
  Character135Base.moveBase = 6;

  // 基本射程
  Character135Base.rangeBase = 1;

  // 基本命中率
  Character135Base.hitRateBase = 95;

  // 基本回避率
  Character135Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character135Base.itemMax = 10;

  // コスト
  Character135Base.costBase = 1.5;

  // 必要経験値
  Character135Base.expRate = 2.8;

  // 死んだ時の台詞
  Character135Base.textDeath = "原田美世";

  Character135Base.abilityName = "なし";

  Character135Base.abilityDesc = "再行動することがある";

  return Character135Base;

}).call(this);

Character136Base = (function() {
  class Character136Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character136Base.characterId = 136;

  // キャラ名
  Character136Base.characterName = "柊志乃";

  // 最初からいるか
  Character136Base.defaultJoin = false;

  // 画像のリスト
  Character136Base.images = [];

  // 基本攻撃タイプ
  Character136Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character136Base.attackBase = 13;

  // 成長率：HP
  Character136Base.hpBase = 17;

  // 成長率：物理防御
  Character136Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character136Base.mDefBase = 1.5;

  // 基本移動力
  Character136Base.moveBase = 4;

  // 基本射程
  Character136Base.rangeBase = 1;

  // 基本命中率
  Character136Base.hitRateBase = 95;

  // 基本回避率
  Character136Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character136Base.itemMax = 10;

  // コスト
  Character136Base.costBase = 1.5;

  // 必要経験値
  Character136Base.expRate = 2.2;

  // 死んだ時の台詞
  Character136Base.textDeath = "柊志乃";

  Character136Base.abilityName = "なし";

  Character136Base.abilityDesc = "なし";

  return Character136Base;

}).call(this);

Character137Base = (function() {
  class Character137Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character137Base.characterId = 137;

  // キャラ名
  Character137Base.characterName = "日高愛";

  // 最初からいるか
  Character137Base.defaultJoin = false;

  // 画像のリスト
  Character137Base.images = [];

  // 基本攻撃タイプ
  Character137Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character137Base.attackBase = 13;

  // 成長率：HP
  Character137Base.hpBase = 17;

  // 成長率：物理防御
  Character137Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character137Base.mDefBase = 1.5;

  // 基本移動力
  Character137Base.moveBase = 4;

  // 基本射程
  Character137Base.rangeBase = 1;

  // 基本命中率
  Character137Base.hitRateBase = 95;

  // 基本回避率
  Character137Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character137Base.itemMax = 10;

  // コスト
  Character137Base.costBase = 1.5;

  // 必要経験値
  Character137Base.expRate = 2.2;

  // 死んだ時の台詞
  Character137Base.textDeath = "日高愛";

  Character137Base.abilityName = "なし";

  Character137Base.abilityDesc = "なし";

  return Character137Base;

}).call(this);

Character138Base = (function() {
  class Character138Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character138Base.characterId = 138;

  // キャラ名
  Character138Base.characterName = "日野茜";

  // 最初からいるか
  Character138Base.defaultJoin = false;

  // 画像のリスト
  Character138Base.images = [];

  // 基本攻撃タイプ
  Character138Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character138Base.attackBase = 15;

  // 成長率：HP
  Character138Base.hpBase = 18;

  // 成長率：物理防御
  Character138Base.pDefBase = 2.5;

  // 成長率：魔法防御
  Character138Base.mDefBase = 1;

  // 基本移動力
  Character138Base.moveBase = 5;

  // 基本射程
  Character138Base.rangeBase = 1;

  // 基本命中率
  Character138Base.hitRateBase = 95;

  // 基本回避率
  Character138Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character138Base.itemMax = 10;

  // コスト
  Character138Base.costBase = 1.5;

  // 必要経験値
  Character138Base.expRate = 2.2;

  // 死んだ時の台詞
  Character138Base.textDeath = "日野茜";

  Character138Base.abilityName = "全力疾走";

  Character138Base.abilityDesc = "移動後に攻撃をせずに行動終了した時、20%の確率でもう一度行動できる";

  return Character138Base;

}).call(this);

Character139Base = (function() {
  class Character139Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character139Base.characterId = 139;

  // キャラ名
  Character139Base.characterName = "姫川友紀";

  // 最初からいるか
  Character139Base.defaultJoin = false;

  // 画像のリスト
  Character139Base.images = [];

  // 基本攻撃タイプ
  Character139Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character139Base.attackBase = 15;

  // 成長率：HP
  Character139Base.hpBase = 16;

  // 成長率：物理防御
  Character139Base.pDefBase = 1.6;

  // 成長率：魔法防御
  Character139Base.mDefBase = 1.4;

  // 基本移動力
  Character139Base.moveBase = 4;

  // 基本射程
  Character139Base.rangeBase = 3;

  // 基本命中率
  Character139Base.hitRateBase = 96;

  // 基本回避率
  Character139Base.dodgeRateBase = 2;

  // アイテム装備可能数
  Character139Base.itemMax = 8;

  // コスト
  Character139Base.costBase = 1.5;

  // 必要経験値
  Character139Base.expRate = 2.2;

  // 死んだ時の台詞
  Character139Base.textDeath = "姫川友紀";

  Character139Base.abilityName = "かっとばせー";

  Character139Base.abilityDesc = "ターン開始時、隣接している味方をランダムなマスに飛ばすことがある";

  return Character139Base;

}).call(this);

Character140Base = (function() {
  class Character140Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character140Base.characterId = 140;

  // キャラ名
  Character140Base.characterName = "兵藤レナ";

  // 最初からいるか
  Character140Base.defaultJoin = false;

  // 画像のリスト
  Character140Base.images = [];

  // 基本攻撃タイプ
  Character140Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character140Base.attackBase = 13;

  // 成長率：HP
  Character140Base.hpBase = 17;

  // 成長率：物理防御
  Character140Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character140Base.mDefBase = 1.5;

  // 基本移動力
  Character140Base.moveBase = 4;

  // 基本射程
  Character140Base.rangeBase = 1;

  // 基本命中率
  Character140Base.hitRateBase = 95;

  // 基本回避率
  Character140Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character140Base.itemMax = 10;

  // コスト
  Character140Base.costBase = 1.5;

  // 必要経験値
  Character140Base.expRate = 2.2;

  // 死んだ時の台詞
  Character140Base.textDeath = "兵藤レナ";

  Character140Base.abilityName = "なし";

  Character140Base.abilityDesc = "なし";

  return Character140Base;

}).call(this);

Character141Base = (function() {
  class Character141Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character141Base.characterId = 141;

  // キャラ名
  Character141Base.characterName = "福山舞";

  // 最初からいるか
  Character141Base.defaultJoin = false;

  // 画像のリスト
  Character141Base.images = [];

  // 基本攻撃タイプ
  Character141Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character141Base.attackBase = 13;

  // 成長率：HP
  Character141Base.hpBase = 17;

  // 成長率：物理防御
  Character141Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character141Base.mDefBase = 1.5;

  // 基本移動力
  Character141Base.moveBase = 4;

  // 基本射程
  Character141Base.rangeBase = 1;

  // 基本命中率
  Character141Base.hitRateBase = 95;

  // 基本回避率
  Character141Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character141Base.itemMax = 10;

  // コスト
  Character141Base.costBase = 1.5;

  // 必要経験値
  Character141Base.expRate = 2.2;

  // 死んだ時の台詞
  Character141Base.textDeath = "福山舞";

  Character141Base.abilityName = "なし";

  Character141Base.abilityDesc = "なし";

  return Character141Base;

}).call(this);

Character142Base = (function() {
  class Character142Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character142Base.characterId = 142;

  // キャラ名
  Character142Base.characterName = "藤居朋";

  // 最初からいるか
  Character142Base.defaultJoin = false;

  // 画像のリスト
  Character142Base.images = [];

  // 基本攻撃タイプ
  Character142Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character142Base.attackBase = 13;

  // 成長率：HP
  Character142Base.hpBase = 17;

  // 成長率：物理防御
  Character142Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character142Base.mDefBase = 1.5;

  // 基本移動力
  Character142Base.moveBase = 4;

  // 基本射程
  Character142Base.rangeBase = 1;

  // 基本命中率
  Character142Base.hitRateBase = 95;

  // 基本回避率
  Character142Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character142Base.itemMax = 10;

  // コスト
  Character142Base.costBase = 1.5;

  // 必要経験値
  Character142Base.expRate = 2.2;

  // 死んだ時の台詞
  Character142Base.textDeath = "藤居朋";

  Character142Base.abilityName = "なし";

  Character142Base.abilityDesc = "なし";

  return Character142Base;

}).call(this);

Character143Base = (function() {
  class Character143Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character143Base.characterId = 143;

  // キャラ名
  Character143Base.characterName = "藤本里奈";

  // 最初からいるか
  Character143Base.defaultJoin = false;

  // 画像のリスト
  Character143Base.images = [];

  // 基本攻撃タイプ
  Character143Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character143Base.attackBase = 14;

  // 成長率：HP
  Character143Base.hpBase = 19;

  // 成長率：物理防御
  Character143Base.pDefBase = 3;

  // 成長率：魔法防御
  Character143Base.mDefBase = 1.2;

  // 基本移動力
  Character143Base.moveBase = 5;

  // 基本射程
  Character143Base.rangeBase = 1;

  // 基本命中率
  Character143Base.hitRateBase = 95;

  // 基本回避率
  Character143Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character143Base.itemMax = 12;

  // コスト
  Character143Base.costBase = 1.5;

  // 必要経験値
  Character143Base.expRate = 2.4;

  // 死んだ時の台詞
  Character143Base.textDeath = "藤本里奈";

  Character143Base.abilityName = "なし";

  Character143Base.abilityDesc = "なし";

  return Character143Base;

}).call(this);

Character144Base = (function() {
  class Character144Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character144Base.characterId = 144;

  // キャラ名
  Character144Base.characterName = "藤原肇";

  // 最初からいるか
  Character144Base.defaultJoin = false;

  // 画像のリスト
  Character144Base.images = [];

  // 基本攻撃タイプ
  Character144Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character144Base.attackBase = 13;

  // 成長率：HP
  Character144Base.hpBase = 17;

  // 成長率：物理防御
  Character144Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character144Base.mDefBase = 1.5;

  // 基本移動力
  Character144Base.moveBase = 4;

  // 基本射程
  Character144Base.rangeBase = 1;

  // 基本命中率
  Character144Base.hitRateBase = 95;

  // 基本回避率
  Character144Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character144Base.itemMax = 10;

  // コスト
  Character144Base.costBase = 1.5;

  // 必要経験値
  Character144Base.expRate = 2.2;

  // 死んだ時の台詞
  Character144Base.textDeath = "藤原肇";

  Character144Base.abilityName = "なし";

  Character144Base.abilityDesc = "なし";

  return Character144Base;

}).call(this);

Character145Base = (function() {
  class Character145Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character145Base.characterId = 145;

  // キャラ名
  Character145Base.characterName = "双葉杏";

  // 最初からいるか
  Character145Base.defaultJoin = false;

  // 画像のリスト
  Character145Base.images = [];

  // 基本攻撃タイプ
  Character145Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character145Base.attackBase = 8;

  // 成長率：HP
  Character145Base.hpBase = 18;

  // 成長率：物理防御
  Character145Base.pDefBase = 2.5;

  // 成長率：魔法防御
  Character145Base.mDefBase = 2.5;

  // 基本移動力
  Character145Base.moveBase = 0;

  // 基本射程
  Character145Base.rangeBase = 20;

  // 基本命中率
  Character145Base.hitRateBase = 95;

  // 基本回避率
  Character145Base.dodgeRateBase = 0;

  // アイテム装備可能数
  Character145Base.itemMax = 10;

  // コスト
  Character145Base.costBase = 1.5;

  // 必要経験値
  Character145Base.expRate = 2.2;

  // 死んだ時の台詞
  Character145Base.textDeath = "双葉杏";

  Character145Base.abilityName = "印税";

  Character145Base.abilityDesc = "ターン終了時に出撃していると、階層✕3の経験値を得る";

  return Character145Base;

}).call(this);

Character146Base = (function() {
  class Character146Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character146Base.characterId = 146;

  // キャラ名
  Character146Base.characterName = "双海亜美";

  // 最初からいるか
  Character146Base.defaultJoin = false;

  // 画像のリスト
  Character146Base.images = [];

  // 基本攻撃タイプ
  Character146Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character146Base.attackBase = 12;

  // 成長率：HP
  Character146Base.hpBase = 16;

  // 成長率：物理防御
  Character146Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character146Base.mDefBase = 1.5;

  // 基本移動力
  Character146Base.moveBase = 5;

  // 基本射程
  Character146Base.rangeBase = 1;

  // 基本命中率
  Character146Base.hitRateBase = 95;

  // 基本回避率
  Character146Base.dodgeRateBase = 7;

  // アイテム装備可能数
  Character146Base.itemMax = 8;

  // コスト
  Character146Base.costBase = 1.5;

  // 必要経験値
  Character146Base.expRate = 2.0;

  // 死んだ時の台詞
  Character146Base.textDeath = "双海亜美";

  Character146Base.abilityName = "双子";

  Character146Base.abilityDesc = "双海真美が出撃している場合、味方ターン開始時に、HPが二人のうちどちらか高い方になる";

  return Character146Base;

}).call(this);

Character147Base = (function() {
  class Character147Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character147Base.characterId = 147;

  // キャラ名
  Character147Base.characterName = "双海真美";

  // 最初からいるか
  Character147Base.defaultJoin = false;

  // 画像のリスト
  Character147Base.images = [];

  // 基本攻撃タイプ
  Character147Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character147Base.attackBase = 12;

  // 成長率：HP
  Character147Base.hpBase = 16;

  // 成長率：物理防御
  Character147Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character147Base.mDefBase = 1.5;

  // 基本移動力
  Character147Base.moveBase = 5;

  // 基本射程
  Character147Base.rangeBase = 1;

  // 基本命中率
  Character147Base.hitRateBase = 96;

  // 基本回避率
  Character147Base.dodgeRateBase = 6;

  // アイテム装備可能数
  Character147Base.itemMax = 8;

  // コスト
  Character147Base.costBase = 1.5;

  // 必要経験値
  Character147Base.expRate = 2.0;

  // 死んだ時の台詞
  Character147Base.textDeath = "双海真美";

  Character147Base.abilityName = "双子";

  Character147Base.abilityDesc = "双海亜美が出撃している場合、味方ターン開始時に、HPが二人のうちどちらか高い方になる";

  return Character147Base;

}).call(this);

Character148Base = (function() {
  class Character148Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character148Base.characterId = 148;

  // キャラ名
  Character148Base.characterName = "古澤頼子";

  // 最初からいるか
  Character148Base.defaultJoin = false;

  // 画像のリスト
  Character148Base.images = [];

  // 基本攻撃タイプ
  Character148Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character148Base.attackBase = 13;

  // 成長率：HP
  Character148Base.hpBase = 17;

  // 成長率：物理防御
  Character148Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character148Base.mDefBase = 1.5;

  // 基本移動力
  Character148Base.moveBase = 4;

  // 基本射程
  Character148Base.rangeBase = 1;

  // 基本命中率
  Character148Base.hitRateBase = 95;

  // 基本回避率
  Character148Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character148Base.itemMax = 10;

  // コスト
  Character148Base.costBase = 1.5;

  // 必要経験値
  Character148Base.expRate = 2.2;

  // 死んだ時の台詞
  Character148Base.textDeath = "古澤頼子";

  Character148Base.abilityName = "なし";

  Character148Base.abilityDesc = "なし";

  return Character148Base;

}).call(this);

Character149Base = (function() {
  class Character149Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character149Base.characterId = 149;

  // キャラ名
  Character149Base.characterName = "ヘレン";

  // 最初からいるか
  Character149Base.defaultJoin = false;

  // 画像のリスト
  Character149Base.images = [];

  // 基本攻撃タイプ
  Character149Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character149Base.attackBase = 0;

  // 成長率：HP
  Character149Base.hpBase = 30;

  // 成長率：物理防御
  Character149Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character149Base.mDefBase = 1.5;

  // 基本移動力
  Character149Base.moveBase = 4;

  // 基本射程
  Character149Base.rangeBase = 0;

  // 基本命中率
  Character149Base.hitRateBase = 0;

  // 基本回避率
  Character149Base.dodgeRateBase = 0;

  // アイテム装備可能数
  Character149Base.itemMax = 20;

  // コスト
  Character149Base.costBase = 1.5;

  // 必要経験値
  Character149Base.expRate = 2.2;

  // 死んだ時の台詞
  Character149Base.textDeath = "ヘレン";

  Character149Base.abilityName = "世界のヘレン";

  Character149Base.abilityDesc = "ターン開始時、HPが全回復することがある";

  return Character149Base;

}).call(this);

Character150Base = (function() {
  class Character150Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character150Base.characterId = 150;

  // キャラ名
  Character150Base.characterName = "北条加蓮";

  // 最初からいるか
  Character150Base.defaultJoin = false;

  // 画像のリスト
  Character150Base.images = [];

  // 基本攻撃タイプ
  Character150Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character150Base.attackBase = 15;

  // 成長率：HP
  Character150Base.hpBase = 11;

  // 成長率：物理防御
  Character150Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character150Base.mDefBase = 2.3;

  // 基本移動力
  Character150Base.moveBase = 3;

  // 基本射程
  Character150Base.rangeBase = 2;

  // 基本命中率
  Character150Base.hitRateBase = 95;

  // 基本回避率
  Character150Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character150Base.itemMax = 10;

  // コスト
  Character150Base.costBase = 1.5;

  // 必要経験値
  Character150Base.expRate = 1.8;

  // 死んだ時の台詞
  Character150Base.textDeath = "北条加蓮";

  Character150Base.abilityName = "なし";

  Character150Base.abilityDesc = "なし";

  return Character150Base;

}).call(this);

Character151Base = (function() {
  class Character151Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character151Base.characterId = 151;

  // キャラ名
  Character151Base.characterName = "星井美希";

  // 最初からいるか
  Character151Base.defaultJoin = false;

  // 画像のリスト
  Character151Base.images = [];

  // 基本攻撃タイプ
  Character151Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character151Base.attackBase = 13;

  // 成長率：HP
  Character151Base.hpBase = 17;

  // 成長率：物理防御
  Character151Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character151Base.mDefBase = 1.5;

  // 基本移動力
  Character151Base.moveBase = 4;

  // 基本射程
  Character151Base.rangeBase = 1;

  // 基本命中率
  Character151Base.hitRateBase = 95;

  // 基本回避率
  Character151Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character151Base.itemMax = 10;

  // コスト
  Character151Base.costBase = 1.5;

  // 必要経験値
  Character151Base.expRate = 2.2;

  // 死んだ時の台詞
  Character151Base.textDeath = "星井美希";

  Character151Base.abilityName = "なし";

  Character151Base.abilityDesc = "なし";

  return Character151Base;

}).call(this);

Character152Base = (function() {
  class Character152Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character152Base.characterId = 152;

  // キャラ名
  Character152Base.characterName = "星輝子";

  // 最初からいるか
  Character152Base.defaultJoin = false;

  // 画像のリスト
  Character152Base.images = [];

  // 基本攻撃タイプ
  Character152Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character152Base.attackBase = 13;

  // 成長率：HP
  Character152Base.hpBase = 17;

  // 成長率：物理防御
  Character152Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character152Base.mDefBase = 1.5;

  // 基本移動力
  Character152Base.moveBase = 4;

  // 基本射程
  Character152Base.rangeBase = 1;

  // 基本命中率
  Character152Base.hitRateBase = 95;

  // 基本回避率
  Character152Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character152Base.itemMax = 10;

  // コスト
  Character152Base.costBase = 1.5;

  // 必要経験値
  Character152Base.expRate = 2.2;

  // 死んだ時の台詞
  Character152Base.textDeath = "星輝子";

  Character152Base.abilityName = "インキャ";

  Character152Base.abilityDesc = "上か下の壁際で行動終了した時、再行動することがある";

  return Character152Base;

}).call(this);

Character153Base = (function() {
  class Character153Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character153Base.characterId = 153;

  // キャラ名
  Character153Base.characterName = "堀裕子";

  // 最初からいるか
  Character153Base.defaultJoin = false;

  // 画像のリスト
  Character153Base.images = [];

  // 基本攻撃タイプ
  Character153Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character153Base.attackBase = 12;

  // 成長率：HP
  Character153Base.hpBase = 15;

  // 成長率：物理防御
  Character153Base.pDefBase = 1;

  // 成長率：魔法防御
  Character153Base.mDefBase = 2;

  // 基本移動力
  Character153Base.moveBase = 2;

  // 基本射程
  Character153Base.rangeBase = 3;

  // 基本命中率
  Character153Base.hitRateBase = 70;

  // 基本回避率
  Character153Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character153Base.itemMax = 10;

  // コスト
  Character153Base.costBase = 1.5;

  // 必要経験値
  Character153Base.expRate = 2.2;

  // 死んだ時の台詞
  Character153Base.textDeath = "堀裕子";

  Character153Base.abilityName = "サイキック";

  Character153Base.abilityDesc = "攻撃が命中した敵を好きな場所に移動することができる";

  return Character153Base;

}).call(this);

Character154Base = (function() {
  class Character154Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character154Base.characterId = 154;

  // キャラ名
  Character154Base.characterName = "前川みく";

  // 最初からいるか
  Character154Base.defaultJoin = false;

  // 画像のリスト
  Character154Base.images = [];

  // 基本攻撃タイプ
  Character154Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character154Base.attackBase = 13;

  // 成長率：HP
  Character154Base.hpBase = 16;

  // 成長率：物理防御
  Character154Base.pDefBase = 1.3;

  // 成長率：魔法防御
  Character154Base.mDefBase = 1.3;

  // 基本移動力
  Character154Base.moveBase = 5;

  // 基本射程
  Character154Base.rangeBase = 1;

  // 基本命中率
  Character154Base.hitRateBase = 95;

  // 基本回避率
  Character154Base.dodgeRateBase = 8;

  // アイテム装備可能数
  Character154Base.itemMax = 10;

  // コスト
  Character154Base.costBase = 1.5;

  // 必要経験値
  Character154Base.expRate = 2.0;

  // 死んだ時の台詞
  Character154Base.textDeath = "前川みく";

  Character154Base.abilityName = "なし";

  Character154Base.abilityDesc = "味方が敵からの攻撃を回避した時に、その敵に反撃する";

  return Character154Base;

}).call(this);

Character155Base = (function() {
  class Character155Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character155Base.characterId = 155;

  // キャラ名
  Character155Base.characterName = "槙原志保";

  // 最初からいるか
  Character155Base.defaultJoin = false;

  // 画像のリスト
  Character155Base.images = [];

  // 基本攻撃タイプ
  Character155Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character155Base.attackBase = 13;

  // 成長率：HP
  Character155Base.hpBase = 17;

  // 成長率：物理防御
  Character155Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character155Base.mDefBase = 1.5;

  // 基本移動力
  Character155Base.moveBase = 4;

  // 基本射程
  Character155Base.rangeBase = 1;

  // 基本命中率
  Character155Base.hitRateBase = 95;

  // 基本回避率
  Character155Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character155Base.itemMax = 10;

  // コスト
  Character155Base.costBase = 1.5;

  // 必要経験値
  Character155Base.expRate = 2.2;

  // 死んだ時の台詞
  Character155Base.textDeath = "槙原志保";

  Character155Base.abilityName = "なし";

  Character155Base.abilityDesc = "なし";

  return Character155Base;

}).call(this);

Character156Base = (function() {
  class Character156Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character156Base.characterId = 156;

  // キャラ名
  Character156Base.characterName = "松尾千鶴";

  // 最初からいるか
  Character156Base.defaultJoin = false;

  // 画像のリスト
  Character156Base.images = [];

  // 基本攻撃タイプ
  Character156Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character156Base.attackBase = 13;

  // 成長率：HP
  Character156Base.hpBase = 17;

  // 成長率：物理防御
  Character156Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character156Base.mDefBase = 1.5;

  // 基本移動力
  Character156Base.moveBase = 4;

  // 基本射程
  Character156Base.rangeBase = 1;

  // 基本命中率
  Character156Base.hitRateBase = 95;

  // 基本回避率
  Character156Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character156Base.itemMax = 10;

  // コスト
  Character156Base.costBase = 1.5;

  // 必要経験値
  Character156Base.expRate = 2.2;

  // 死んだ時の台詞
  Character156Base.textDeath = "松尾千鶴";

  Character156Base.abilityName = "なし";

  Character156Base.abilityDesc = "なし";

  return Character156Base;

}).call(this);

Character157Base = (function() {
  class Character157Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character157Base.characterId = 157;

  // キャラ名
  Character157Base.characterName = "松永涼";

  // 最初からいるか
  Character157Base.defaultJoin = false;

  // 画像のリスト
  Character157Base.images = [];

  // 基本攻撃タイプ
  Character157Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character157Base.attackBase = 15;

  // 成長率：HP
  Character157Base.hpBase = 18;

  // 成長率：物理防御
  Character157Base.pDefBase = 1.8;

  // 成長率：魔法防御
  Character157Base.mDefBase = 1.3;

  // 基本移動力
  Character157Base.moveBase = 4;

  // 基本射程
  Character157Base.rangeBase = 1;

  // 基本命中率
  Character157Base.hitRateBase = 95;

  // 基本回避率
  Character157Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character157Base.itemMax = 10;

  // コスト
  Character157Base.costBase = 1.5;

  // 必要経験値
  Character157Base.expRate = 2.2;

  // 死んだ時の台詞
  Character157Base.textDeath = "松永涼";

  Character157Base.abilityName = "なし";

  Character157Base.abilityDesc = "なし";

  return Character157Base;

}).call(this);

Character158Base = (function() {
  class Character158Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character158Base.characterId = 158;

  // キャラ名
  Character158Base.characterName = "松原早耶";

  // 最初からいるか
  Character158Base.defaultJoin = false;

  // 画像のリスト
  Character158Base.images = [];

  // 基本攻撃タイプ
  Character158Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character158Base.attackBase = 13;

  // 成長率：HP
  Character158Base.hpBase = 17;

  // 成長率：物理防御
  Character158Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character158Base.mDefBase = 1.5;

  // 基本移動力
  Character158Base.moveBase = 4;

  // 基本射程
  Character158Base.rangeBase = 1;

  // 基本命中率
  Character158Base.hitRateBase = 95;

  // 基本回避率
  Character158Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character158Base.itemMax = 10;

  // コスト
  Character158Base.costBase = 1.5;

  // 必要経験値
  Character158Base.expRate = 2.2;

  // 死んだ時の台詞
  Character158Base.textDeath = "松原早耶";

  Character158Base.abilityName = "なし";

  Character158Base.abilityDesc = "なし";

  return Character158Base;

}).call(this);

Character159Base = (function() {
  class Character159Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character159Base.characterId = 159;

  // キャラ名
  Character159Base.characterName = "松本沙理奈";

  // 最初からいるか
  Character159Base.defaultJoin = false;

  // 画像のリスト
  Character159Base.images = [];

  // 基本攻撃タイプ
  Character159Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character159Base.attackBase = 13;

  // 成長率：HP
  Character159Base.hpBase = 17;

  // 成長率：物理防御
  Character159Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character159Base.mDefBase = 1.5;

  // 基本移動力
  Character159Base.moveBase = 4;

  // 基本射程
  Character159Base.rangeBase = 1;

  // 基本命中率
  Character159Base.hitRateBase = 95;

  // 基本回避率
  Character159Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character159Base.itemMax = 10;

  // コスト
  Character159Base.costBase = 1.5;

  // 必要経験値
  Character159Base.expRate = 2.2;

  // 死んだ時の台詞
  Character159Base.textDeath = "松本沙理奈";

  Character159Base.abilityName = "なし";

  Character159Base.abilityDesc = "なし";

  return Character159Base;

}).call(this);

Character160Base = (function() {
  class Character160Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character160Base.characterId = 160;

  // キャラ名
  Character160Base.characterName = "松山久美子";

  // 最初からいるか
  Character160Base.defaultJoin = false;

  // 画像のリスト
  Character160Base.images = [];

  // 基本攻撃タイプ
  Character160Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character160Base.attackBase = 13;

  // 成長率：HP
  Character160Base.hpBase = 17;

  // 成長率：物理防御
  Character160Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character160Base.mDefBase = 1.5;

  // 基本移動力
  Character160Base.moveBase = 4;

  // 基本射程
  Character160Base.rangeBase = 1;

  // 基本命中率
  Character160Base.hitRateBase = 95;

  // 基本回避率
  Character160Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character160Base.itemMax = 10;

  // コスト
  Character160Base.costBase = 1.5;

  // 必要経験値
  Character160Base.expRate = 2.2;

  // 死んだ時の台詞
  Character160Base.textDeath = "松山久美子";

  Character160Base.abilityName = "なし";

  Character160Base.abilityDesc = "なし";

  return Character160Base;

}).call(this);

Character161Base = (function() {
  class Character161Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character161Base.characterId = 161;

  // キャラ名
  Character161Base.characterName = "的場梨沙";

  // 最初からいるか
  Character161Base.defaultJoin = false;

  // 画像のリスト
  Character161Base.images = [];

  // 基本攻撃タイプ
  Character161Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character161Base.attackBase = 13;

  // 成長率：HP
  Character161Base.hpBase = 17;

  // 成長率：物理防御
  Character161Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character161Base.mDefBase = 1.5;

  // 基本移動力
  Character161Base.moveBase = 4;

  // 基本射程
  Character161Base.rangeBase = 1;

  // 基本命中率
  Character161Base.hitRateBase = 95;

  // 基本回避率
  Character161Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character161Base.itemMax = 10;

  // コスト
  Character161Base.costBase = 1.5;

  // 必要経験値
  Character161Base.expRate = 2.2;

  // 死んだ時の台詞
  Character161Base.textDeath = "的場梨沙";

  Character161Base.abilityName = "なし";

  Character161Base.abilityDesc = "なし";

  return Character161Base;

}).call(this);

Character162Base = (function() {
  class Character162Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character162Base.characterId = 162;

  // キャラ名
  Character162Base.characterName = "間中美里";

  // 最初からいるか
  Character162Base.defaultJoin = false;

  // 画像のリスト
  Character162Base.images = [];

  // 基本攻撃タイプ
  Character162Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character162Base.attackBase = 13;

  // 成長率：HP
  Character162Base.hpBase = 17;

  // 成長率：物理防御
  Character162Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character162Base.mDefBase = 1.5;

  // 基本移動力
  Character162Base.moveBase = 4;

  // 基本射程
  Character162Base.rangeBase = 1;

  // 基本命中率
  Character162Base.hitRateBase = 95;

  // 基本回避率
  Character162Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character162Base.itemMax = 10;

  // コスト
  Character162Base.costBase = 1.5;

  // 必要経験値
  Character162Base.expRate = 2.2;

  // 死んだ時の台詞
  Character162Base.textDeath = "間中美里";

  Character162Base.abilityName = "なし";

  Character162Base.abilityDesc = "なし";

  return Character162Base;

}).call(this);

Character163Base = (function() {
  class Character163Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character163Base.characterId = 163;

  // キャラ名
  Character163Base.characterName = "真鍋いつき";

  // 最初からいるか
  Character163Base.defaultJoin = false;

  // 画像のリスト
  Character163Base.images = [];

  // 基本攻撃タイプ
  Character163Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character163Base.attackBase = 15;

  // 成長率：HP
  Character163Base.hpBase = 19;

  // 成長率：物理防御
  Character163Base.pDefBase = 1.8;

  // 成長率：魔法防御
  Character163Base.mDefBase = 1.3;

  // 基本移動力
  Character163Base.moveBase = 5;

  // 基本射程
  Character163Base.rangeBase = 1;

  // 基本命中率
  Character163Base.hitRateBase = 95;

  // 基本回避率
  Character163Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character163Base.itemMax = 8;

  // コスト
  Character163Base.costBase = 1.5;

  // 必要経験値
  Character163Base.expRate = 2.0;

  // 死んだ時の台詞
  Character163Base.textDeath = "真鍋いつき";

  Character163Base.abilityName = "なし";

  Character163Base.abilityDesc = "行動後、再行動できることがある";

  return Character163Base;

}).call(this);

Character164Base = (function() {
  class Character164Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character164Base.characterId = 164;

  // キャラ名
  Character164Base.characterName = "三浦あずさ";

  // 最初からいるか
  Character164Base.defaultJoin = false;

  // 画像のリスト
  Character164Base.images = [];

  // 基本攻撃タイプ
  Character164Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character164Base.attackBase = 13;

  // 成長率：HP
  Character164Base.hpBase = 17;

  // 成長率：物理防御
  Character164Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character164Base.mDefBase = 1.5;

  // 基本移動力
  Character164Base.moveBase = 4;

  // 基本射程
  Character164Base.rangeBase = 1;

  // 基本命中率
  Character164Base.hitRateBase = 95;

  // 基本回避率
  Character164Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character164Base.itemMax = 10;

  // コスト
  Character164Base.costBase = 1.5;

  // 必要経験値
  Character164Base.expRate = 2.3;

  // 死んだ時の台詞
  Character164Base.textDeath = "三浦あずさ";

  Character164Base.abilityName = "なし";

  Character164Base.abilityDesc = "なし";

  return Character164Base;

}).call(this);

Character165Base = (function() {
  class Character165Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character165Base.characterId = 165;

  // キャラ名
  Character165Base.characterName = "水木聖來";

  // 最初からいるか
  Character165Base.defaultJoin = false;

  // 画像のリスト
  Character165Base.images = [];

  // 基本攻撃タイプ
  Character165Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character165Base.attackBase = 13;

  // 成長率：HP
  Character165Base.hpBase = 17;

  // 成長率：物理防御
  Character165Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character165Base.mDefBase = 1.5;

  // 基本移動力
  Character165Base.moveBase = 4;

  // 基本射程
  Character165Base.rangeBase = 1;

  // 基本命中率
  Character165Base.hitRateBase = 95;

  // 基本回避率
  Character165Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character165Base.itemMax = 10;

  // コスト
  Character165Base.costBase = 1.5;

  // 必要経験値
  Character165Base.expRate = 2.2;

  // 死んだ時の台詞
  Character165Base.textDeath = "水木聖來";

  Character165Base.abilityName = "なし";

  Character165Base.abilityDesc = "なし";

  return Character165Base;

}).call(this);

Character166Base = (function() {
  class Character166Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character166Base.characterId = 166;

  // キャラ名
  Character166Base.characterName = "水谷絵理";

  // 最初からいるか
  Character166Base.defaultJoin = false;

  // 画像のリスト
  Character166Base.images = [];

  // 基本攻撃タイプ
  Character166Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character166Base.attackBase = 13;

  // 成長率：HP
  Character166Base.hpBase = 17;

  // 成長率：物理防御
  Character166Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character166Base.mDefBase = 1.5;

  // 基本移動力
  Character166Base.moveBase = 4;

  // 基本射程
  Character166Base.rangeBase = 1;

  // 基本命中率
  Character166Base.hitRateBase = 95;

  // 基本回避率
  Character166Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character166Base.itemMax = 10;

  // コスト
  Character166Base.costBase = 1.5;

  // 必要経験値
  Character166Base.expRate = 2.2;

  // 死んだ時の台詞
  Character166Base.textDeath = "水谷絵理";

  Character166Base.abilityName = "なし";

  Character166Base.abilityDesc = "なし";

  return Character166Base;

}).call(this);

Character167Base = (function() {
  class Character167Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character167Base.characterId = 167;

  // キャラ名
  Character167Base.characterName = "水野翠";

  // 最初からいるか
  Character167Base.defaultJoin = false;

  // 画像のリスト
  Character167Base.images = [];

  // 基本攻撃タイプ
  Character167Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character167Base.attackBase = 14;

  // 成長率：HP
  Character167Base.hpBase = 16;

  // 成長率：物理防御
  Character167Base.pDefBase = 1.2;

  // 成長率：魔法防御
  Character167Base.mDefBase = 1.2;

  // 基本移動力
  Character167Base.moveBase = 4;

  // 基本射程
  Character167Base.rangeBase = 6;

  // 基本命中率
  Character167Base.hitRateBase = 90;

  // 基本回避率
  Character167Base.dodgeRateBase = 2;

  // アイテム装備可能数
  Character167Base.itemMax = 8;

  // コスト
  Character167Base.costBase = 1.5;

  // 必要経験値
  Character167Base.expRate = 2.4;

  // 死んだ時の台詞
  Character167Base.textDeath = "水野翠";

  Character167Base.abilityName = "貫通の矢";

  Character167Base.abilityDesc = "攻撃を外した時、その敵より後ろにいる敵全員にダメージを与える";

  return Character167Base;

}).call(this);

Character168Base = (function() {
  class Character168Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character168Base.characterId = 168;

  // キャラ名
  Character168Base.characterName = "水本ゆかり";

  // 最初からいるか
  Character168Base.defaultJoin = false;

  // 画像のリスト
  Character168Base.images = [];

  // 基本攻撃タイプ
  Character168Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character168Base.attackBase = 13;

  // 成長率：HP
  Character168Base.hpBase = 17;

  // 成長率：物理防御
  Character168Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character168Base.mDefBase = 1.5;

  // 基本移動力
  Character168Base.moveBase = 4;

  // 基本射程
  Character168Base.rangeBase = 1;

  // 基本命中率
  Character168Base.hitRateBase = 95;

  // 基本回避率
  Character168Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character168Base.itemMax = 10;

  // コスト
  Character168Base.costBase = 1.5;

  // 必要経験値
  Character168Base.expRate = 2.2;

  // 死んだ時の台詞
  Character168Base.textDeath = "水本ゆかり";

  Character168Base.abilityName = "なし";

  Character168Base.abilityDesc = "なし";

  return Character168Base;

}).call(this);

Character169Base = (function() {
  class Character169Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character169Base.characterId = 169;

  // キャラ名
  Character169Base.characterName = "水瀬伊織";

  // 最初からいるか
  Character169Base.defaultJoin = false;

  // 画像のリスト
  Character169Base.images = [];

  // 基本攻撃タイプ
  Character169Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character169Base.attackBase = 13;

  // 成長率：HP
  Character169Base.hpBase = 17;

  // 成長率：物理防御
  Character169Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character169Base.mDefBase = 1.5;

  // 基本移動力
  Character169Base.moveBase = 4;

  // 基本射程
  Character169Base.rangeBase = 1;

  // 基本命中率
  Character169Base.hitRateBase = 95;

  // 基本回避率
  Character169Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character169Base.itemMax = 10;

  // コスト
  Character169Base.costBase = 1.5;

  // 必要経験値
  Character169Base.expRate = 2.2;

  // 死んだ時の台詞
  Character169Base.textDeath = "水瀬伊織";

  Character169Base.abilityName = "なし";

  Character169Base.abilityDesc = "なし";

  return Character169Base;

}).call(this);

Character170Base = (function() {
  class Character170Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character170Base.characterId = 170;

  // キャラ名
  Character170Base.characterName = "三船美優";

  // 最初からいるか
  Character170Base.defaultJoin = false;

  // 画像のリスト
  Character170Base.images = [];

  // 基本攻撃タイプ
  Character170Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character170Base.attackBase = 13;

  // 成長率：HP
  Character170Base.hpBase = 17;

  // 成長率：物理防御
  Character170Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character170Base.mDefBase = 1.5;

  // 基本移動力
  Character170Base.moveBase = 4;

  // 基本射程
  Character170Base.rangeBase = 1;

  // 基本命中率
  Character170Base.hitRateBase = 95;

  // 基本回避率
  Character170Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character170Base.itemMax = 10;

  // コスト
  Character170Base.costBase = 1.5;

  // 必要経験値
  Character170Base.expRate = 2.2;

  // 死んだ時の台詞
  Character170Base.textDeath = "三船美優";

  Character170Base.abilityName = "なし";

  Character170Base.abilityDesc = "なし";

  return Character170Base;

}).call(this);

Character171Base = (function() {
  class Character171Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character171Base.characterId = 171;

  // キャラ名
  Character171Base.characterName = "三村かな子";

  // 最初からいるか
  Character171Base.defaultJoin = false;

  // 画像のリスト
  Character171Base.images = [];

  // 基本攻撃タイプ
  Character171Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character171Base.attackBase = 10;

  // 成長率：HP
  Character171Base.hpBase = 24;

  // 成長率：物理防御
  Character171Base.pDefBase = 3.5;

  // 成長率：魔法防御
  Character171Base.mDefBase = 2.5;

  // 基本移動力
  Character171Base.moveBase = 3;

  // 基本射程
  Character171Base.rangeBase = 1;

  // 基本命中率
  Character171Base.hitRateBase = 95;

  // 基本回避率
  Character171Base.dodgeRateBase = 1;

  // アイテム装備可能数
  Character171Base.itemMax = 10;

  // コスト
  Character171Base.costBase = 1.5;

  // 必要経験値
  Character171Base.expRate = 2.2;

  // 死んだ時の台詞
  Character171Base.textDeath = "三村かな子";

  Character171Base.abilityName = "なし";

  Character171Base.abilityDesc = "最大HPの50%以上のダメージを受けてHPが0になった時、一度だけHP1で耐える";

  return Character171Base;

}).call(this);

Character172Base = (function() {
  class Character172Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character172Base.characterId = 172;

  // キャラ名
  Character172Base.characterName = "宮本フレデリカ";

  // 最初からいるか
  Character172Base.defaultJoin = false;

  // 画像のリスト
  Character172Base.images = [];

  // 基本攻撃タイプ
  Character172Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character172Base.attackBase = 14;

  // 成長率：HP
  Character172Base.hpBase = 17;

  // 成長率：物理防御
  Character172Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character172Base.mDefBase = 1.5;

  // 基本移動力
  Character172Base.moveBase = 4;

  // 基本射程
  Character172Base.rangeBase = 1;

  // 基本命中率
  Character172Base.hitRateBase = 95;

  // 基本回避率
  Character172Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character172Base.itemMax = 10;

  // コスト
  Character172Base.costBase = 1.5;

  // 必要経験値
  Character172Base.expRate = 2.2;

  // 死んだ時の台詞
  Character172Base.textDeath = "宮本フレデリカ";

  Character172Base.abilityName = "なし";

  Character172Base.abilityDesc = "ターン開始時、攻撃タイプがランダムに変化する";

  return Character172Base;

}).call(this);

Character173Base = (function() {
  class Character173Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character173Base.characterId = 173;

  // キャラ名
  Character173Base.characterName = "三好紗南";

  // 最初からいるか
  Character173Base.defaultJoin = false;

  // 画像のリスト
  Character173Base.images = [];

  // 基本攻撃タイプ
  Character173Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character173Base.attackBase = 13;

  // 成長率：HP
  Character173Base.hpBase = 17;

  // 成長率：物理防御
  Character173Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character173Base.mDefBase = 1.5;

  // 基本移動力
  Character173Base.moveBase = 4;

  // 基本射程
  Character173Base.rangeBase = 1;

  // 基本命中率
  Character173Base.hitRateBase = 95;

  // 基本回避率
  Character173Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character173Base.itemMax = 10;

  // コスト
  Character173Base.costBase = 1.5;

  // 必要経験値
  Character173Base.expRate = 2.2;

  // 死んだ時の台詞
  Character173Base.textDeath = "三好紗南";

  Character173Base.abilityName = "なし";

  Character173Base.abilityDesc = "なし";

  return Character173Base;

}).call(this);

Character174Base = (function() {
  class Character174Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character174Base.characterId = 174;

  // キャラ名
  Character174Base.characterName = "向井拓海";

  // 最初からいるか
  Character174Base.defaultJoin = false;

  // 画像のリスト
  Character174Base.images = [];

  // 基本攻撃タイプ
  Character174Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character174Base.attackBase = 23;

  // 成長率：HP
  Character174Base.hpBase = 22;

  // 成長率：物理防御
  Character174Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character174Base.mDefBase = 1.2;

  // 基本移動力
  Character174Base.moveBase = 4;

  // 基本射程
  Character174Base.rangeBase = 1;

  // 基本命中率
  Character174Base.hitRateBase = 91;

  // 基本回避率
  Character174Base.dodgeRateBase = 2;

  // アイテム装備可能数
  Character174Base.itemMax = 10;

  // コスト
  Character174Base.costBase = 1.5;

  // 必要経験値
  Character174Base.expRate = 2.4;

  // 死んだ時の台詞
  Character174Base.textDeath = "向井拓海";

  Character174Base.abilityName = "喧嘩上等";

  Character174Base.abilityDesc = "敵の攻撃を寄せつける";

  return Character174Base;

}).call(this);

Character175Base = (function() {
  class Character175Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character175Base.characterId = 175;

  // キャラ名
  Character175Base.characterName = "棟方愛海";

  // 最初からいるか
  Character175Base.defaultJoin = false;

  // 画像のリスト
  Character175Base.images = [];

  // 基本攻撃タイプ
  Character175Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character175Base.attackBase = 11;

  // 成長率：HP
  Character175Base.hpBase = 16;

  // 成長率：物理防御
  Character175Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character175Base.mDefBase = 1.5;

  // 基本移動力
  Character175Base.moveBase = 4;

  // 基本射程
  Character175Base.rangeBase = 1;

  // 基本命中率
  Character175Base.hitRateBase = 95;

  // 基本回避率
  Character175Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character175Base.itemMax = 10;

  // コスト
  Character175Base.costBase = 1.5;

  // 必要経験値
  Character175Base.expRate = 2.3;

  // 死んだ時の台詞
  Character175Base.textDeath = "棟方愛海";

  Character175Base.abilityName = "登山";

  Character175Base.abilityDesc = "ターン開始時、周りに味方の数に応じてHPが回復する";

  return Character175Base;

}).call(this);

Character176Base = (function() {
  class Character176Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character176Base.characterId = 176;

  // キャラ名
  Character176Base.characterName = "村上巴";

  // 最初からいるか
  Character176Base.defaultJoin = false;

  // 画像のリスト
  Character176Base.images = [];

  // 基本攻撃タイプ
  Character176Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character176Base.attackBase = 17;

  // 成長率：HP
  Character176Base.hpBase = 16;

  // 成長率：物理防御
  Character176Base.pDefBase = 1.6;

  // 成長率：魔法防御
  Character176Base.mDefBase = 1.2;

  // 基本移動力
  Character176Base.moveBase = 4;

  // 基本射程
  Character176Base.rangeBase = 1;

  // 基本命中率
  Character176Base.hitRateBase = 93;

  // 基本回避率
  Character176Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character176Base.itemMax = 10;

  // コスト
  Character176Base.costBase = 1.5;

  // 必要経験値
  Character176Base.expRate = 2.2;

  // 死んだ時の台詞
  Character176Base.textDeath = "村上巴";

  Character176Base.abilityName = "喝！";

  Character176Base.abilityDesc = "行動終了時、周りの行動終了済みの味方を再行動させることがある";

  return Character176Base;

}).call(this);

Character177Base = (function() {
  class Character177Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character177Base.characterId = 177;

  // キャラ名
  Character177Base.characterName = "村松さくら";

  // 最初からいるか
  Character177Base.defaultJoin = false;

  // 画像のリスト
  Character177Base.images = [];

  // 基本攻撃タイプ
  Character177Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character177Base.attackBase = 13;

  // 成長率：HP
  Character177Base.hpBase = 17;

  // 成長率：物理防御
  Character177Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character177Base.mDefBase = 1.5;

  // 基本移動力
  Character177Base.moveBase = 4;

  // 基本射程
  Character177Base.rangeBase = 1;

  // 基本命中率
  Character177Base.hitRateBase = 95;

  // 基本回避率
  Character177Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character177Base.itemMax = 10;

  // コスト
  Character177Base.costBase = 1.5;

  // 必要経験値
  Character177Base.expRate = 2.2;

  // 死んだ時の台詞
  Character177Base.textDeath = "村松さくら";

  Character177Base.abilityName = "なし";

  Character177Base.abilityDesc = "なし";

  return Character177Base;

}).call(this);

Character178Base = (function() {
  class Character178Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character178Base.characterId = 178;

  // キャラ名
  Character178Base.characterName = "メアリー・コクラン";

  // 最初からいるか
  Character178Base.defaultJoin = false;

  // 画像のリスト
  Character178Base.images = [];

  // 基本攻撃タイプ
  Character178Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character178Base.attackBase = 13;

  // 成長率：HP
  Character178Base.hpBase = 17;

  // 成長率：物理防御
  Character178Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character178Base.mDefBase = 1.5;

  // 基本移動力
  Character178Base.moveBase = 4;

  // 基本射程
  Character178Base.rangeBase = 1;

  // 基本命中率
  Character178Base.hitRateBase = 95;

  // 基本回避率
  Character178Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character178Base.itemMax = 10;

  // コスト
  Character178Base.costBase = 1.5;

  // 必要経験値
  Character178Base.expRate = 2.2;

  // 死んだ時の台詞
  Character178Base.textDeath = "メアリー・コクラン";

  Character178Base.abilityName = "なし";

  Character178Base.abilityDesc = "なし";

  return Character178Base;

}).call(this);

Character179Base = (function() {
  class Character179Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character179Base.characterId = 179;

  // キャラ名
  Character179Base.characterName = "持田亜里沙";

  // 最初からいるか
  Character179Base.defaultJoin = false;

  // 画像のリスト
  Character179Base.images = [];

  // 基本攻撃タイプ
  Character179Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character179Base.attackBase = 11;

  // 成長率：HP
  Character179Base.hpBase = 19;

  // 成長率：物理防御
  Character179Base.pDefBase = 2;

  // 成長率：魔法防御
  Character179Base.mDefBase = 2;

  // 基本移動力
  Character179Base.moveBase = 4;

  // 基本射程
  Character179Base.rangeBase = 2;

  // 基本命中率
  Character179Base.hitRateBase = 93;

  // 基本回避率
  Character179Base.dodgeRateBase = 2;

  // アイテム装備可能数
  Character179Base.itemMax = 15;

  // コスト
  Character179Base.costBase = 1.5;

  // 必要経験値
  Character179Base.expRate = 2.2;

  // 死んだ時の台詞
  Character179Base.textDeath = "持田亜里沙";

  Character179Base.abilityName = "なし";

  Character179Base.abilityDesc = "なし";

  return Character179Base;

}).call(this);

Character180Base = (function() {
  class Character180Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character180Base.characterId = 180;

  // キャラ名
  Character180Base.characterName = "望月聖";

  // 最初からいるか
  Character180Base.defaultJoin = false;

  // 画像のリスト
  Character180Base.images = [];

  // 基本攻撃タイプ
  Character180Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character180Base.attackBase = 13;

  // 成長率：HP
  Character180Base.hpBase = 17;

  // 成長率：物理防御
  Character180Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character180Base.mDefBase = 1.5;

  // 基本移動力
  Character180Base.moveBase = 4;

  // 基本射程
  Character180Base.rangeBase = 1;

  // 基本命中率
  Character180Base.hitRateBase = 95;

  // 基本回避率
  Character180Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character180Base.itemMax = 10;

  // コスト
  Character180Base.costBase = 1.5;

  // 必要経験値
  Character180Base.expRate = 2.2;

  // 死んだ時の台詞
  Character180Base.textDeath = "望月聖";

  Character180Base.abilityName = "なし";

  Character180Base.abilityDesc = "なし";

  return Character180Base;

}).call(this);

Character181Base = (function() {
  class Character181Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character181Base.characterId = 181;

  // キャラ名
  Character181Base.characterName = "桃井あずき";

  // 最初からいるか
  Character181Base.defaultJoin = false;

  // 画像のリスト
  Character181Base.images = [];

  // 基本攻撃タイプ
  Character181Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character181Base.attackBase = 13;

  // 成長率：HP
  Character181Base.hpBase = 18;

  // 成長率：物理防御
  Character181Base.pDefBase = 1.2;

  // 成長率：魔法防御
  Character181Base.mDefBase = 1.2;

  // 基本移動力
  Character181Base.moveBase = 4;

  // 基本射程
  Character181Base.rangeBase = 1;

  // 基本命中率
  Character181Base.hitRateBase = 95;

  // 基本回避率
  Character181Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character181Base.itemMax = 10;

  // コスト
  Character181Base.costBase = 1.5;

  // 必要経験値
  Character181Base.expRate = 2.2;

  // 死んだ時の台詞
  Character181Base.textDeath = "桃井あずき";

  Character181Base.abilityName = "呉服";

  Character181Base.abilityDesc = "ターン開始時、物防・魔防が10%上がる";

  return Character181Base;

}).call(this);

Character182Base = (function() {
  class Character182Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character182Base.characterId = 182;

  // キャラ名
  Character182Base.characterName = "森久保乃々";

  // 最初からいるか
  Character182Base.defaultJoin = false;

  // 画像のリスト
  Character182Base.images = [];

  // 基本攻撃タイプ
  Character182Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character182Base.attackBase = 9;

  // 成長率：HP
  Character182Base.hpBase = 16;

  // 成長率：物理防御
  Character182Base.pDefBase = 2;

  // 成長率：魔法防御
  Character182Base.mDefBase = 2;

  // 基本移動力
  Character182Base.moveBase = 3;

  // 基本射程
  Character182Base.rangeBase = 3;

  // 基本命中率
  Character182Base.hitRateBase = 95;

  // 基本回避率
  Character182Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character182Base.itemMax = 10;

  // コスト
  Character182Base.costBase = 1.5;

  // 必要経験値
  Character182Base.expRate = 2.2;

  // 死んだ時の台詞
  Character182Base.textDeath = "森久保乃々";

  Character182Base.abilityName = "む～り～";

  Character182Base.abilityDesc = "敵ターン終了時、周りに3体以上のユニットがいる時、マップ左端のランダムなマスにワープする";

  return Character182Base;

}).call(this);

Character183Base = (function() {
  class Character183Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character183Base.characterId = 183;

  // キャラ名
  Character183Base.characterName = "諸星きらり";

  // 最初からいるか
  Character183Base.defaultJoin = false;

  // 画像のリスト
  Character183Base.images = [];

  // 基本攻撃タイプ
  Character183Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character183Base.attackBase = 18;

  // 成長率：HP
  Character183Base.hpBase = 23;

  // 成長率：物理防御
  Character183Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character183Base.mDefBase = 2.3;

  // 基本移動力
  Character183Base.moveBase = 4;

  // 基本射程
  Character183Base.rangeBase = 1;

  // 基本命中率
  Character183Base.hitRateBase = 93;

  // 基本回避率
  Character183Base.dodgeRateBase = 2;

  // アイテム装備可能数
  Character183Base.itemMax = 10;

  // コスト
  Character183Base.costBase = 1.5;

  // 必要経験値
  Character183Base.expRate = 2.2;

  // 死んだ時の台詞
  Character183Base.textDeath = "諸星きらり";

  Character183Base.abilityName = "きらりん☆ストロング";

  Character183Base.abilityDesc = "最大HPの50%以上のダメージを受けてHPが0になった時、一度だけHP1で耐える。";

  return Character183Base;

}).call(this);

Character184Base = (function() {
  class Character184Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character184Base.characterId = 184;

  // キャラ名
  Character184Base.characterName = "楊菲菲";

  // 最初からいるか
  Character184Base.defaultJoin = false;

  // 画像のリスト
  Character184Base.images = [];

  // 基本攻撃タイプ
  Character184Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character184Base.attackBase = 16;

  // 成長率：HP
  Character184Base.hpBase = 10;

  // 成長率：物理防御
  Character184Base.pDefBase = 1.4;

  // 成長率：魔法防御
  Character184Base.mDefBase = 1.4;

  // 基本移動力
  Character184Base.moveBase = 5;

  // 基本射程
  Character184Base.rangeBase = 1;

  // 基本命中率
  Character184Base.hitRateBase = 95;

  // 基本回避率
  Character184Base.dodgeRateBase = 10;

  // アイテム装備可能数
  Character184Base.itemMax = 10;

  // コスト
  Character184Base.costBase = 1.5;

  // 必要経験値
  Character184Base.expRate = 2.2;

  // 死んだ時の台詞
  Character184Base.textDeath = "楊菲菲";

  Character184Base.abilityName = "カンフー";

  Character184Base.abilityDesc = "最大HP以上のダメージを受ける時、10%の確率で回避する";

  return Character184Base;

}).call(this);

Character185Base = (function() {
  class Character185Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character185Base.characterId = 185;

  // キャラ名
  Character185Base.characterName = "八神マキノ";

  // 最初からいるか
  Character185Base.defaultJoin = false;

  // 画像のリスト
  Character185Base.images = [];

  // 基本攻撃タイプ
  Character185Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character185Base.attackBase = 11;

  // 成長率：HP
  Character185Base.hpBase = 18;

  // 成長率：物理防御
  Character185Base.pDefBase = 1.7;

  // 成長率：魔法防御
  Character185Base.mDefBase = 1.9;

  // 基本移動力
  Character185Base.moveBase = 5;

  // 基本射程
  Character185Base.rangeBase = 1;

  // 基本命中率
  Character185Base.hitRateBase = 95;

  // 基本回避率
  Character185Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character185Base.itemMax = 12;

  // コスト
  Character185Base.costBase = 1.5;

  // 必要経験値
  Character185Base.expRate = 2.4;

  // 死んだ時の台詞
  Character185Base.textDeath = "八神マキノ";

  Character185Base.abilityName = "諜報";

  Character185Base.abilityDesc = "自分が攻撃する時を除き、周囲にいる敵が受けるダメージが2倍になる";

  return Character185Base;

}).call(this);

Character186Base = (function() {
  class Character186Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character186Base.characterId = 186;

  // キャラ名
  Character186Base.characterName = "矢口美羽";

  // 最初からいるか
  Character186Base.defaultJoin = false;

  // 画像のリスト
  Character186Base.images = [];

  // 基本攻撃タイプ
  Character186Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character186Base.attackBase = 13;

  // 成長率：HP
  Character186Base.hpBase = 17;

  // 成長率：物理防御
  Character186Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character186Base.mDefBase = 1.5;

  // 基本移動力
  Character186Base.moveBase = 4;

  // 基本射程
  Character186Base.rangeBase = 1;

  // 基本命中率
  Character186Base.hitRateBase = 95;

  // 基本回避率
  Character186Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character186Base.itemMax = 10;

  // コスト
  Character186Base.costBase = 1.5;

  // 必要経験値
  Character186Base.expRate = 2.2;

  // 死んだ時の台詞
  Character186Base.textDeath = "矢口美羽";

  Character186Base.abilityName = "なし";

  Character186Base.abilityDesc = "なし";

  return Character186Base;

}).call(this);

Character187Base = (function() {
  class Character187Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character187Base.characterId = 187;

  // キャラ名
  Character187Base.characterName = "柳清良";

  // 最初からいるか
  Character187Base.defaultJoin = false;

  // 画像のリスト
  Character187Base.images = [];

  // 基本攻撃タイプ
  Character187Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character187Base.attackBase = 7;

  // 成長率：HP
  Character187Base.hpBase = 13;

  // 成長率：物理防御
  Character187Base.pDefBase = 0.9;

  // 成長率：魔法防御
  Character187Base.mDefBase = 1.2;

  // 基本移動力
  Character187Base.moveBase = 3;

  // 基本射程
  Character187Base.rangeBase = 1;

  // 基本命中率
  Character187Base.hitRateBase = 90;

  // 基本回避率
  Character187Base.dodgeRateBase = 1;

  // アイテム装備可能数
  Character187Base.itemMax = 12;

  // コスト
  Character187Base.costBase = 1.5;

  // 必要経験値
  Character187Base.expRate = 2.4;

  // 死んだ時の台詞
  Character187Base.textDeath = "柳清良";

  Character187Base.abilityName = "看護";

  Character187Base.abilityDesc = "ターンごとのHP減少を半分にする";

  return Character187Base;

}).call(this);

Character188Base = (function() {
  class Character188Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character188Base.characterId = 188;

  // キャラ名
  Character188Base.characterName = "柳瀬美由紀";

  // 最初からいるか
  Character188Base.defaultJoin = false;

  // 画像のリスト
  Character188Base.images = [];

  // 基本攻撃タイプ
  Character188Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character188Base.attackBase = 13;

  // 成長率：HP
  Character188Base.hpBase = 17;

  // 成長率：物理防御
  Character188Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character188Base.mDefBase = 1.5;

  // 基本移動力
  Character188Base.moveBase = 4;

  // 基本射程
  Character188Base.rangeBase = 1;

  // 基本命中率
  Character188Base.hitRateBase = 95;

  // 基本回避率
  Character188Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character188Base.itemMax = 10;

  // コスト
  Character188Base.costBase = 1.5;

  // 必要経験値
  Character188Base.expRate = 2.2;

  // 死んだ時の台詞
  Character188Base.textDeath = "柳瀬美由紀";

  Character188Base.abilityName = "なし";

  Character188Base.abilityDesc = "なし";

  return Character188Base;

}).call(this);

Character189Base = (function() {
  class Character189Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character189Base.characterId = 189;

  // キャラ名
  Character189Base.characterName = "大和亜季";

  // 最初からいるか
  Character189Base.defaultJoin = false;

  // 画像のリスト
  Character189Base.images = [];

  // 基本攻撃タイプ
  Character189Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character189Base.attackBase = 13;

  // 成長率：HP
  Character189Base.hpBase = 19;

  // 成長率：物理防御
  Character189Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character189Base.mDefBase = 1;

  // 基本移動力
  Character189Base.moveBase = 5;

  // 基本射程
  Character189Base.rangeBase = 2;

  // 基本命中率
  Character189Base.hitRateBase = 68;

  // 基本回避率
  Character189Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character189Base.itemMax = 15;

  // コスト
  Character189Base.costBase = 1.5;

  // 必要経験値
  Character189Base.expRate = 2.2;

  // 死んだ時の台詞
  Character189Base.textDeath = "大和亜季";

  Character189Base.abilityName = "掃射";

  Character189Base.abilityDesc = "攻撃時、周囲8マスの味方、敵にも同じダメージを与えることがある";

  return Character189Base;

}).call(this);

Character190Base = (function() {
  class Character190Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character190Base.characterId = 190;

  // キャラ名
  Character190Base.characterName = "結城晴";

  // 最初からいるか
  Character190Base.defaultJoin = false;

  // 画像のリスト
  Character190Base.images = [];

  // 基本攻撃タイプ
  Character190Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character190Base.attackBase = 16;

  // 成長率：HP
  Character190Base.hpBase = 16;

  // 成長率：物理防御
  Character190Base.pDefBase = 1.4;

  // 成長率：魔法防御
  Character190Base.mDefBase = 1.4;

  // 基本移動力
  Character190Base.moveBase = 4;

  // 基本射程
  Character190Base.rangeBase = 1;

  // 基本命中率
  Character190Base.hitRateBase = 95;

  // 基本回避率
  Character190Base.dodgeRateBase = 5;

  // アイテム装備可能数
  Character190Base.itemMax = 8;

  // コスト
  Character190Base.costBase = 1.5;

  // 必要経験値
  Character190Base.expRate = 1.8;

  // 死んだ時の台詞
  Character190Base.textDeath = "結城晴";

  Character190Base.abilityName = "なし";

  Character190Base.abilityDesc = "なし";

  return Character190Base;

}).call(this);

Character191Base = (function() {
  class Character191Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character191Base.characterId = 191;

  // キャラ名
  Character191Base.characterName = "遊佐こずえ";

  // 最初からいるか
  Character191Base.defaultJoin = false;

  // 画像のリスト
  Character191Base.images = [];

  // 基本攻撃タイプ
  Character191Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character191Base.attackBase = 10;

  // 成長率：HP
  Character191Base.hpBase = 13;

  // 成長率：物理防御
  Character191Base.pDefBase = 1;

  // 成長率：魔法防御
  Character191Base.mDefBase = 3.5;

  // 基本移動力
  Character191Base.moveBase = 3;

  // 基本射程
  Character191Base.rangeBase = 4;

  // 基本命中率
  Character191Base.hitRateBase = 88;

  // 基本回避率
  Character191Base.dodgeRateBase = 1;

  // アイテム装備可能数
  Character191Base.itemMax = 8;

  // コスト
  Character191Base.costBase = 1.5;

  // 必要経験値
  Character191Base.expRate = 2.0;

  // 死んだ時の台詞
  Character191Base.textDeath = "遊佐こずえ";

  Character191Base.abilityName = "なし";

  Character191Base.abilityDesc = "なし";

  return Character191Base;

}).call(this);

Character192Base = (function() {
  class Character192Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character192Base.characterId = 192;

  // キャラ名
  Character192Base.characterName = "横山千佳";

  // 最初からいるか
  Character192Base.defaultJoin = false;

  // 画像のリスト
  Character192Base.images = [];

  // 基本攻撃タイプ
  Character192Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character192Base.attackBase = 12;

  // 成長率：HP
  Character192Base.hpBase = 13;

  // 成長率：物理防御
  Character192Base.pDefBase = 1;

  // 成長率：魔法防御
  Character192Base.mDefBase = 4.5;

  // 基本移動力
  Character192Base.moveBase = 4;

  // 基本射程
  Character192Base.rangeBase = 4;

  // 基本命中率
  Character192Base.hitRateBase = 95;

  // 基本回避率
  Character192Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character192Base.itemMax = 8;

  // コスト
  Character192Base.costBase = 1.5;

  // 必要経験値
  Character192Base.expRate = 1.8;

  // 死んだ時の台詞
  Character192Base.textDeath = "横山千佳";

  Character192Base.abilityName = "魔法知識";

  Character192Base.abilityDesc = "魔法攻撃を受ける時、回避率が5倍になる";

  return Character192Base;

}).call(this);

Character193Base = (function() {
  class Character193Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character193Base.characterId = 193;

  // キャラ名
  Character193Base.characterName = "吉岡沙紀";

  // 最初からいるか
  Character193Base.defaultJoin = false;

  // 画像のリスト
  Character193Base.images = [];

  // 基本攻撃タイプ
  Character193Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character193Base.attackBase = 13;

  // 成長率：HP
  Character193Base.hpBase = 17;

  // 成長率：物理防御
  Character193Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character193Base.mDefBase = 1.5;

  // 基本移動力
  Character193Base.moveBase = 4;

  // 基本射程
  Character193Base.rangeBase = 1;

  // 基本命中率
  Character193Base.hitRateBase = 95;

  // 基本回避率
  Character193Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character193Base.itemMax = 10;

  // コスト
  Character193Base.costBase = 1.5;

  // 必要経験値
  Character193Base.expRate = 2.2;

  // 死んだ時の台詞
  Character193Base.textDeath = "吉岡沙紀";

  Character193Base.abilityName = "ペイント";

  Character193Base.abilityDesc = "味方ターン開始時、周囲の敵をランダムな別の敵に変化させることがある";

  return Character193Base;

}).call(this);

Character194Base = (function() {
  class Character194Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character194Base.characterId = 194;

  // キャラ名
  Character194Base.characterName = "依田芳乃";

  // 最初からいるか
  Character194Base.defaultJoin = false;

  // 画像のリスト
  Character194Base.images = [];

  // 基本攻撃タイプ
  Character194Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character194Base.attackBase = 13;

  // 成長率：HP
  Character194Base.hpBase = 17;

  // 成長率：物理防御
  Character194Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character194Base.mDefBase = 1.5;

  // 基本移動力
  Character194Base.moveBase = 4;

  // 基本射程
  Character194Base.rangeBase = 2;

  // 基本命中率
  Character194Base.hitRateBase = 95;

  // 基本回避率
  Character194Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character194Base.itemMax = 10;

  // コスト
  Character194Base.costBase = 1.5;

  // 必要経験値
  Character194Base.expRate = 2.2;

  // 死んだ時の台詞
  Character194Base.textDeath = "依田芳乃";

  Character194Base.abilityName = "なし";

  Character194Base.abilityDesc = "なし";

  return Character194Base;

}).call(this);

Character195Base = (function() {
  class Character195Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character195Base.characterId = 195;

  // キャラ名
  Character195Base.characterName = "ライラ";

  // 最初からいるか
  Character195Base.defaultJoin = false;

  // 画像のリスト
  Character195Base.images = [];

  // 基本攻撃タイプ
  Character195Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character195Base.attackBase = 11;

  // 成長率：HP
  Character195Base.hpBase = 12;

  // 成長率：物理防御
  Character195Base.pDefBase = 1;

  // 成長率：魔法防御
  Character195Base.mDefBase = 1;

  // 基本移動力
  Character195Base.moveBase = 4;

  // 基本射程
  Character195Base.rangeBase = 1;

  // 基本命中率
  Character195Base.hitRateBase = 95;

  // 基本回避率
  Character195Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character195Base.itemMax = 6;

  // コスト
  Character195Base.costBase = 1.5;

  // 必要経験値
  Character195Base.expRate = 1.2;

  // 死んだ時の台詞
  Character195Base.textDeath = "ライラ";

  Character195Base.abilityName = "節約";

  Character195Base.abilityDesc = "レベルが上がりやすい";

  return Character195Base;

}).call(this);

Character196Base = (function() {
  class Character196Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character196Base.characterId = 196;

  // キャラ名
  Character196Base.characterName = "龍崎薫";

  // 最初からいるか
  Character196Base.defaultJoin = false;

  // 画像のリスト
  Character196Base.images = [];

  // 基本攻撃タイプ
  Character196Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character196Base.attackBase = 12;

  // 成長率：HP
  Character196Base.hpBase = 15;

  // 成長率：物理防御
  Character196Base.pDefBase = 1.3;

  // 成長率：魔法防御
  Character196Base.mDefBase = 1.3;

  // 基本移動力
  Character196Base.moveBase = 4;

  // 基本射程
  Character196Base.rangeBase = 1;

  // 基本命中率
  Character196Base.hitRateBase = 93;

  // 基本回避率
  Character196Base.dodgeRateBase = 7;

  // アイテム装備可能数
  Character196Base.itemMax = 4;

  // コスト
  Character196Base.costBase = 1.5;

  // 必要経験値
  Character196Base.expRate = 1.8;

  // 死んだ時の台詞
  Character196Base.textDeath = "龍崎薫";

  Character196Base.abilityName = "なし";

  Character196Base.abilityDesc = "なし";

  return Character196Base;

}).call(this);

Character197Base = (function() {
  class Character197Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character197Base.characterId = 197;

  // キャラ名
  Character197Base.characterName = "若林智香";

  // 最初からいるか
  Character197Base.defaultJoin = false;

  // 画像のリスト
  Character197Base.images = [];

  // 基本攻撃タイプ
  Character197Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character197Base.attackBase = 13;

  // 成長率：HP
  Character197Base.hpBase = 17;

  // 成長率：物理防御
  Character197Base.pDefBase = 1.5;

  // 成長率：魔法防御
  Character197Base.mDefBase = 1.5;

  // 基本移動力
  Character197Base.moveBase = 4;

  // 基本射程
  Character197Base.rangeBase = 1;

  // 基本命中率
  Character197Base.hitRateBase = 95;

  // 基本回避率
  Character197Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character197Base.itemMax = 10;

  // コスト
  Character197Base.costBase = 1.5;

  // 必要経験値
  Character197Base.expRate = 2.2;

  // 死んだ時の台詞
  Character197Base.textDeath = "若林智香";

  Character197Base.abilityName = "なし";

  Character197Base.abilityDesc = "なし";

  return Character197Base;

}).call(this);

Character198Base = (function() {
  class Character198Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character198Base.characterId = 198;

  // キャラ名
  Character198Base.characterName = "脇山珠美";

  // 最初からいるか
  Character198Base.defaultJoin = false;

  // 画像のリスト
  Character198Base.images = [];

  // 基本攻撃タイプ
  Character198Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character198Base.attackBase = 18;

  // 成長率：HP
  Character198Base.hpBase = 12;

  // 成長率：物理防御
  Character198Base.pDefBase = 3.5;

  // 成長率：魔法防御
  Character198Base.mDefBase = 1;

  // 基本移動力
  Character198Base.moveBase = 4;

  // 基本射程
  Character198Base.rangeBase = 1;

  // 基本命中率
  Character198Base.hitRateBase = 97;

  // 基本回避率
  Character198Base.dodgeRateBase = 8;

  // アイテム装備可能数
  Character198Base.itemMax = 10;

  // コスト
  Character198Base.costBase = 1.5;

  // 必要経験値
  Character198Base.expRate = 2.0;

  // 死んだ時の台詞
  Character198Base.textDeath = "脇山珠美";

  Character198Base.abilityName = "剣道";

  Character198Base.abilityDesc = "敵の攻撃を回避した時、反撃する";

  return Character198Base;

}).call(this);

Character199Base = (function() {
  class Character199Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character199Base.characterId = 199;

  // キャラ名
  Character199Base.characterName = "和久井留美";

  // 最初からいるか
  Character199Base.defaultJoin = false;

  // 画像のリスト
  Character199Base.images = [];

  // 基本攻撃タイプ
  Character199Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character199Base.attackBase = 13;

  // 成長率：HP
  Character199Base.hpBase = 17;

  // 成長率：物理防御
  Character199Base.pDefBase = 2;

  // 成長率：魔法防御
  Character199Base.mDefBase = 1.8;

  // 基本移動力
  Character199Base.moveBase = 4;

  // 基本射程
  Character199Base.rangeBase = 1;

  // 基本命中率
  Character199Base.hitRateBase = 95;

  // 基本回避率
  Character199Base.dodgeRateBase = 3;

  // アイテム装備可能数
  Character199Base.itemMax = 10;

  // コスト
  Character199Base.costBase = 1.5;

  // 必要経験値
  Character199Base.expRate = 2.6;

  // 死んだ時の台詞
  Character199Base.textDeath = "和久井留美";

  Character199Base.abilityName = "なし";

  Character199Base.abilityDesc = "なし";

  return Character199Base;

}).call(this);

Character200Base = (function() {
  class Character200Base extends CharacterBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Character200Base.characterId = 200;

  // キャラ名
  Character200Base.characterName = "千川ちひろ";

  // 最初からいるか
  Character200Base.defaultJoin = false;

  // 画像のリスト
  Character200Base.images = [];

  // 基本攻撃タイプ
  Character200Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Character200Base.attackBase = 0;

  // 成長率：HP
  Character200Base.hpBase = 14;

  // 成長率：物理防御
  Character200Base.pDefBase = 0.5;

  // 成長率：魔法防御
  Character200Base.mDefBase = 0.5;

  // 基本移動力
  Character200Base.moveBase = 1;

  // 基本射程
  Character200Base.rangeBase = 0;

  // 基本命中率
  Character200Base.hitRateBase = 0;

  // 基本回避率
  Character200Base.dodgeRateBase = 1;

  // アイテム装備可能数
  Character200Base.itemMax = 15;

  // コスト
  Character200Base.costBase = 1.5;

  // 必要経験値
  Character200Base.expRate = 3.2;

  // 死んだ時の台詞
  Character200Base.textDeath = "千川ちひろ";

  Character200Base.abilityName = "事務";

  Character200Base.abilityDesc = "出撃中に得るジュエルが2倍になる";

  return Character200Base;

}).call(this);

// 島村卯月
Character1 = class Character1 extends Character1Base {
  constructor(params) {
    super(params);
  }

};

// 浅野風香
Character10 = class Character10 extends Character10Base {
  constructor(params) {
    super(params);
  }

};

// 瀬名詩織
Character100 = class Character100 extends Character100Base {
  constructor(params) {
    super(params);
  }

};

// 仙崎恵磨
Character101 = class Character101 extends Character101Base {
  constructor(params) {
    super(params);
  }

};

// 相馬夏美
Character102 = class Character102 extends Character102Base {
  constructor(params) {
    super(params);
  }

};

// 高垣楓
Character103 = class Character103 extends Character103Base {
  constructor(params) {
    super(params);
  }

};

// 高槻やよい
Character104 = class Character104 extends Character104Base {
  constructor(params) {
    super(params);
  }

};

// 高橋礼子
Character105 = class Character105 extends Character105Base {
  constructor(params) {
    super(params);
  }

};

// 鷹富士茄子
Character106 = class Character106 extends Character106Base {
  constructor(params) {
    super(params);
  }

};

// 高峯のあ
Character107 = class Character107 extends Character107Base {
  constructor(params) {
    super(params);
  }

};

// 高森藍子
Character108 = class Character108 extends Character108Base {
  constructor(params) {
    super(params);
  }

};

// 多田李衣菜
Character109 = class Character109 extends Character109Base {
  constructor(params) {
    super(params);
  }

};

// 浅利七海
Character11 = class Character11 extends Character11Base {
  constructor(params) {
    super(params);
  }

};

// 橘ありす
Character110 = class Character110 extends Character110Base {
  constructor(params) {
    super(params);
  }

};

// 月宮雅
Character111 = class Character111 extends Character111Base {
  constructor(params) {
    super(params);
  }

};

// 土屋亜子
Character112 = class Character112 extends Character112Base {
  constructor(params) {
    super(params);
  }

};

// 東郷あい
Character113 = class Character113 extends Character113Base {
  constructor(params) {
    super(params);
  }

};

// 道明寺歌鈴
Character114 = class Character114 extends Character114Base {
  constructor(params) {
    super(params);
  }

};

// 十時愛梨
Character115 = class Character115 extends Character115Base {
  constructor(params) {
    super(params);
  }

};

// 長富蓮実
Character116 = class Character116 extends Character116Base {
  constructor(params) {
    super(params);
  }

};

// 中野有香
Character117 = class Character117 extends Character117Base {
  constructor(params) {
    super(params);
  }

};

// ナターリア
Character118 = class Character118 extends Character118Base {
  constructor(params) {
    super(params);
  }

};

// 並木芽衣子
Character119 = class Character119 extends Character119Base {
  constructor(params) {
    super(params);
  }

};

// アナスタシア
Character12 = class Character12 extends Character12Base {
  constructor(params) {
    super(params);
  }

};

// 成宮由愛
Character120 = class Character120 extends Character120Base {
  constructor(params) {
    super(params);
  }

};

// 南条光
Character121 = class Character121 extends Character121Base {
  constructor(params) {
    super(params);
  }

};

// 難波笑美
Character122 = class Character122 extends Character122Base {
  constructor(params) {
    super(params);
  }

};

// 西川保奈美
Character123 = class Character123 extends Character123Base {
  constructor(params) {
    super(params);
  }

};

// 西島櫂
Character124 = class Character124 extends Character124Base {
  constructor(params) {
    super(params);
  }

};

// 新田美波
Character125 = class Character125 extends Character125Base {
  constructor(params) {
    super(params);
  }

};

// 二宮飛鳥
Character126 = class Character126 extends Character126Base {
  constructor(params) {
    super(params);
  }

};

// 丹羽仁美
Character127 = class Character127 extends Character127Base {
  constructor(params) {
    super(params);
  }

};

// 野々村そら
Character128 = class Character128 extends Character128Base {
  constructor(params) {
    super(params);
  }

};

// 萩原雪歩
Character129 = class Character129 extends Character129Base {
  constructor(params) {
    super(params);
  }

};

// 安部菜々
Character13 = class Character13 extends Character13Base {
  constructor(params) {
    super(params);
  }

};

// 服部瞳子
Character130 = class Character130 extends Character130Base {
  constructor(params) {
    super(params);
  }

};

// 浜川愛結奈
Character131 = class Character131 extends Character131Base {
  constructor(params) {
    super(params);
  }

};

// 浜口あやめ
Character132 = class Character132 extends Character132Base {
  constructor(params) {
    super(params);
  }

};

// 早坂美玲
Character133 = class Character133 extends Character133Base {
  constructor(params) {
    super(params);
  }

};

// 速水奏
Character134 = class Character134 extends Character134Base {
  constructor(params) {
    super(params);
  }

};

// 原田美世
Character135 = class Character135 extends Character135Base {
  constructor(params) {
    super(params);
  }

};

// 柊志乃
Character136 = class Character136 extends Character136Base {
  constructor(params) {
    super(params);
  }

};

// 日高愛
Character137 = class Character137 extends Character137Base {
  constructor(params) {
    super(params);
  }

};

// 日野茜
Character138 = class Character138 extends Character138Base {
  constructor(params) {
    super(params);
  }

};

// 姫川友紀
Character139 = class Character139 extends Character139Base {
  constructor(params) {
    super(params);
  }

};

// 綾瀬穂乃香
Character14 = class Character14 extends Character14Base {
  constructor(params) {
    super(params);
  }

};

// 兵藤レナ
Character140 = class Character140 extends Character140Base {
  constructor(params) {
    super(params);
  }

};

// 福山舞
Character141 = class Character141 extends Character141Base {
  constructor(params) {
    super(params);
  }

};

// 藤居朋
Character142 = class Character142 extends Character142Base {
  constructor(params) {
    super(params);
  }

};

// 藤本里奈
Character143 = class Character143 extends Character143Base {
  constructor(params) {
    super(params);
  }

};

// 藤原肇
Character144 = class Character144 extends Character144Base {
  constructor(params) {
    super(params);
  }

};

// 双葉杏
Character145 = class Character145 extends Character145Base {
  constructor(params) {
    super(params);
  }

};

// 双海亜美
Character146 = class Character146 extends Character146Base {
  constructor(params) {
    super(params);
  }

};

// 双海真美
Character147 = class Character147 extends Character147Base {
  constructor(params) {
    super(params);
  }

};

// 古澤頼子
Character148 = class Character148 extends Character148Base {
  constructor(params) {
    super(params);
  }

};

// ヘレン
Character149 = class Character149 extends Character149Base {
  constructor(params) {
    super(params);
  }

};

// 荒木比奈
Character15 = class Character15 extends Character15Base {
  constructor(params) {
    super(params);
  }

};

// 北条加蓮
Character150 = class Character150 extends Character150Base {
  constructor(params) {
    super(params);
  }

};

// 星井美希
Character151 = class Character151 extends Character151Base {
  constructor(params) {
    super(params);
  }

};

// 星輝子
Character152 = class Character152 extends Character152Base {
  constructor(params) {
    super(params);
  }

};

// 堀裕子
Character153 = class Character153 extends Character153Base {
  constructor(params) {
    super(params);
  }

};

// 前川みく
Character154 = class Character154 extends Character154Base {
  constructor(params) {
    super(params);
  }

};

// 槙原志保
Character155 = class Character155 extends Character155Base {
  constructor(params) {
    super(params);
  }

};

// 松尾千鶴
Character156 = class Character156 extends Character156Base {
  constructor(params) {
    super(params);
  }

};

// 松永涼
Character157 = class Character157 extends Character157Base {
  constructor(params) {
    super(params);
  }

};

// 松原早耶
Character158 = class Character158 extends Character158Base {
  constructor(params) {
    super(params);
  }

};

// 松本沙理奈
Character159 = class Character159 extends Character159Base {
  constructor(params) {
    super(params);
  }

};

// 有浦柑奈
Character16 = class Character16 extends Character16Base {
  constructor(params) {
    super(params);
  }

};

// 松山久美子
Character160 = class Character160 extends Character160Base {
  constructor(params) {
    super(params);
  }

};

// 的場梨沙
Character161 = class Character161 extends Character161Base {
  constructor(params) {
    super(params);
  }

};

// 間中美里
Character162 = class Character162 extends Character162Base {
  constructor(params) {
    super(params);
  }

};

// 真鍋いつき
Character163 = class Character163 extends Character163Base {
  constructor(params) {
    super(params);
  }

};

// 三浦あずさ
Character164 = class Character164 extends Character164Base {
  constructor(params) {
    super(params);
  }

};

// 水木聖來
Character165 = class Character165 extends Character165Base {
  constructor(params) {
    super(params);
  }

};

// 水谷絵理
Character166 = class Character166 extends Character166Base {
  constructor(params) {
    super(params);
  }

};

// 水野翠
Character167 = class Character167 extends Character167Base {
  constructor(params) {
    super(params);
  }

};

// 水本ゆかり
Character168 = class Character168 extends Character168Base {
  constructor(params) {
    super(params);
  }

};

// 水瀬伊織
Character169 = class Character169 extends Character169Base {
  constructor(params) {
    super(params);
  }

};

// 安斎都
Character17 = class Character17 extends Character17Base {
  constructor(params) {
    super(params);
  }

};

// 三船美優
Character170 = class Character170 extends Character170Base {
  constructor(params) {
    super(params);
  }

};

// 三村かな子
Character171 = class Character171 extends Character171Base {
  constructor(params) {
    super(params);
  }

};

// 宮本フレデリカ
Character172 = class Character172 extends Character172Base {
  constructor(params) {
    super(params);
  }

};

// 三好紗南
Character173 = class Character173 extends Character173Base {
  constructor(params) {
    super(params);
  }

};

// 向井拓海
Character174 = class Character174 extends Character174Base {
  constructor(params) {
    super(params);
  }

};

// 棟方愛海
Character175 = class Character175 extends Character175Base {
  constructor(params) {
    super(params);
  }

};

// 村上巴
Character176 = class Character176 extends Character176Base {
  constructor(params) {
    super(params);
  }

};

// 村松さくら
Character177 = class Character177 extends Character177Base {
  constructor(params) {
    super(params);
  }

};

// メアリー・コクラン
Character178 = class Character178 extends Character178Base {
  constructor(params) {
    super(params);
  }

};

// 持田亜里沙
Character179 = class Character179 extends Character179Base {
  constructor(params) {
    super(params);
  }

};

// イヴ・サンタクロース
Character18 = class Character18 extends Character18Base {
  constructor(params) {
    super(params);
  }

};

// 望月聖
Character180 = class Character180 extends Character180Base {
  constructor(params) {
    super(params);
  }

};

// 桃井あずき
Character181 = class Character181 extends Character181Base {
  constructor(params) {
    super(params);
  }

};

// 森久保乃々
Character182 = class Character182 extends Character182Base {
  constructor(params) {
    super(params);
  }

};

// 諸星きらり
Character183 = class Character183 extends Character183Base {
  constructor(params) {
    super(params);
  }

};

// 楊菲菲
Character184 = class Character184 extends Character184Base {
  constructor(params) {
    super(params);
  }

};

// 八神マキノ
Character185 = class Character185 extends Character185Base {
  constructor(params) {
    super(params);
  }

};

// 矢口美羽
Character186 = class Character186 extends Character186Base {
  constructor(params) {
    super(params);
  }

};

// 柳清良
Character187 = class Character187 extends Character187Base {
  constructor(params) {
    super(params);
  }

};

// 柳瀬美由紀
Character188 = class Character188 extends Character188Base {
  constructor(params) {
    super(params);
  }

};

// 大和亜季
Character189 = class Character189 extends Character189Base {
  constructor(params) {
    super(params);
  }

};

// 五十嵐響子
Character19 = class Character19 extends Character19Base {
  constructor(params) {
    super(params);
  }

};

// 結城晴
Character190 = class Character190 extends Character190Base {
  constructor(params) {
    super(params);
  }

};

// 遊佐こずえ
Character191 = class Character191 extends Character191Base {
  constructor(params) {
    super(params);
  }

};

// 横山千佳
Character192 = class Character192 extends Character192Base {
  constructor(params) {
    super(params);
  }

};

// 吉岡沙紀
Character193 = class Character193 extends Character193Base {
  constructor(params) {
    super(params);
  }

};

// 依田芳乃
Character194 = class Character194 extends Character194Base {
  constructor(params) {
    super(params);
  }

};

// ライラ
Character195 = class Character195 extends Character195Base {
  constructor(params) {
    super(params);
  }

};

// 龍崎薫
Character196 = class Character196 extends Character196Base {
  constructor(params) {
    super(params);
  }

};

// 若林智香
Character197 = class Character197 extends Character197Base {
  constructor(params) {
    super(params);
  }

};

// 脇山珠美
Character198 = class Character198 extends Character198Base {
  constructor(params) {
    super(params);
  }

};

// 和久井留美
Character199 = class Character199 extends Character199Base {
  constructor(params) {
    super(params);
  }

};

// 渋谷凛
Character2 = class Character2 extends Character2Base {
  constructor(params) {
    super(params);
  }

};

// 池袋晶葉
Character20 = class Character20 extends Character20Base {
  constructor(params) {
    super(params);
  }

};

// 千川ちひろ
Character200 = class Character200 extends Character200Base {
  constructor(params) {
    super(params);
  }

};

// 伊集院惠
Character21 = class Character21 extends Character21Base {
  constructor(params) {
    super(params);
  }

};

// 一ノ瀬志希
Character22 = class Character22 extends Character22Base {
  constructor(params) {
    super(params);
  }

};

// 市原仁奈
Character23 = class Character23 extends Character23Base {
  constructor(params) {
    super(params);
  }

};

// 今井加奈
Character24 = class Character24 extends Character24Base {
  constructor(params) {
    super(params);
  }

};

// 井村雪菜
Character25 = class Character25 extends Character25Base {
  constructor(params) {
    super(params);
  }

};

// 上田鈴帆
Character26 = class Character26 extends Character26Base {
  constructor(params) {
    super(params);
  }

};

// 氏家むつみ
Character27 = class Character27 extends Character27Base {
  constructor(params) {
    super(params);
  }

};

// 梅木音葉
Character28 = class Character28 extends Character28Base {
  constructor(params) {
    super(params);
  }

};

// 江上椿
Character29 = class Character29 extends Character29Base {
  constructor(params) {
    super(params);
  }

};

// 本田未央
Character3 = class Character3 extends Character3Base {
  constructor(params) {
    super(params);
  }

};

// 衛藤美紗希
Character30 = class Character30 extends Character30Base {
  constructor(params) {
    super(params);
  }

};

// 海老原菜帆
Character31 = class Character31 extends Character31Base {
  constructor(params) {
    super(params);
  }

};

// 及川雫
Character32 = class Character32 extends Character32Base {
  constructor(params) {
    super(params);
  }

};

// 大石泉
Character33 = class Character33 extends Character33Base {
  constructor(params) {
    super(params);
  }

};

// 太田優
Character34 = class Character34 extends Character34Base {
  constructor(params) {
    super(params);
  }

};

// 大槻唯
Character35 = class Character35 extends Character35Base {
  constructor(params) {
    super(params);
  }

};

// 大西由里子
Character36 = class Character36 extends Character36Base {
  constructor(params) {
    super(params);
  }

};

// 大沼くるみ
Character37 = class Character37 extends Character37Base {
  constructor(params) {
    super(params);
  }

};

// 大原みちる
Character38 = class Character38 extends Character38Base {
  constructor(params) {
    super(params);
  }

};

// 岡崎泰葉
Character39 = class Character39 extends Character39Base {
  constructor(params) {
    super(params);
  }

};

// 相川千夏
Character4 = class Character4 extends Character4Base {
  constructor(params) {
    super(params);
  }

};

// 緒方智絵里
Character40 = class Character40 extends Character40Base {
  constructor(params) {
    super(params);
  }

};

// 奥山沙織
Character41 = class Character41 extends Character41Base {
  constructor(params) {
    super(params);
  }

};

// 乙倉悠貴
Character42 = class Character42 extends Character42Base {
  constructor(params) {
    super(params);
  }

};

// 片桐早苗
Character43 = class Character43 extends Character43Base {
  constructor(params) {
    super(params);
  }

};

// 上条春菜
Character44 = class Character44 extends Character44Base {
  constructor(params) {
    super(params);
  }

};

// 神谷奈緒
Character45 = class Character45 extends Character45Base {
  constructor(params) {
    super(params);
  }

};

// 川島瑞樹
Character46 = class Character46 extends Character46Base {
  constructor(params) {
    super(params);
  }

};

// 神崎蘭子
Character47 = class Character47 extends Character47Base {
  constructor(params) {
    super(params);
  }

};

// 岸部彩華
Character48 = class Character48 extends Character48Base {
  constructor(params) {
    super(params);
  }

};

// 北川真尋
Character49 = class Character49 extends Character49Base {
  constructor(params) {
    super(params);
  }

};

// 愛野渚
Character5 = class Character5 extends Character5Base {
  constructor(params) {
    super(params);
  }

};

// 喜多日菜子
Character50 = class Character50 extends Character50Base {
  constructor(params) {
    super(params);
  }

};

// 喜多見柚
Character51 = class Character51 extends Character51Base {
  constructor(params) {
    super(params);
  }

};

// 木場真奈美
Character52 = class Character52 extends Character52Base {
  constructor(params) {
    super(params);
  }

};

// 木村夏樹
Character53 = class Character53 extends Character53Base {
  constructor(params) {
    super(params);
  }

};

// キャシー・グラハム
Character54 = class Character54 extends Character54Base {
  constructor(params) {
    super(params);
  }

};

// 桐野アヤ
Character55 = class Character55 extends Character55Base {
  constructor(params) {
    super(params);
  }

};

// 桐生つかさ
Character56 = class Character56 extends Character56Base {
  constructor(params) {
    super(params);
  }

};

// 日下部若葉
Character57 = class Character57 extends Character57Base {
  constructor(params) {
    super(params);
  }

};

// 工藤忍
Character58 = class Character58 extends Character58Base {
  constructor(params) {
    super(params);
  }

};

// クラリス
Character59 = class Character59 extends Character59Base {
  constructor(params) {
    super(params);
  }

};

// 相葉夕美
Character6 = class Character6 extends Character6Base {
  constructor(params) {
    super(params);
  }

};

// 栗原ネネ
Character60 = class Character60 extends Character60Base {
  constructor(params) {
    super(params);
  }

};

// 黒川千秋
Character61 = class Character61 extends Character61Base {
  constructor(params) {
    super(params);
  }

};

// ケイト
Character62 = class Character62 extends Character62Base {
  constructor(params) {
    super(params);
  }

};

// 古賀小春
Character63 = class Character63 extends Character63Base {
  constructor(params) {
    super(params);
  }

};

// 輿水幸子
Character64 = class Character64 extends Character64Base {
  constructor(params) {
    super(params);
  }

};

// 小関麗奈
Character65 = class Character65 extends Character65Base {
  constructor(params) {
    super(params);
  }

};

// 小早川紗枝
Character66 = class Character66 extends Character66Base {
  constructor(params) {
    super(params);
  }

};

// 秋月律子
Character67 = class Character67 extends Character67Base {
  constructor(params) {
    super(params);
  }

};

// 秋月涼
Character68 = class Character68 extends Character68Base {
  constructor(params) {
    super(params);
  }

};

// 天海春香
Character69 = class Character69 extends Character69Base {
  constructor(params) {
    super(params);
  }

};

// 相原雪乃
Character7 = class Character7 extends Character7Base {
  constructor(params) {
    super(params);
  }

};

// 我那覇響
Character70 = class Character70 extends Character70Base {
  constructor(params) {
    super(params);
  }

};

// 菊地真
Character71 = class Character71 extends Character71Base {
  constructor(params) {
    super(params);
  }

};

// 如月千早
Character72 = class Character72 extends Character72Base {
  constructor(params) {
    super(params);
  }

};

// 小日向美穂
Character73 = class Character73 extends Character73Base {
  constructor(params) {
    super(params);
  }

};

// 小松伊吹
Character74 = class Character74 extends Character74Base {
  constructor(params) {
    super(params);
  }

};

// 小室千奈美
Character75 = class Character75 extends Character75Base {
  constructor(params) {
    super(params);
  }

};

// 西園寺琴歌
Character76 = class Character76 extends Character76Base {
  constructor(params) {
    super(params);
  }

};

// 財前時子
Character77 = class Character77 extends Character77Base {
  constructor(params) {
    super(params);
  }

};

// 斉藤洋子
Character78 = class Character78 extends Character78Base {
  constructor(params) {
    super(params);
  }

};

// 冴島清美
Character79 = class Character79 extends Character79Base {
  constructor(params) {
    super(params);
  }

};

// 赤城みりあ
Character8 = class Character8 extends Character8Base {
  constructor(params) {
    super(params);
  }

};

// 榊原里美
Character80 = class Character80 extends Character80Base {
  constructor(params) {
    super(params);
  }

};

// 鷺沢文香
Character81 = class Character81 extends Character81Base {
  constructor(params) {
    super(params);
  }

};

// 佐久間まゆ
Character82 = class Character82 extends Character82Base {
  constructor(params) {
    super(params);
  }

};

// 櫻井桃華
Character83 = class Character83 extends Character83Base {
  constructor(params) {
    super(params);
  }

};

// 佐々木千枝
Character84 = class Character84 extends Character84Base {
  constructor(params) {
    super(params);
  }

};

// 佐城雪美
Character85 = class Character85 extends Character85Base {
  constructor(params) {
    super(params);
  }

};

// 佐藤心
Character86 = class Character86 extends Character86Base {
  constructor(params) {
    super(params);
  }

};

// 沢田麻理菜
Character87 = class Character87 extends Character87Base {
  constructor(params) {
    super(params);
  }

};

// 椎名法子
Character88 = class Character88 extends Character88Base {
  constructor(params) {
    super(params);
  }

};

// 塩見周子
Character89 = class Character89 extends Character89Base {
  constructor(params) {
    super(params);
  }

};

// 赤西瑛梨華
Character9 = class Character9 extends Character9Base {
  constructor(params) {
    super(params);
  }

};

// 四条貴音
Character90 = class Character90 extends Character90Base {
  constructor(params) {
    super(params);
  }

};

// 篠原礼
Character91 = class Character91 extends Character91Base {
  constructor(params) {
    super(params);
  }

};

// 首藤葵
Character92 = class Character92 extends Character92Base {
  constructor(params) {
    super(params);
  }

};

// 城ヶ崎美嘉
Character93 = class Character93 extends Character93Base {
  constructor(params) {
    super(params);
  }

};

// 城ヶ崎莉嘉
Character94 = class Character94 extends Character94Base {
  constructor(params) {
    super(params);
  }

};

// 白菊ほたる
Character95 = class Character95 extends Character95Base {
  constructor(params) {
    super(params);
  }

};

// 白坂小梅
Character96 = class Character96 extends Character96Base {
  constructor(params) {
    super(params);
  }

};

// 杉坂海
Character97 = class Character97 extends Character97Base {
  constructor(params) {
    super(params);
  }

};

// 涼宮星花
Character98 = class Character98 extends Character98Base {
  constructor(params) {
    super(params);
  }

};

// 関裕美
Character99 = class Character99 extends Character99Base {
  constructor(params) {
    super(params);
  }

};

window.CharacterList = {
  "1": Character1,
  "2": Character2,
  "3": Character3,
  "4": Character4,
  "5": Character5,
  "6": Character6,
  "7": Character7,
  "8": Character8,
  "9": Character9,
  "10": Character10,
  "11": Character11,
  "12": Character12,
  "13": Character13,
  "14": Character14,
  "15": Character15,
  "16": Character16,
  "17": Character17,
  "18": Character18,
  "19": Character19,
  "20": Character20,
  "21": Character21,
  "22": Character22,
  "23": Character23,
  "24": Character24,
  "25": Character25,
  "26": Character26,
  "27": Character27,
  "28": Character28,
  "29": Character29,
  "30": Character30,
  "31": Character31,
  "32": Character32,
  "33": Character33,
  "34": Character34,
  "35": Character35,
  "36": Character36,
  "37": Character37,
  "38": Character38,
  "39": Character39,
  "40": Character40,
  "41": Character41,
  "42": Character42,
  "43": Character43,
  "44": Character44,
  "45": Character45,
  "46": Character46,
  "47": Character47,
  "48": Character48,
  "49": Character49,
  "50": Character50,
  "51": Character51,
  "52": Character52,
  "53": Character53,
  "54": Character54,
  "55": Character55,
  "56": Character56,
  "57": Character57,
  "58": Character58,
  "59": Character59,
  "60": Character60,
  "61": Character61,
  "62": Character62,
  "63": Character63,
  "64": Character64,
  "65": Character65,
  "66": Character66,
  "67": Character67,
  "68": Character68,
  "69": Character69,
  "70": Character70,
  "71": Character71,
  "72": Character72,
  "73": Character73,
  "74": Character74,
  "75": Character75,
  "76": Character76,
  "77": Character77,
  "78": Character78,
  "79": Character79,
  "80": Character80,
  "81": Character81,
  "82": Character82,
  "83": Character83,
  "84": Character84,
  "85": Character85,
  "86": Character86,
  "87": Character87,
  "88": Character88,
  "89": Character89,
  "90": Character90,
  "91": Character91,
  "92": Character92,
  "93": Character93,
  "94": Character94,
  "95": Character95,
  "96": Character96,
  "97": Character97,
  "98": Character98,
  "99": Character99,
  "100": Character100,
  "101": Character101,
  "102": Character102,
  "103": Character103,
  "104": Character104,
  "105": Character105,
  "106": Character106,
  "107": Character107,
  "108": Character108,
  "109": Character109,
  "110": Character110,
  "111": Character111,
  "112": Character112,
  "113": Character113,
  "114": Character114,
  "115": Character115,
  "116": Character116,
  "117": Character117,
  "118": Character118,
  "119": Character119,
  "120": Character120,
  "121": Character121,
  "122": Character122,
  "123": Character123,
  "124": Character124,
  "125": Character125,
  "126": Character126,
  "127": Character127,
  "128": Character128,
  "129": Character129,
  "130": Character130,
  "131": Character131,
  "132": Character132,
  "133": Character133,
  "134": Character134,
  "135": Character135,
  "136": Character136,
  "137": Character137,
  "138": Character138,
  "139": Character139,
  "140": Character140,
  "141": Character141,
  "142": Character142,
  "143": Character143,
  "144": Character144,
  "145": Character145,
  "146": Character146,
  "147": Character147,
  "148": Character148,
  "149": Character149,
  "150": Character150,
  "151": Character151,
  "152": Character152,
  "153": Character153,
  "154": Character154,
  "155": Character155,
  "156": Character156,
  "157": Character157,
  "158": Character158,
  "159": Character159,
  "160": Character160,
  "161": Character161,
  "162": Character162,
  "163": Character163,
  "164": Character164,
  "165": Character165,
  "166": Character166,
  "167": Character167,
  "168": Character168,
  "169": Character169,
  "170": Character170,
  "171": Character171,
  "172": Character172,
  "173": Character173,
  "174": Character174,
  "175": Character175,
  "176": Character176,
  "177": Character177,
  "178": Character178,
  "179": Character179,
  "180": Character180,
  "181": Character181,
  "182": Character182,
  "183": Character183,
  "184": Character184,
  "185": Character185,
  "186": Character186,
  "187": Character187,
  "188": Character188,
  "189": Character189,
  "190": Character190,
  "191": Character191,
  "192": Character192,
  "193": Character193,
  "194": Character194,
  "195": Character195,
  "196": Character196,
  "197": Character197,
  "198": Character198,
  "199": Character199,
  "200": Character200
};

CharacterPalletManager = (function() {
  class CharacterPalletManager {
    static init(parentElement, posX, posY) {
      this.parentElement = parentElement;
      this.posX = posX;
      this.posY = posY;
      return this.divObject = $('<div>').attr('id', this.ID).addClass('no_display').css({
        width: this.SIZE_X,
        height: this.SIZE_Y,
        left: this.posX,
        top: this.posY
      }).appendTo(this.parentElement);
    }

    static show() {
      return $(this.divObject).removeClass('no_display');
    }

    static hide() {
      return $(this.divObject).addClass('no_display');
    }

    static addCharacter(characterObject) {
      return this.characters.push(characterObject);
    }

    static draw() {
      var c, index, j, len, ref, results, top;
      this.characters.sort(function(a, b) {
        return Number(a.constructor.characterId) - Number(b.constructor.characterId);
      });
      this.panels = [];
      $('#' + this.ID + ' > .' + Panel.CLASSNAME).remove();
      ref = this.characters;
      results = [];
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        c = ref[index];
        top = index * Panel.SIZE_Y;
        results.push(this.panels.push(new Panel(this.divObject, c, top, 0, true)));
      }
      return results;
    }

    static redraw(object = null) {
      return $.each(this.panels, function() {
        if (object === null || this.object !== null && object.getId() === this.object.getId()) {
          return this.draw();
        }
      });
    }

    static pickCharacter(characterObject) {
      // キャラオブジェクトを選択中キャラにセット
      GameManager.flags.pickedCharacterObject = characterObject;
      // アイコンのキャラを一時的に消す
      //@divObject.find('.field_icon').css('background-image', 'none')
      // このキャラが仮置きしてあったセルの仮置きを全削除
      FieldManager.removeAllTempObject(characterObject);
      // 移動中のアイコンを作成
      GameManager.flags.pickedCharacterElement = $('<img>').addClass('picked_character').css({
        width: Cell.SIZE_X
      }).attr({
        src: characterObject.getBaseImage()
      }).appendTo(GameManager.gameElement);
      // 追随させる
      return GameManager.followPickedCharacterElement();
    }

    static onExit() {
      // キャラクター出撃モードから出る
      GameManager.flags.pickedCharacterObject = null;
      if (GameManager.flags.pickedCharacterElement !== null) {
        GameManager.flags.pickedCharacterElement.remove();
      }
      GameManager.flags.pickedCharacterElement = null;
      return GameManager.switchTempAll();
    }

  };

  CharacterPalletManager.ID = 'character_pallet';

  CharacterPalletManager.SIZE_X = 400;

  CharacterPalletManager.SIZE_Y = 600;

  CharacterPalletManager.characters = [];

  CharacterPalletManager.panels = [];

  return CharacterPalletManager;

}).call(this);

EnemyBase = class EnemyBase extends ObjectBase {
  constructor(params) {
    super(ObjectBase.OBJECT_TYPE.ENEMY);
    // 現在のレベル
    this.level = params.level;
    // 現在のHP
    this.hp = params.hp;
    // 出撃中であるか
    this.inField = params.inField;
    // 行動済みであるか
    this.moved = params.moved;
  }

  getId() {
    return this.constructor.characterId;
  }

  getName() {
    return this.constructor.characterName;
  }

  isInField() {
    return this.inField;
  }

  setInField(isInField) {
    this.inField = !!isInField;
    return CharacterPalletManager.redraw(this);
  }

  isMoved() {
    return this.moved;
  }

  setMoved(bool) {
    return this.moved = !!bool;
  }

};

Enemy1Base = (function() {
  class Enemy1Base extends EnemyBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Enemy1Base.characterId = 1;

  // キャラ名
  Enemy1Base.characterName = "きゃんきゃん";

  // 画像のリスト
  Enemy1Base.images = ["./img/enemy/1/1005010301_001.png", "./img/enemy/1/1005010301_003.png"];

  // 基本攻撃タイプ
  Enemy1Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Enemy1Base.attackBase = 18;

  // 成長率：HP
  Enemy1Base.hpBase = 3;

  // 成長率：物理防御
  Enemy1Base.pDefBase = 1;

  // 成長率：魔法防御
  Enemy1Base.mDefBase = 3;

  // 基本移動力
  Enemy1Base.moveBase = 4;

  // 基本射程
  Enemy1Base.rangeBase = 1;

  // 基本命中率
  Enemy1Base.hitRateBase = 95;

  // 基本回避率
  Enemy1Base.dodgeRateBase = 10;

  // 出現階層
  Enemy1Base.appearance = 1;

  // 経験値係数
  Enemy1Base.expRate = 2;

  Enemy1Base.abilityName = "なし";

  Enemy1Base.abilityDesc = "なし";

  return Enemy1Base;

}).call(this);

Enemy2Base = (function() {
  class Enemy2Base extends EnemyBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Enemy2Base.characterId = 2;

  // キャラ名
  Enemy2Base.characterName = "ミートボール";

  // 画像のリスト
  Enemy2Base.images = ["./img/enemy/2/1036010301_001.png", "./img/enemy/2/1036010301_003.png"];

  // 基本攻撃タイプ
  Enemy2Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Enemy2Base.attackBase = 17;

  // 成長率：HP
  Enemy2Base.hpBase = 2;

  // 成長率：物理防御
  Enemy2Base.pDefBase = 1;

  // 成長率：魔法防御
  Enemy2Base.mDefBase = 3;

  // 基本移動力
  Enemy2Base.moveBase = 4;

  // 基本射程
  Enemy2Base.rangeBase = 1;

  // 基本命中率
  Enemy2Base.hitRateBase = 95;

  // 基本回避率
  Enemy2Base.dodgeRateBase = 10;

  // 出現階層
  Enemy2Base.appearance = 1;

  // 経験値係数
  Enemy2Base.expRate = 2;

  Enemy2Base.abilityName = "なし";

  Enemy2Base.abilityDesc = "なし";

  return Enemy2Base;

}).call(this);

Enemy3Base = (function() {
  class Enemy3Base extends EnemyBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Enemy3Base.characterId = 3;

  // キャラ名
  Enemy3Base.characterName = "ピクシーFOX";

  // 画像のリスト
  Enemy3Base.images = ["./img/enemy/3/1082010301_001.png", "./img/enemy/3/1082010301_003.png"];

  // 基本攻撃タイプ
  Enemy3Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Enemy3Base.attackBase = 18;

  // 成長率：HP
  Enemy3Base.hpBase = 3;

  // 成長率：物理防御
  Enemy3Base.pDefBase = 6;

  // 成長率：魔法防御
  Enemy3Base.mDefBase = 4;

  // 基本移動力
  Enemy3Base.moveBase = 4;

  // 基本射程
  Enemy3Base.rangeBase = 1;

  // 基本命中率
  Enemy3Base.hitRateBase = 95;

  // 基本回避率
  Enemy3Base.dodgeRateBase = 10;

  // 出現階層
  Enemy3Base.appearance = 1;

  // 経験値係数
  Enemy3Base.expRate = 2;

  Enemy3Base.abilityName = "なし";

  Enemy3Base.abilityDesc = "なし";

  return Enemy3Base;

}).call(this);

Enemy4Base = (function() {
  class Enemy4Base extends EnemyBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Enemy4Base.characterId = 4;

  // キャラ名
  Enemy4Base.characterName = "マジスコ";

  // 画像のリスト
  Enemy4Base.images = ["./img/enemy/4/1084010301_001.png", "./img/enemy/4/1084010301_003.png"];

  // 基本攻撃タイプ
  Enemy4Base.attackTypeBase = ObjectBase.ATTACK_TYPE.MAGIC;

  // 成長率：攻撃力
  Enemy4Base.attackBase = 19;

  // 成長率：HP
  Enemy4Base.hpBase = 3;

  // 成長率：物理防御
  Enemy4Base.pDefBase = 7;

  // 成長率：魔法防御
  Enemy4Base.mDefBase = 4;

  // 基本移動力
  Enemy4Base.moveBase = 3;

  // 基本射程
  Enemy4Base.rangeBase = 4;

  // 基本命中率
  Enemy4Base.hitRateBase = 95;

  // 基本回避率
  Enemy4Base.dodgeRateBase = 10;

  // 出現階層
  Enemy4Base.appearance = 1;

  // 経験値係数
  Enemy4Base.expRate = 2;

  Enemy4Base.abilityName = "なし";

  Enemy4Base.abilityDesc = "なし";

  return Enemy4Base;

}).call(this);

Enemy5Base = (function() {
  class Enemy5Base extends EnemyBase {
    constructor(params) {
      super(params);
    }

  };

  // ID
  Enemy5Base.characterId = 5;

  // キャラ名
  Enemy5Base.characterName = "ばくだんいわ";

  // 画像のリスト
  Enemy5Base.images = ["./img/enemy/5/1.png"];

  // 基本攻撃タイプ
  Enemy5Base.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  Enemy5Base.attackBase = 0;

  // 成長率：HP
  Enemy5Base.hpBase = 3;

  // 成長率：物理防御
  Enemy5Base.pDefBase = 8;

  // 成長率：魔法防御
  Enemy5Base.mDefBase = 8;

  // 基本移動力
  Enemy5Base.moveBase = 0;

  // 基本射程
  Enemy5Base.rangeBase = 0;

  // 基本命中率
  Enemy5Base.hitRateBase = 95;

  // 基本回避率
  Enemy5Base.dodgeRateBase = 10;

  // 出現階層
  Enemy5Base.appearance = 1;

  // 経験値係数
  Enemy5Base.expRate = 2;

  Enemy5Base.abilityName = "なし";

  Enemy5Base.abilityDesc = "なし";

  return Enemy5Base;

}).call(this);

// きゃんきゃん
Enemy1 = class Enemy1 extends Enemy1Base {
  constructor(params) {
    super(params);
  }

};

// ミートボール
Enemy2 = class Enemy2 extends Enemy2Base {
  constructor(params) {
    super(params);
  }

};

// ピクシーFOX
Enemy3 = class Enemy3 extends Enemy3Base {
  constructor(params) {
    super(params);
  }

};

// マジスコ
Enemy4 = class Enemy4 extends Enemy4Base {
  constructor(params) {
    super(params);
  }

};

// ばくだんいわ
Enemy5 = class Enemy5 extends Enemy5Base {
  constructor(params) {
    super(params);
  }

};

window.EnemyList = {
  "1": Enemy1,
  "2": Enemy2,
  "3": Enemy3,
  "4": Enemy4,
  "5": Enemy5
};

EnvManager = (function() {
  class EnvManager {
    static init(parentElement) {
      this.parentElement = parentElement;
      this.divObject = $('<div>').attr('id', this.ID).css({
        width: this.SIZE_X,
        height: this.SIZE_Y
      });
      this.lifeObject = $('<div>').css({
        left: 0,
        top: 2,
        height: 35,
        width: this.SIZE_X - 10
      }).appendTo(this.divObject);
      this.expObject = $('<div>').css({
        left: 0,
        top: 40,
        height: 35,
        width: this.SIZE_X - 10
      }).appendTo(this.divObject);
      this.floorObject = $('<div>').css({
        left: 0,
        top: 77,
        height: 35,
        width: this.SIZE_X - 10
      }).appendTo(this.divObject);
      this.draw();
      return this.divObject.appendTo(this.parentElement);
    }

    static draw() {
      this.lifeObject.html('&#9829;' + this.life);
      this.expObject.html('EXP:' + this.exp);
      return this.floorObject.html('' + this.floor + '階');
    }

    static increaseExp(amount) {
      if (amount < 1) {
        return false;
      }
      this.exp += amount;
      this.draw();
      return this.exp;
    }

    static decreaseExp(amount) {
      if (amount < 1) {
        return false;
      }
      if (this.exp < amount) {
        return false;
      }
      this.exp -= amount;
      this.draw();
      return this.exp;
    }

    static getExp() {
      return this.exp;
    }

    static setExp(exp) {
      if (exp < 0) {
        return false;
      }
      this.exp = exp;
      this.draw();
      return this.exp;
    }

    static increaseFloor(amount = 1) {
      if (amount < 1) {
        return false;
      }
      this.floor += amount;
      this.draw();
      return this.floor;
    }

    static decreaseFloor(amount) {
      if (amount < 1) {
        return false;
      }
      if (this.floor - amount < 1) {
        return false;
      }
      this.floor -= amount;
      if (this.floor < 1) {
        this.floor = 1;
      }
      this.draw();
      return this.floor;
    }

    static getFloor() {
      return this.floor;
    }

    static setFloor(floor) {
      if (floor < 1) {
        return false;
      }
      this.floor = floor;
      this.draw();
      return this.floor;
    }

    static increaseLife(amount = 1) {
      if (amount < 1) {
        return false;
      }
      this.life += amount;
      this.draw();
      return this.life;
    }

    static decreaseLife(amount = 1) {
      if (amount < 1) {
        return false;
      }
      if (this.life < amount) {
        return false;
      }
      this.life -= amount;
      if (this.life < 0) {
        this.life = 0;
      }
      this.draw();
      return this.life;
    }

    static getLife() {
      return this.life;
    }

    static setLife(life) {
      if (life < 0) {
        return false;
      }
      this.life = life;
      this.draw();
      return this.life;
    }

  };

  EnvManager.ID = 'env';

  EnvManager.SIZE_X = 200;

  EnvManager.SIZE_Y = 120;

  EnvManager.exp = 0;

  EnvManager.floor = 1;

  EnvManager.life = 5;

  return EnvManager;

}).call(this);

FieldManager = (function() {
  class FieldManager {
    static init(parentElement) {
      var j, l, o, ref, ref1, ref2, x, y;
      this.parentElement = parentElement;
      this.SIZE_X = this.CELL_X * Cell.SIZE_X + this.BORDER_SIZE * (this.CELL_X + 1);
      this.SIZE_Y = this.CELL_Y * Cell.SIZE_Y + this.BORDER_SIZE * (this.CELL_Y + 1) + 50;
      // 見える領域を制限するためにしかたなく置いた親エレメント
      this.visibleObject = $('<div>').attr('id', 'field_visible').css({
        width: this.CELL_X * Cell.SIZE_X + this.BORDER_SIZE * (this.CELL_X + 1),
        height: this.CELL_Y * Cell.SIZE_Y + this.BORDER_SIZE * (this.CELL_Y + 1) + 50
      }).appendTo(this.parentElement);
      this.divObject = $('<div>').attr('id', this.ID).css({
        width: this.CELL_X * Cell.SIZE_X + this.BORDER_SIZE * (this.CELL_X + 1),
        height: this.CELL_Y * Cell.SIZE_Y + this.BORDER_SIZE * (this.CELL_Y + 1)
      }).appendTo(this.visibleObject);
      
      // フィールド初期化
      this.cells = [];
      for (x = j = 0, ref = this.CELL_X; (0 <= ref ? j < ref : j > ref); x = 0 <= ref ? ++j : --j) {
        this.cells[x] = [];
        for (y = l = 0, ref1 = this.CELL_Y; (0 <= ref1 ? l < ref1 : l > ref1); y = 0 <= ref1 ? ++l : --l) {
          this.cells[x][y] = new Cell(this.divObject, x, y, this.BORDER_SIZE);
        }
      }
      // 次の列
      this.nextField = [];
      for (y = o = 0, ref2 = this.CELL_Y; (0 <= ref2 ? o < ref2 : o > ref2); y = 0 <= ref2 ? ++o : --o) {
        this.nextField[y] = null;
      }
      // アニメーションスタート
      return this.startCellAnimation();
    }

    // このキャラオブジェクトに該当する仮置きを全削除
    static removeAllTempObject(characterObject) {
      if (characterObject === null) {
        return;
      }
      return $.each(this.cells, function() {
        return $.each(this, function() {
          if (this.tempObject !== null && this.tempObject.isCharacterObject() && this.tempObject.getId() === characterObject.getId()) {
            // 出撃中を解除
            this.tempObject.setInField(false);
            // 仮オブジェクトを削除
            this.tempObject = null;
            // セルの再描画
            return this.draw();
          }
        });
      });
    }

    static removeAllWayStack() {
      return $.each(this.cells, function() {
        return $.each(this, function() {
          return this.wayStack = null;
        });
      });
    }

    static removeAllKnockout() {
      return $.each(this.cells, function() {
        return $.each(this, function() {
          return this.knockout = null;
        });
      });
    }

    static resetAllMoved() {
      return $.each(this.cells, function() {
        return $.each(this, function() {
          if (this.object !== null && (this.object.isCharacterObject() || this.object.isEnemyObject())) {
            this.object.setMoved(false);
          }
          return true;
        });
      });
    }

    static drawMovable() {
      return $.each(this.cells, function() {
        return $.each(this, function() {
          return this.drawMovable();
        });
      });
    }

    static drawKnockout() {
      return $.each(this.cells, function() {
        return $.each(this, function() {
          return this.drawKnockout();
        });
      });
    }

    static drawFin() {
      return $.each(this.cells, function() {
        return $.each(this, function() {
          return this.drawFin();
        });
      });
    }

    static show() {
      return $(this.divObject).removeClass('no_display');
    }

    static hide() {
      return $(this.divObject).addClass('no_display');
    }

    static startCellAnimation() {
      FieldManager.stopObjectAnimation();
      return FieldManager.cellAnimationTimer = setInterval(() => {
        if (!GameManager.flags.isCellObjectAnimation) {
          return;
        }
        return $.each(FieldManager.cells, function() {
          return $.each(this, function() {
            return this.stepObjectAnimation();
          });
        });
      }, Cell.OBJECT_ANIMATION_MSEC);
    }

    static stopObjectAnimation() {
      if (FieldManager.cellAnimationTimer !== false) {
        return clearInterval(FieldManager.cellAnimationTimer);
      }
    }

    static async moveObject(startCell, endCell) {
      var charaObject, finish, nextCell, prevCell, wayStack;
      GameManager.changeControllable(false);
      // 移動しないのですぐ返る
      if (startCell === endCell) {
        return;
      }
      wayStack = endCell.wayStack;
      // 全wayStack削除、再描画
      FieldManager.removeAllWayStack();
      FieldManager.removeAllKnockout();
      FieldManager.drawMovable();
      FieldManager.drawKnockout();
      charaObject = startCell.object;
      finish = (startCell, endCell) => {
        var attackableCell, attackables, j, len;
        GameManager.flags.movePickCell = null;
        GameManager.flags.moveToCell = [startCell, endCell];
        
        // 攻撃できるセル
        attackables = FieldManager.getAttackableCellsByCell(endCell);
        // 攻撃できるセルがないなら終了
        if (attackables.length === 0) {
          GameManager.flags.waitAttackCell = null;
          if (endCell.object === null) {
            console.log(endCell);
          }
          endCell.object.setMoved(true);
        } else {
          // あるなら攻撃選択待ちに
          GameManager.flags.waitAttackCell = endCell;
          for (j = 0, len = attackables.length; j < len; j++) {
            attackableCell = attackables[j];
            attackableCell.knockout = endCell;
          }
          FieldManager.drawKnockout();
        }
        // 移動選択を解除
        GameManager.flags.movePickCell = null;
        return endCell.draw();
      };
      prevCell = startCell;
      while (wayStack.length > 0) {
        nextCell = wayStack.shift();
        prevCell.setObject(null);
        nextCell.setObject(charaObject);
        prevCell.draw();
        nextCell.draw();
        await Utl.sleep(FieldManager.MOVE_SPEED);
        prevCell = nextCell;
      }
      return finish(startCell, endCell);
    }

    // 指定したセルにいるオブジェクトから攻撃することができるセルを返す
    static getAttackableCellsByCell(cell) {
      return this.getAttackableCells(cell.object, cell.xIndex, cell.yIndex);
    }

    static getAttackableCells(object, x, y) {
      var body, dist, j, l, len, len1, ref, res, targetCell, targetType, xIndex, yIndex;
      
      // 何もない
      // キャラクター
      // 敵キャラクター 
      targetType = object === null ? [] : object.isCharacterObject() ? [ObjectBase.OBJECT_TYPE.ENEMY] : object.isEnemyObject() ? [ObjectBase.OBJECT_TYPE.CHARACTER] : [];
      // 対象のタイプがないんじゃ攻撃対象もない
      if (targetType.length <= 0) {
        return [];
      }
      res = [];
      ref = this.cells;
      for (xIndex = j = 0, len = ref.length; j < len; xIndex = ++j) {
        body = ref[xIndex];
        for (yIndex = l = 0, len1 = body.length; l < len1; yIndex = ++l) {
          targetCell = body[yIndex];
          dist = Math.abs(x - targetCell.xIndex) + Math.abs(y - targetCell.yIndex);
          // 攻撃可能
          if (dist <= object.getRange()) {
            // ターゲットである
            if (targetCell.object !== null && Utl.inArray(targetCell.object.getObjectType(), targetType)) {
              res.push(targetCell);
            }
          }
        }
      }
      return res;
    }

    static getMovableMap(cell) {
      var allCellChecked, body, j, l, len, len1, len2, loopCount, movableMap, o, ref, ref1, ref2, wayStack, x, xPlus, y, yPlus;
      movableMap = Utl.array2dFill(this.CELL_X, this.CELL_Y, null);
      movableMap[cell.xIndex][cell.yIndex] = [];
      // セルの数以上の移動距離はありえないので上限を設定
      loopCount = 0;
      while (!allCellChecked && (loopCount <= this.CELL_X * this.CELL_Y)) {
        loopCount++;
        //Utl.dumpNumArray2d movableMap
        allCellChecked = true;
        for (x = j = 0, len = movableMap.length; j < len; x = ++j) {
          body = movableMap[x];
          for (y = l = 0, len1 = body.length; l < len1; y = ++l) {
            wayStack = body[y];
            // まだ未調査のマス
            if (wayStack === null) {
              // 進入不可でないなら、未調査であっては終われない
              if (this.cells[x][y].isEnterable()) {
                allCellChecked = false;
              }
            } else {
              ref = [[-1, 0], [1, 0], [0, -1], [0, 1]];
              // 調査済みのマス
              for (o = 0, len2 = ref.length; o < len2; o++) {
                [xPlus, yPlus] = ref[o];
                if (!((0 <= (ref1 = x + xPlus) && ref1 < this.cells.length))) {
                  // 調査する
                  continue;
                }
                if (!((0 <= (ref2 = y + yPlus) && ref2 < this.cells[0].length))) {
                  continue;
                }
                if (FieldManager.cells[x + xPlus][y + yPlus].isEnterable() && (movableMap[x + xPlus][y + yPlus] === null || wayStack.length + 1 < movableMap[x + xPlus][y + yPlus].length)) {
                  movableMap[x + xPlus][y + yPlus] = wayStack.concat([this.cells[x + xPlus][y + yPlus]]);
                }
              }
            }
          }
        }
      }
      return movableMap;
    }

    static async randomEnemyAppear() {
      var c, cnt, enemyAmount, j, l, putEnemy, ref, targetCells;
      // 一時的にアニメーションしないようにする
      GameManager.flags.isCellObjectAnimation = false;
      enemyAmount = Utl.gacha([[0, 10], [1, 20], [2, 50], [3, 20], [4, 20], [5, 10], [6, 10]]);
      putEnemy = (enemyObject) => {
        var cell, emptyCells, j, l, len, ref, ref1, ref2, targetCell, x;
        if (enemyObject === null) {
          return false;
        }
        // 空いてるセルを探す
        emptyCells = [];
        for (x = j = ref = this.cells.length - this.ENEMY_APPEAR_WIDTH, ref1 = this.cells.length; (ref <= ref1 ? j < ref1 : j > ref1); x = ref <= ref1 ? ++j : --j) {
          ref2 = this.cells[x];
          for (l = 0, len = ref2.length; l < len; l++) {
            cell = ref2[l];
            if (cell.object === null) {
              emptyCells.push(cell);
            }
          }
        }
        if (emptyCells.length <= 0) {
          return false;
        }
        targetCell = Utl.shuffle(emptyCells).pop();
        targetCell.setObject(enemyObject);
        return targetCell;
      };
      targetCells = [];
      for (cnt = j = 0, ref = enemyAmount; (0 <= ref ? j < ref : j > ref); cnt = 0 <= ref ? ++j : --j) {
        c = putEnemy(GameManager.getEnemyObject());
        if (c !== false) {
          targetCells.push(c);
        }
      }
      // 敵が出たならアニメーション待ち
      if (targetCells.length > 0) {
        for (cnt = l = 0; l < 5; cnt = ++l) {
          $.each(targetCells, function() {
            return this.hideObject();
          });
          await Utl.sleep(50);
          $.each(targetCells, function() {
            return this.showObject();
          });
          await Utl.sleep(50);
        }
      }
      // アニメーション復活
      Utl.sleep(100);
      GameManager.flags.isCellObjectAnimation = true;
      return true;
    }

    // 全キャラを見ていって、やられていたら台詞を言わせながら戻す
    static async checkDeath() {
      var body, c, j, len, noExistDeath, ref, results;
      noExistDeath = true;
      ref = FieldManager.cells;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        body = ref[j];
        results.push((await (async function() {
          var l, len1, results1;
          results1 = [];
          for (l = 0, len1 = body.length; l < len1; l++) {
            c = body[l];
            // 死んでる
            if (c.object !== null && c.object.getHp() <= 0) {
              // 死んでるのがキャラクターなら
              if (c.object.isCharacterObject()) {
                await c.showPopover(c.object.getTextOnDeath(), 2000);
              // 死んでるのが敵キャラなら
              } else if (c.object.isEnemyObject()) {
                // 敵が死んだなら経験値加算
                EnvManager.increaseExp(c.object.getExp());
              }
              // オブジェクト消す
              c.object = null;
              // 再描画
              c.draw();
              // 別のキャラを走査
              results1.push(this.checkDeath());
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(FieldManager)));
      }
      return results;
    }

    // 次の列を生成する
    static generateNextField() {
      var GACHA_ORDER, cell, j, nextField, ref, yIndex;
      GACHA_ORDER = [
        [
          'ENEMY',
          100 // ランダムな敵
        ],
        [
          'EMPTY',
          100 // 空っぽ
        ]
      ];
      nextField = [];
      for (yIndex = j = 0, ref = this.CELL_Y; (0 <= ref ? j < ref : j > ref); yIndex = 0 <= ref ? ++j : --j) {
        cell = new Cell(this.divObject, this.CELL_X, yIndex, this.BORDER_SIZE);
        switch (Utl.gacha(GACHA_ORDER)) {
          case 'ENEMY':
            cell.object = GameManager.getEnemyObject(EnvManager.getFloor() + 1);
            break;
          case 'EMPTY':
        }
        nextField.push(cell);
        cell.draw();
      }
      return nextField;
    }

  };

  FieldManager.ID = 'field';

  FieldManager.CELL_X = 18;

  FieldManager.CELL_Y = 8;

  FieldManager.BORDER_SIZE = 1;

  // キャラが移動する時のmsec/マス
  FieldManager.MOVE_SPEED = 50;

  // 敵が湧くのは右から何マスか
  FieldManager.ENEMY_APPEAR_WIDTH = 5;

  FieldManager.divObject = null;

  FieldManager.cells = [];

  FieldManager.cellAnimationTimer = false;

  return FieldManager;

}).call(this);

GameManager = (function() {
  class GameManager {
    static onMouseMiddleDown(evt) {
      if (!this.isControllable()) {
        return;
      }
      return true;
    }

    static onMouseMiddleUp(evt) {
      if (!this.isControllable()) {
        return;
      }
      return true;
    }

    static onMouseRightDown(evt) {
      if (!this.isControllable()) {
        return;
      }
      return true;
    }

    static onMouseRightUp(evt) {
      if (!this.isControllable()) {
        return;
      }
      return true;
    }

    static onMouseLeftDown(evt) {
      if (!this.isControllable()) {
        return;
      }
      return true;
    }

    static onMouseLeftUp(evt) {
      if (!this.isControllable()) {
        return;
      }
      console.log('game mouseup');
      // 出撃選択を解除
      if (this.flags.pickedCharacterObject !== null) {
        this.flags.pickedCharacterObject = null;
      }
      if (this.flags.pickedCharacterElement !== null) {
        this.flags.pickedCharacterElement.remove();
        this.flags.pickedCharacterElement = null;
      }
      return true;
    }

    static onMouseLeave(evt) {
      if (!this.isControllable()) {
        return;
      }
      return true;
    }

    static onMouseMove(evt) {
      if (!this.isControllable()) {
        return;
      }
      // マウスの位置は常に記録
      [this.mousePos.x, this.mousePos.y] = Utl.e2localPos(evt);
      // キャラクター出撃モードで、キャラクターがピックされている場合
      if (this.flags.pickedCharacterElement !== null) {
        this.followPickedCharacterElement(evt);
      }
      return true;
    }

    // キャラクターの絵をマウスに追随させる
    static followPickedCharacterElement(evt) {
      // キャラクター出撃モードで、キャラクターがピックされている場合
      if (this.flags.pickedCharacterElement !== null) {
        // そのキャラクターの絵をマウスに追随させる
        return this.flags.pickedCharacterElement.css({
          left: this.mousePos.x - 90 / 2,
          top: this.mousePos.y - 90 / 2
        }).removeClass('no_display');
      }
    }

    // 戦闘に移行
    static doBattle(isSoon = false) {
      this.partsAnimation(this.POSITION.BATTLE, isSoon);
      // キャラクター設置を確定
      return CharacterPalletManager.onExit();
    }

    // キャラクター出撃に移行
    static doCharacterPick(isSoon = false) {
      return this.partsAnimation(this.POSITION.CHARACTER_PICK, isSoon);
    }

    
    // ターン終了
    static async doTurnEnd(isSoon = false) {
      // 動ける敵がいる限り動かす
      while ((await this.enemyMove())) {}
      this.flags.isWalkInThisTurn = false;
      // コントロール可能に
      return this.changeControllable(true);
    }

    // レベルアップ
    static doLevelup(isSoon = false) {
      this.partsAnimation(this.POSITION.LEVELUP, isSoon);
      // キャラクター設置を確定
      CharacterPalletManager.onExit();
      return this.flags.isCellObjectAnimation = false;
    }

    // アイテム画面
    static doItem(isSoon = false) {
      this.partsAnimation(this.POSITION.ITEM, isSoon);
      // キャラクター設置を確定
      CharacterPalletManager.onExit();
      // コントロールを戻す
      return this.changeControllable(true);
    }

    static partsAnimation(ary, isSoon = false) {
      var animationMsec, id, pos;
      // 操作不能にする
      this.changeControllable(false);
      animationMsec = isSoon ? 0 : this.ANIMATION_MSEC;
// アニメーション登録
      for (id in ary) {
        pos = ary[id];
        // 消す
        if (pos === null) {
          $('#' + id).fadeOut(animationMsec);
        } else {
          // 表す
          $('#' + id).animate({
            left: pos[0],
            top: pos[1]
          }, animationMsec).fadeIn(animationMsec);
        }
      }
      // 指定時間後に操作可能
      Utl.sleep(animationMsec);
      return this.changeControllable(true);
    }

    // 初期化
    static init() {
      // 右クリック禁止
      $(document).on('contextmenu', function() {
        return !GameManager.DEBUG_CONFIG.DISABLE_RIGHT_CLICK_MENU;
      });
      this.gameElement = $('<div>').attr('id', this.ID).on('mousemove', this.onMouseMove.bind(this)).on('mouseup', (evt) => {
        switch (evt.which) {
          case 1:
            return this.onMouseLeftUp.bind(this)(evt);
          case 2:
            return this.onMouseMiddleUp.bind(this)(evt);
          case 3:
            return this.onMouseRightUp.bind(this)(evt);
        }
      }).on('mousedown', (evt) => {
        switch (evt.which) {
          case 1:
            return this.onMouseLeftDown.bind(this)(evt);
          case 2:
            return this.onMouseMiddleDown.bind(this)(evt);
          case 3:
            return this.onMouseRightDown.bind(this)(evt);
        }
      }).on('mouseleave', this.onMouseLeave.bind(this));
      this.initField(null);
      this.initEnv(null);
      this.initMenu(null);
      this.initPanels(null);
      this.initCharacters(null);
      this.initLevelup(null);
      this.initEnemys(null);
      this.initItems(null);
      this.initBattleResult(null);
      this.gameElement.appendTo('body');
      // 戦闘モードにする
      GameManager.resetFlags();
      GameManager.isMode.battle = true;
      GameManager.isEnable.characterPick = true;
      GameManager.isEnable.levelup = true;
      GameManager.isEnable.battle = true;
      GameManager.isEnable.turnEnd = true;
      GameManager.isEnable.walk = true;
      GameManager.isEnable.undo = true;
      GameManager.isEnable.item = true;
      GameManager.isEnable.leftPanel = true;
      GameManager.isEnable.rightPanel = true;
      GameManager.flags.isCellObjectAnimation = true;
      return this.doBattle(true);
    }

    static initMenu(savedata) {
      if (this.initialized.menu) {
        return;
      }
      this.initialized.menu = true;
      return MenuManager.init(this.gameElement);
    }

    static initField(savedata) {
      if (this.initialized.field) {
        return;
      }
      this.initialized.field = true;
      return FieldManager.init(this.gameElement);
    }

    static initEnv(savedata) {
      if (this.initialized.env) {
        return;
      }
      this.initialized.env = true;
      EnvManager.init(this.gameElement);
      // デバッグ
      EnvManager.setLife(5);
      EnvManager.setExp((this.DEBUG_CONFIG.startExp === false ? 0 : this.DEBUG_CONFIG.START_EXP));
      return EnvManager.setFloor(1);
    }

    static initPanels(savedata) {
      if (this.initialized.panels) {
        return;
      }
      this.initialized.panels = true;
      LeftInfoManager.init(this.gameElement);
      return RightInfoManager.init(this.gameElement);
    }

    static initLevelup(savedata) {
      if (this.initialized.levelup) {
        return;
      }
      this.initialized.levelup = true;
      LevelupManager.init(this.gameElement);
      return LevelupManager.draw();
    }

    static initBattleResult(savedata) {
      if (this.initialized.battleResult) {
        return;
      }
      this.initialized.battleResult = true;
      return BattleResultManager.init(this.gameElement);
    }

    // キャラ初期化
    static initCharacters(savedata) {
      var characterId, characterObject, className, params, ref, ref1;
      if (this.initialized.characters) {
        return;
      }
      this.initialized.characters = true;
      CharacterPalletManager.init(this.gameElement, 0, 50);
      this.characters = {};
      ref = window.CharacterList;
      for (characterId in ref) {
        className = ref[characterId];
        if ((savedata != null) && 'characters' in savedata && characterId in savedata.characters) {
          params = savedata.characters[characterId];
        } else {
          params = {
            joined: null,
            level: 1,
            hp: null,
            items: [],
            inField: false,
            moved: false
          };
        }
        this.characters[characterId] = new window.CharacterList[characterId](params);
      }
      ref1 = this.characters;
      for (characterId in ref1) {
        characterObject = ref1[characterId];
        CharacterPalletManager.addCharacter(characterObject);
      }
      return CharacterPalletManager.draw();
    }

    // キャラ初期化
    static initEnemys(savedata) {
      if (this.initialized.enemys) {
        return;
      }
      this.initialized.enemys = true;
      this.enemys = window.EnemyList;
      return window.EnemyList = void 0;
    }

    // アイテム初期化
    static initItems(savedata) {
      if (this.initialized.items) {
        return;
      }
      this.initialized.items = true;
      this.items = window.ItemList;
      window.ItemList = void 0;
      ItemManager.init(this.gameElement);
      return ItemManager.setItems(savedata);
    }

    static isControllable() {
      return this.flags.controllable;
    }

    static changeControllable(bool) {
      return this.flags.controllable = !!bool;
    }

    static switchTempAll() {
      return $.each(FieldManager.cells, function() {
        return $.each(this, function() {
          return this.switchTemp();
        });
      });
    }

    static movePick(cell) {
      var attackableCell, attackables, body, j, l, len, len1, len2, movableMap, o, ref, wayStack, x, y;
      FieldManager.removeAllWayStack();
      FieldManager.removeAllKnockout();
      // 移動可能モード
      this.flags.movePickCell = cell;
      // 攻撃可能モード
      this.flags.waitAttackCell = cell;
      movableMap = FieldManager.getMovableMap(cell);
// 移動可能判定
      for (x = j = 0, len = movableMap.length; j < len; x = ++j) {
        body = movableMap[x];
        for (y = l = 0, len1 = body.length; l < len1; y = ++l) {
          wayStack = body[y];
          if (wayStack !== null && (0 < (ref = wayStack.length) && ref <= cell.object.getMove())) {
            FieldManager.cells[x][y].setWayStack(wayStack);
          } else {
            FieldManager.cells[x][y].setWayStack(null);
          }
        }
      }
      // 攻撃可能判定
      attackables = FieldManager.getAttackableCellsByCell(cell);
      for (o = 0, len2 = attackables.length; o < len2; o++) {
        attackableCell = attackables[o];
        attackableCell.knockout = cell;
      }
      FieldManager.drawMovable();
      return FieldManager.drawKnockout();
    }

    // 敵が行動する
    static async enemyMove() {
      var _, acts, atkCell, atkObj, attackables, beatLevel, beatPossibility, c, damage, debugCount, def, ending, enemyCell, getAct, hp, j, l, len, len1, len2, level, mBody, movableMap, moveToCell, myAttack, myAttackType, o, q, r, ref, ref1, ref2, wayStack, x, xMove, y, yMove;
      debugCount = 0;
      this.changeControllable(false);
      // 戻すは不可能になる
      this.flags.moveToCell = null;
      // 全マスのwayStack解除
      FieldManager.removeAllWayStack();
      // 全マスの移動可能表示解除
      FieldManager.removeAllKnockout();
      // 全マスの再描画
      FieldManager.drawMovable();
      FieldManager.drawKnockout();
      // 終了時の処理
      ending = async() => {
        // パネルリセット
        LeftInfoManager.setObject(null);
        RightInfoManager.setObject(null);
        FieldManager.resetAllMoved();
        FieldManager.drawMovable();
        FieldManager.drawKnockout();
        FieldManager.drawFin();
        // 移動・攻撃・戻るモードを解除
        this.flags.movePickCell = null;
        this.flags.moveToCell = null;
        this.flags.waitAttackCell = null;
        // 敵を湧かせる
        await FieldManager.randomEnemyAppear();
        return false;
      };
      // 全マスから未行動の敵を探す
      enemyCell = null;
      enemysearch://;
      for (x = j = 0, ref = FieldManager.cells.length; (0 <= ref ? j < ref : j > ref); x = 0 <= ref ? ++j : --j) {
        for (y = l = 0, ref1 = FieldManager.cells[x].length; (0 <= ref1 ? l < ref1 : l > ref1); y = 0 <= ref1 ? ++l : --l) {
          c = FieldManager.cells[x][y];
          // 未行動の敵
          if (c.object !== null && c.object.isEnemyObject() && !c.object.isMoved()) {
            enemyCell = c;
            break enemysearch;
          }
        }
      }
      // 行動してない敵はいなかった
      if (enemyCell === null) {
        return ending();
      }
      //###################################################################
      // 全行動表

      // [0]評価構造体
      //   [life] 減らせるライフ
      //   [beatLevel]倒せるレベル
      //   [beatPossibility]倒せる可能性
      //   [damage]ダメージ量
      //   [xMove]移動後のx座標
      //   [moveAmount]移動距離
      // [1]移動先のセル
      // [2]攻撃対象(-1:自爆してフィールドライフを減らす)

      // ★優先度
      // ライフ減らせる＞
      // 確実に倒せる味方を倒せる（レベル高い順）＞
      // 倒せる可能性の高い味方を攻撃する（可能性順）＞
      // 与えるダメージが大きい味方に攻撃する（最高ダメージ順）＞
      // なるべく端に近づく（近い順）＞
      // 移動距離が長い
      //###################################################################
      getAct = function(params) {
        var rtn;
        rtn = {
          life: 0,
          beatLevel: 0,
          beatPossibility: -2e308,
          damage: 0,
          xMove: +2e308,
          moveAmount: +2e308
        };
        if ('life' in params) {
          rtn.life = params.life;
        }
        if ('beatLevel' in params) {
          rtn.beatLevel = params.beatLevel;
        }
        if ('beatPossibility' in params) {
          rtn.beatPossibility = params.beatPossibility;
        }
        if ('damage' in params) {
          rtn.damage = params.damage;
        }
        if ('xMove' in params) {
          rtn.xMove = params.xMove;
        }
        if ('moveAmount' in params) {
          rtn.moveAmount = params.moveAmount;
        }
        return rtn;
      };
      acts = [];
      
      // 移動できる場所
      movableMap = FieldManager.getMovableMap(enemyCell);
      
      // 攻撃側の攻撃タイプ
      myAttackType = enemyCell.object.getAttackType();
      
      // 攻撃側の攻撃力
      myAttack = enemyCell.object.getAttack();
      
      // すべての位置で攻撃可能な分岐をおこない、点数化する
      actsearch://;
      for (xMove = o = 0, len = movableMap.length; o < len; xMove = ++o) {
        mBody = movableMap[xMove];
        for (yMove = q = 0, len1 = mBody.length; q < len1; yMove = ++q) {
          wayStack = mBody[yMove];
          if (!(wayStack !== null && (0 <= (ref2 = wayStack.length) && ref2 <= enemyCell.object.getMove()))) {
            // 行けないので飛ばす
            continue;
          }
          // 行き先のセル
          moveToCell = FieldManager.cells[xMove][yMove];
          // 行き先にwayStackをセットしちゃう
          moveToCell.setWayStack(wayStack);
          // 端っこに到達して、なおまだ移動力がある場合
          if (xMove === 0 && (enemyCell.object.getMove() - wayStack.length) > 0) {
            // 突っ込む
            acts.push([
              getAct({
                life: 1,
                moveAmount: wayStack.length
              }),
              moveToCell,
              -1
            ]);
          }
          //`break actsearch`

          // ここでじっとするプランをまず入れる
          acts.push([
            getAct({
              xMove: xMove,
              moveAmount: wayStack.length
            }),
            moveToCell,
            null
          ]);
          // 攻撃可能な相手
          attackables = FieldManager.getAttackableCells(enemyCell.object, xMove, yMove);
          for (r = 0, len2 = attackables.length; r < len2; r++) {
            atkCell = attackables[r];
            atkObj = atkCell.object;
            // 防御側の防御力
            def = myAttackType === ObjectBase.ATTACK_TYPE.PHYSIC ? atkObj.getPDef() : atkObj.getMDef();
            // 防御側のHP
            hp = atkObj.getHp();
            // 防御側のレベル
            level = atkObj.getLevel();
            // 倒せる確率
            beatPossibility = ObjectBase.getKnockoutRate(hp, myAttack, def);
            // 与えられる最高ダメージ
            damage = ObjectBase.getDamageMax(myAttack, def);
            beatLevel = beatPossibility === +2e308 ? level : 0;
            acts.push([
              getAct({
                beatLevel: beatLevel,
                beatPossibility: beatPossibility,
                damage: damage,
                xMove: xMove,
                moveAmount: wayStack.length
              }),
              moveToCell,
              atkCell
            ]);
          }
        }
      }
      
      // 点数順にソートする
      acts.sort(function(aAry, bAry) {
        var a, b;
        a = aAry[0];
        b = bAry[0];
        if (a.life > b.life) {
          return -1;
        }
        if (a.life < b.life) {
          return 1;
        }
        if (a.beatLevel > b.beatLevel) {
          return -1;
        }
        if (a.beatLevel < b.beatLevel) {
          return 1;
        }
        if (a.beatPossibility > b.beatPossibility) {
          return -1;
        }
        if (a.beatPossibility < b.beatPossibility) {
          return 1;
        }
        if (a.damage > b.damage) {
          return -1;
        }
        if (a.damage < b.damage) {
          return 1;
        }
        if (a.xMove < b.xMove) {
          return -1;
        }
        if (a.xMove > b.xMove) {
          return 1;
        }
        if (a.moveAmount > b.moveAmount) {
          return -1;
        }
        if (a.moveAmount < b.moveAmount) {
          return 1;
        }
        return 0;
      });
      // 最高評価のものをおこなう
      [_, moveToCell, atkCell] = acts[0];
      // 移動
      await FieldManager.moveObject(enemyCell, moveToCell);
      // 攻撃しない
      if (atkCell === null) {
        moveToCell.object.setMoved(true);
        moveToCell.drawFin();
      // 自爆する
      } else if (atkCell === -1) {
        await this.terror(moveToCell);
      } else {
        // 攻撃する
        await this.attack(moveToCell, atkCell);
      }
      return this.enemyMove();
    }

    static async attack(attackerCell, defenderCell) {
      var attack, attackType, attacker, character, damage, def, defender, enemy, hp, hpBase, hpMax, hpTo, index, isCharacterOffence, j, leftObject, ref, rightObject, times;
      // それぞれのオブジェクト
      attacker = attackerCell.object;
      defender = defenderCell.object;
      // パネル用
      this.isEnable.leftObject = false;
      this.isEnable.rightObject = false;
      leftObject = attacker.isCharacterObject() ? attacker : defender;
      rightObject = attacker.isCharacterObject() ? defender : attacker;
      // 左に味方の情報
      LeftInfoManager.setObject(leftObject);
      // 右に敵の情報
      RightInfoManager.setObject(rightObject);
      // ターゲットマークを点滅させる
      times = 5;
      for (index = j = 0, ref = times; (0 <= ref ? j < ref : j > ref); index = 0 <= ref ? ++j : --j) {
        defenderCell.showAnimation('./img/target.png');
        await Utl.sleep(100);
        defenderCell.hideAnimation();
        await Utl.sleep(100);
      }
      await Utl.sleep(50);
      // 攻撃側の攻撃タイプ
      attackType = attacker.getAttackType();
      // 攻撃側の攻撃力
      attack = attacker.getAttack();
      // 防御側の防御力
      def = attackType === ObjectBase.ATTACK_TYPE.PHYSIC ? defender.getPDef() : defender.getMDef();
      // 防御側のHP
      hp = defender.getHp();
      // ダメージ
      damage = ObjectBase.getDamage(attack, def);
      // 攻撃アニメーション
      if (attacker.isCharacterObject()) {
        character = attacker;
        enemy = defender;
        isCharacterOffence = true;
      } else {
        character = defender;
        enemy = attacker;
        isCharacterOffence = false;
      }
      hpMax = defender.getHpMax();
      hpBase = defender.getHp();
      hpTo = defender.getHp() - damage;
      if (hpTo < 0) {
        hpTo = 0;
      }
      // アニメーションを待つ
      await BattleResultManager.animate(character, enemy, isCharacterOffence, hpMax, hpBase, hpTo);
      await Utl.sleep(100);
      // ダメージを与える
      defender.damage(damage);
      // 倒したキャラの台詞チェック
      await FieldManager.checkDeath();
      // 攻撃側を行動終了にする
      attacker.setMoved(true);
      // 再描画
      attackerCell.draw();
      defenderCell.draw();
      // 移動・攻撃対象を解除
      FieldManager.removeAllWayStack();
      FieldManager.removeAllKnockout();
      FieldManager.drawMovable();
      return FieldManager.drawKnockout();
    }

    // 自爆
    static terror(cell) {
      // ライフを1下げる
      EnvManager.decreaseLife();
      // 敵を消し去る
      cell.object = null;
      return cell.draw();
    }

    // 指定した階層で出得る敵を一体返す
    static getEnemyObject(level = EnvManager.getFloor()) {
      var enemyClass, id, ids, ref, targetId;
      ids = [];
      ref = GameManager.enemys;
      for (id in ref) {
        enemyClass = ref[id];
        if (enemyClass.appearance <= level) {
          ids.push(id);
        }
      }
      if (ids.length <= 0) {
        return null;
      }
      targetId = Utl.shuffle(ids).pop();
      return new GameManager.enemys[targetId]({
        level: level,
        hp: null,
        inField: true,
        moved: false
      });
    }

    // 階層をひとつ進める
    static async doWalk() {
      var cell, j, l, len, nextField, o, q, r, ref, ref1, ref2, ref3, ref4, x, y;
      this.changeControllable(false);
      // 既にこのターン進んでいた場合
      if (this.flags.isWalkInThisTurn) {
        window.alert('このターンは既に階層を進んだので、次のターンになるまで進めません');
        return this.changeControllable(true);
      }
      ref = FieldManager.cells[0];
      // 左端に味方がいるので進めない場合
      for (j = 0, len = ref.length; j < len; j++) {
        cell = ref[j];
        if (cell.object !== null && cell.object.isCharacterObject()) {
          window.alert('左端に味方がいるので進めません');
          return this.changeControllable(true);
        }
      }
      // 次の列を生んでおく
      nextField = FieldManager.generateNextField();
      // 全マスずらすアニメーション
      $.each(FieldManager.cells, function() {
        return $.each(this, function() {
          this.xIndex--;
          return this.elements.mother.animate({
            left: this.xIndex * this.constructor.SIZE_X + FieldManager.BORDER_SIZE * (this.xIndex + 1)
          }, 1000);
        });
      });
      $.each(nextField, function() {
        this.xIndex--;
        return this.elements.mother.animate({
          left: this.xIndex * this.constructor.SIZE_X + FieldManager.BORDER_SIZE * (this.xIndex + 1)
        }, 1000);
      });
      await Utl.sleep(1100);
// 左端のセルをぜんぶ消す
      for (y = l = 0, ref1 = FieldManager.cells[0].length; (0 <= ref1 ? l < ref1 : l > ref1); y = 0 <= ref1 ? ++l : --l) {
        FieldManager.cells[0][y].removeMe();
      }
// 既存のセルをいっこ左にずらす
      for (x = o = 1, ref2 = FieldManager.cells.length; (1 <= ref2 ? o < ref2 : o > ref2); x = 1 <= ref2 ? ++o : --o) {
        for (y = q = 0, ref3 = FieldManager.cells[x].length; (0 <= ref3 ? q < ref3 : q > ref3); y = 0 <= ref3 ? ++q : --q) {
          FieldManager.cells[x - 1][y] = FieldManager.cells[x][y];
        }
      }
// 右端に新規の列を追加する
      for (y = r = 0, ref4 = nextField.length; (0 <= ref4 ? r < ref4 : r > ref4); y = 0 <= ref4 ? ++r : --r) {
        FieldManager.cells[FieldManager.CELL_X - 1][y] = nextField[y];
      }
      // 階層インクリメント
      EnvManager.increaseFloor(1);
      // 階層進行制限
      this.flags.isWalkInThisTurn = true;
      // 移動やりなおし不可
      this.flags.moveToCell = null;
      return this.changeControllable(true);
    }

    static doUndo() {
      var nowCell, preCell;
      this.changeControllable(false);
      // 戻す
      [preCell, nowCell] = this.flags.moveToCell;
      preCell.object = nowCell.object;
      nowCell.object = null;
      // 行動終了を解除
      preCell.object.setMoved(false);
      // 戻せなくする
      this.flags.moveToCell = null;
      // 再描画
      preCell.draw();
      nowCell.draw();
      // コントロールを戻す
      return this.changeControllable(true);
    }

    static resetFlags() {
      var key, ref, ref1, results, val;
      ref = this.isEnable;
      for (key in ref) {
        val = ref[key];
        this.isEnable[key] = false;
      }
      ref1 = this.isMode;
      results = [];
      for (key in ref1) {
        val = ref1[key];
        results.push(this.isMode[key] = false);
      }
      return results;
    }

  };

  GameManager.DEBUG_CONFIG = {
    
    // 右クリックでメニューをでなくする
    DISABLE_RIGHT_CLICK_MENU: false,
    // 初期経験値
    START_EXP: 10000
  };

  GameManager.ID = 'game';

  GameManager.mousePos = {
    x: 0,
    y: 0
  };

  GameManager.gameElement = null;

  GameManager.characters = [];

  GameManager.enemys = [];

  GameManager.items = [];

  GameManager.initialized = {
    characters: false,
    field: false,
    menu: false,
    enemys: false,
    levelup: false,
    env: false,
    items: false
  };

  GameManager.isMode = {
    battle: false,
    characterPick: false,
    levelup: false,
    item: false
  };

  GameManager.isEnable = {
    battle: false,
    characterPick: false,
    levelup: false,
    turnEnd: false,
    walk: false,
    undo: false,
    leftPanel: false,
    rightPanel: false,
    item: false
  };

  GameManager.flags = {
    
    // 操作可能か
    controllable: true,
    // セルのオブジェクトのアニメーションを有効にするか
    isCellObjectAnimation: true,
    // キャラクター出撃をしている場合、現在ドラッグされているキャラクターオブジェクト
    pickedCharacterObject: null,
    // キャラクター出撃をしている場合、現在ドラッグされているキャラクターの要素
    pickedCharacterElement: null,
    // 戦闘モードでキャラクターを動かしている場合、現在対象になっているセル
    movePickCell: null,
    // 「元に戻す」で戻れるセルのオブジェクト
    // [0]元のセル [1]移動先のセル
    moveToCell: null,
    // 戦闘モードで攻撃待ちの場合、現在対象になっているセル
    waitAttackCell: null,
    // このターン、階層を進めたか
    isWalkInThisTurn: false
  };

  // アニメーション関係
  GameManager.POSITION = {
    BATTLE: {
      menu: [0, 0],
      character_pallet: null,
      field_visible: [0, 0],
      left_info: [200, 630],
      right_info: [600, 630],
      env: [0, 630],
      levelup: null,
      item: null
    },
    CHARACTER_PICK: {
      menu: [0, 0],
      character_pallet: [140, 50],
      field_visible: [0, 0],
      left_info: null,
      right_info: null,
      env: [0, 630],
      levelup: null,
      item: null
    },
    LEVELUP: {
      menu: [0, 0],
      character_pallet: null,
      field_visible: [0, 0],
      left_info: null,
      right_info: null,
      env: [0, 630],
      levelup: [0, 50],
      item: null
    },
    ITEM: {
      menu: [0, 0],
      character_pallet: null,
      field_visible: null,
      left_info: null,
      right_info: null,
      env: [0, 630],
      levelup: null,
      item: [0, 50]
    }
  };

  GameManager.ANIMATION_MSEC = 300;

  return GameManager;

}).call(this);

InfoManager = class InfoManager {
  static init(parentElement) {
    this.parentElement = parentElement;
    this.divObject = $('<div>').attr('id', this.ID).css({
      width: Panel.SIZE_X,
      height: Panel.SIZE_Y,
      "background-color": '#000000'
    }).appendTo(this.parentElement);
    return this.panel = new Panel(this.divObject, null);
  }

  static setObject(object = null) {
    this.panel.object = object;
    return this.panel.draw();
  }

  static show() {
    return this.divObject.addClass('no_display');
  }

  static hide() {
    return this.divObject.addClass('no_display');
  }

};

ItemCharacterPicker = (function() {
  class ItemCharacterPicker {
    static init(parentObject) {
      this.parentObject = parentObject;
      this.divObject = $('<div>').attr('id', this.ID);
      return this.divObject.appendTo(this.parentObject.divObject);
    }

    static draw() {
      var c, index, j, len, panel, ref, results, top;
      this.parentObject.characters.sort(function(a, b) {
        return Number(a.getId()) - Number(b.getId());
      });
      this.panels = [];
      $('#' + this.ID + ' > .panel').remove();
      ref = this.parentObject.characters;
      results = [];
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        c = ref[index];
        top = index * Panel.SIZE_Y;
        panel = new Panel(this.divObject, c, top);
        // キャラ選択パネルに、キャラ選択イベントを登録
        panel.divObject.on('click', this.onClick.bind(this, c));
        results.push(this.panels.push(panel));
      }
      return results;
    }

    static onClick(characterObject) {}

  };

  ItemCharacterPicker.ID = 'item_character_picker';

  return ItemCharacterPicker;

}).call(this);

ItemEditor = (function() {
  class ItemEditor {
    static init(parentObject) {
      this.parentObject = parentObject;
      this.divObject = $('<div>').attr('id', this.ID);
      return this.divObject.appendTo(this.parentObject.divObject);
    }

  };

  ItemEditor.ID = 'item_editor';

  return ItemEditor;

}).call(this);

ItemEquipmentEditor = (function() {
  class ItemEquipmentEditor {
    static init(parentObject) {
      this.parentObject = parentObject;
      this.divObject = $('<div>').attr('id', this.ID);
      return this.divObject.appendTo(this.parentObject.divObject);
    }

  };

  ItemEquipmentEditor.ID = 'item_equipment_editor';

  return ItemEquipmentEditor;

}).call(this);

window.itemList = {
  "1": {
    "displayOrder": "1",
    "name": "\u653b\u6483\u529b\u30a2\u30c3\u30d7",
    "description": "\u653b\u6483\u529b\u30a2\u30c3\u30d7",
    "cost": ["5", "4", "3", "2", "1"],
    "expense": ["100", "200", "300", "500"],
    "hpRate": null,
    "atkRate": "0.5",
    "pDefRate": null,
    "mDefRate": null,
    "costRate": null,
    "movePlus": null,
    "rangePlus": null,
    "hitPlus": null,
    "dodgePlus": null,
    "returnPlus": null
  },
  "2": {
    "displayOrder": "2",
    "name": "\u7269\u9632\u30a2\u30c3\u30d7",
    "description": "\u7269\u9632\u30a2\u30c3\u30d7",
    "cost": ["5", "4", "3", "2", "1"],
    "expense": ["100", "200", "300", "500"],
    "hpRate": null,
    "atkRate": null,
    "pDefRate": "0.5",
    "mDefRate": null,
    "costRate": null,
    "movePlus": null,
    "rangePlus": null,
    "hitPlus": null,
    "dodgePlus": null,
    "returnPlus": null
  },
  "3": {
    "displayOrder": "3",
    "name": "\u9b54\u9632\u30a2\u30c3\u30d7",
    "description": "\u9b54\u9632\u30a2\u30c3\u30d7",
    "cost": ["5", "4", "3", "2", "1"],
    "expense": ["100", "200", "300", "500"],
    "hpRate": null,
    "atkRate": null,
    "pDefRate": null,
    "mDefRate": "0.5",
    "costRate": null,
    "movePlus": null,
    "rangePlus": null,
    "hitPlus": null,
    "dodgePlus": null,
    "returnPlus": null
  },
  "4": {
    "displayOrder": "4",
    "name": "\u79fb\u52d5\u30a2\u30c3\u30d7",
    "description": "\u79fb\u52d5\u30a2\u30c3\u30d7",
    "cost": ["5", "4", "3", "2", "1"],
    "expense": ["100", "200", "300", "500"],
    "hpRate": null,
    "atkRate": null,
    "pDefRate": null,
    "mDefRate": null,
    "costRate": null,
    "movePlus": "1",
    "rangePlus": null,
    "hitPlus": null,
    "dodgePlus": null,
    "returnPlus": null
  },
  "5": {
    "displayOrder": "5",
    "name": "\u5c04\u7a0b\u30a2\u30c3\u30d7",
    "description": "\u5c04\u7a0b\u30a2\u30c3\u30d7",
    "cost": ["5", "4", "3", "2", "1"],
    "expense": ["100", "200", "300", "500"],
    "hpRate": null,
    "atkRate": null,
    "pDefRate": null,
    "mDefRate": null,
    "costRate": null,
    "movePlus": null,
    "rangePlus": "1",
    "hitPlus": null,
    "dodgePlus": null,
    "returnPlus": null
  }
};

ItemManager = (function() {
  class ItemManager {
    static init(gameElement) {
      var c, k, ref;
      this.gameElement = gameElement;
      this.divObject = $('<div>').attr('id', this.ID);
      // キャラを持つ
      this.characters = [];
      ref = GameManager.characters;
      for (k in ref) {
        c = ref[k];
        this.characters.push(c);
      }
      // アイテムのインスタンス
      this.items = {};
      ItemCharacterPicker.init(this);
      ItemEquipmentEditor.init(this.divObject);
      ItemEditor.init(this.divObject);
      return this.divObject.appendTo(this.gameElement);
    }

    static setItems(savedata) {
      var index, itemBody, itemId, ref, results;
      ref = GameManager.items;
      results = [];
      for (itemId in ref) {
        itemBody = ref[itemId];
        this.items[itemId] = new Item(itemId, itemBody);
        results.push((function() {
          var j, ref1, results1;
          results1 = [];
          for (index = j = 0, ref1 = itemBody[itemId]['cost']; (0 <= ref1 ? j < ref1 : j > ref1); index = 0 <= ref1 ? ++j : --j) {
            // セーブデータに持ってる数があればセット
            if (savedata !== null && itemId in savedata) {
              results1.push(this.items[itemId].setAmount(savedata[itemId][index]));
            } else {

            }
          }
          return results1;
        }).call(this));
      }
      return results;
    }

    // なければ0個
    static show() {
      return this.divObject.addClass('no_display');
    }

    static hide() {
      return this.divObject.addClass('no_display');
    }

  };

  ItemManager.ID = 'item';

  return ItemManager;

}).call(this);

LeftInfoManager = (function() {
  class LeftInfoManager extends InfoManager {};

  LeftInfoManager.ID = 'left_info';

  return LeftInfoManager;

}).call(this);

LevelupController = (function() {
  class LevelupController {
    constructor(parentLevelupPanel) {
      this.parentLevelupPanel = parentLevelupPanel;
      this.divObject = $('<div>').addClass(this.constructor.CLASSNAME).css({
        width: this.constructor.SIZE_X,
        height: this.constructor.SIZE_Y,
        top: this.constructor.POS_Y,
        left: this.constructor.POS_X,
        'background-color': '#ffffff'
      });
      this.input = $('<input>').attr({
        type: 'range',
        min: 1,
        max: this.parentLevelupPanel.object.getLevelUpMax(EnvManager.getExp()),
        step: 1
      }).addClass('levelup_range').css({
        width: '' + (this.constructor.SIZE_X - 20) + 'px'
      }).on('mousemove', this.onChange.bind(this)).val(1).appendTo(this.divObject);
      this.expLabel = $('<div>').addClass('levelup_exp_label').html('EXP').appendTo(this.divObject);
      this.expNum = $('<div>').addClass('levelup_exp').appendTo(this.divObject);
      this.levelButton = $('<button>').addClass('levelup_level_button').css({
        width: 200
      }).on('click', this.onLevelup.bind(this)).appendTo(this.divObject);
      this.onChange();
      this.divObject.appendTo(this.parentLevelupPanel.divObject);
    }

    onChange() {
      var levelup, neededExp;
      levelup = Number(this.input.val());
      neededExp = this.parentLevelupPanel.object.getNeededExp(levelup);
      this.levelButton.html(levelup + 'レベルUP');
      this.expNum.html(neededExp);
      // 経験値が足りないか、出撃中ならレベル上げれない
      if (EnvManager.getExp() < neededExp || this.parentLevelupPanel.object.isInField()) {
        this.levelButton.prop('disabled', true);
      } else {
        this.levelButton.prop('disabled', false);
      }
      return this.parentLevelupPanel.setLevel(levelup);
    }

    onLevelup() {
      var levelup, neededExp;
      GameManager.changeControllable(false);
      levelup = Number(this.input.val());
      neededExp = this.parentLevelupPanel.object.getNeededExp(levelup);
      // なんでか経験値足りてない
      if (EnvManager.decreaseExp(neededExp) === false) {
        return;
      }
      // レベルを上げる
      this.parentLevelupPanel.object.levelup(levelup);
      // 再描画
      LevelupManager.draw();
      CharacterPalletManager.draw();
      // 動かせるようにする
      return GameManager.changeControllable(true);
    }

  };

  LevelupController.CLASSNAME = 'levelup_controller';

  LevelupController.SIZE_X = 200;

  LevelupController.SIZE_Y = 120;

  LevelupController.POS_X = 400;

  LevelupController.POS_Y = 0;

  return LevelupController;

}).call(this);

LevelupManager = (function() {
  class LevelupManager {
    static init(parentElement) {
      var c, j, len, ref, results;
      this.parentElement = parentElement;
      this.divObject = $('<div>').attr('id', this.ID).css({
        width: this.SIZE_X,
        height: this.SIZE_Y
      }).appendTo(this.parentElement);
      this.characters = [];
      ref = GameManager.characters;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        results.push(this.characters.push(c));
      }
      return results;
    }

    static draw() {
      var c, index, j, len, ref, results, top;
      this.characters.sort(function(a, b) {
        return Number(a.getId()) - Number(b.getId());
      });
      this.panels = [];
      $('#' + this.ID + ' > .' + LevelupPanel.CLASSNAME).remove();
      ref = this.characters;
      results = [];
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        c = ref[index];
        top = index * LevelupPanel.SIZE_Y;
        results.push(this.panels.push(new LevelupPanel(this.divObject, c, top)));
      }
      return results;
    }

    static show() {
      return this.divObject.addClass('no_display');
    }

    static hide() {
      return this.divObject.addClass('no_display');
    }

  };

  LevelupManager.ID = 'levelup';

  LevelupManager.SIZE_X = 1050;

  LevelupManager.SIZE_Y = 600;

  return LevelupManager;

}).call(this);

LevelupPanel = (function() {
  class LevelupPanel {
    constructor(parentElement, object1, posY = 0, posX = 0) {
      this.parentElement = parentElement;
      this.object = object1;
      this.posY = posY;
      this.posX = posX;
      this.divObject = $('<div>').addClass(this.constructor.CLASSNAME).css({
        width: this.constructor.SIZE_X,
        height: this.constructor.SIZE_Y,
        top: this.posY,
        left: this.posX
      }).appendTo(this.parentElement);
      this.draw();
    }

    draw() {
      $(this.divObject).find('*').remove();
      this.leftPanel = new Panel(this.divObject, this.object, 0, 0);
      this.rightPanel = new Panel(this.divObject, this.object, 0, Panel.SIZE_X + 200);
      return this.centerController = new LevelupController(this, this.divObject);
    }

    setLevel(levelup) {
      return this.rightPanel.draw(this.object.getLevel() + levelup);
    }

  };

  LevelupPanel.SIZE_X = 400 * 2 + 200;

  LevelupPanel.SIZE_Y = 120;

  LevelupPanel.CLASSNAME = 'levelup_panel';

  return LevelupPanel;

}).call(this);

MenuManager = (function() {
  class MenuManager {
    static init(parentElement, posX, posY) {
      this.parentElement = parentElement;
      this.posX = posX;
      this.posY = posY;
      this.divObject = $('<div>').attr('id', this.ID).css({
        width: this.SIZE_X,
        height: this.SIZE_Y,
        left: this.posX,
        top: this.posY
      });
      // 出撃
      this.pickCharacter = $('<div>').html('出撃').css({
        border: '1px solid #000000',
        width: 100,
        height: 40,
        "font-size": '30px'
      }).on('click', this.onClickCharacterPick.bind(this)).appendTo(this.divObject);
      // 戦闘
      this.battle = $('<div>').html('戦闘').css({
        border: '1px solid #000000',
        width: 100,
        height: 40,
        "font-size": '30px'
      }).on('click', this.onClickBattle.bind(this)).appendTo(this.divObject);
      // ターン終了
      this.turnEnd = $('<div>').html('ターン終了').css({
        border: '1px solid #000000',
        width: 100,
        height: 40,
        "font-size": '30px'
      }).on('click', this.onClickTurnEnd.bind(this)).appendTo(this.divObject);
      // レベルアップ
      this.turnEnd = $('<div>').html('レベルアップ').css({
        border: '1px solid #000000',
        width: 100,
        height: 40,
        "font-size": '30px'
      }).on('click', this.onClickLevelup.bind(this)).appendTo(this.divObject);
      // 前進
      this.turnEnd = $('<div>').html('前進').css({
        border: '1px solid #000000',
        width: 100,
        height: 40,
        "font-size": '30px'
      }).on('click', this.onClickWalk.bind(this)).appendTo(this.divObject);
      // やりなおし
      this.undo = $('<div>').html('移動やりなおし').css({
        border: '1px solid #000000',
        width: 100,
        height: 40,
        "font-size": '30px'
      }).on('click', this.onClickUndo.bind(this)).appendTo(this.divObject);
      // アイテム
      this.item = $('<div>').html('アイテム').css({
        border: '1px solid #000000',
        width: 100,
        height: 40,
        "font-size": '30px'
      }).on('click', this.onClickItem.bind(this)).appendTo(this.divObject);
      return this.divObject.appendTo(this.parentElement);
    }

    // 出撃
    static onClickCharacterPick(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      // 出撃できないモードなら返る
      if (!GameManager.isEnable.characterPick) {
        return;
      }
      // キャラクター出撃モードにする
      GameManager.resetFlags();
      GameManager.isMode.characterPick = true;
      // 戦闘・レベルアップに遷移可能
      GameManager.isEnable.battle = true;
      GameManager.isEnable.levelup = true;
      GameManager.isEnable.item = true;
      GameManager.flags.isCellObjectAnimation = false;
      GameManager.doCharacterPick();
      return true;
    }

    // 戦闘
    static onClickBattle(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      // 戦闘にできないモードなら返る
      if (!GameManager.isEnable.battle) {
        return;
      }
      // 戦闘モードにする
      GameManager.resetFlags();
      GameManager.isMode.battle = true;
      GameManager.isEnable.characterPick = true;
      GameManager.isEnable.levelup = true;
      GameManager.isEnable.battle = true;
      GameManager.isEnable.turnEnd = true;
      GameManager.isEnable.walk = true;
      GameManager.isEnable.undo = true;
      GameManager.isEnable.leftPanel = true;
      GameManager.isEnable.rightPanel = true;
      GameManager.isEnable.item = true;
      GameManager.flags.isCellObjectAnimation = true;
      GameManager.doBattle();
      return true;
    }

    // ターン終了
    static onClickTurnEnd(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      // 前進できないモードなら返る
      if (!GameManager.isEnable.turnEnd) {
        return;
      }
      GameManager.doTurnEnd();
      return true;
    }

    // レベルアップ
    static onClickLevelup(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      // 前進できないモードなら返る
      if (!GameManager.isEnable.levelup) {
        return;
      }
      // レベルアップモードにする
      GameManager.resetFlags();
      GameManager.isMode.levelup = true;
      GameManager.isEnable.characterPick = true;
      GameManager.isEnable.battle = true;
      GameManager.isEnable.item = true;
      GameManager.flags.isCellObjectAnimation = false;
      GameManager.doLevelup();
      return true;
    }

    // 前進
    static onClickWalk(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      // 前進できないモードなら返る
      if (!GameManager.isEnable.walk) {
        return;
      }
      GameManager.doWalk();
      return true;
    }

    // 移動やりなおし
    static onClickUndo(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      // やりなおし不可能なら返る
      if (GameManager.flags.moveToCell === null) {
        return;
      }
      // やりなおしできないモードなら返る
      if (!GameManager.isEnable.undo) {
        return;
      }
      GameManager.doUndo();
      return true;
    }

    // アイテム画面へ
    static onClickItem(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      // アイテムモードにできないなら返る
      if (!GameManager.isEnable.item) {
        return;
      }
      // 描画
      ItemCharacterPicker.draw();
      // レベルアップモードにする
      GameManager.resetFlags();
      GameManager.isMode.item = true;
      GameManager.isEnable.characterPick = true;
      GameManager.isEnable.battle = true;
      GameManager.isEnable.levelup = true;
      GameManager.flags.isCellObjectAnimation = false;
      GameManager.doItem();
      return true;
    }

  };

  MenuManager.ID = 'menu';

  MenuManager.SIZE_X = 1200;

  MenuManager.SIZE_Y = 50;

  MenuManager.elements = {
    pickCharacter: null
  };

  return MenuManager;

}).call(this);

Panel = (function() {
  class Panel {
    constructor(parentElement, object1, posY = 0, posX = 0, isCharacterPallet = false) {
      this.parentElement = parentElement;
      this.object = object1;
      this.posY = posY;
      this.posX = posX;
      this.isCharacterPallet = isCharacterPallet;
      this.divObject = $('<div>').addClass(this.constructor.CLASSNAME).css({
        width: this.constructor.SIZE_X,
        height: this.constructor.SIZE_Y,
        top: this.posY,
        left: this.posX
      }).appendTo(this.parentElement);
      this.draw();
    }

    // アイコンがドラッグ開始された時
    onIconDragStart(evt) {
      if (!GameManager.isControllable()) {
        return;
      }
      // キャラクター出撃に使っていいパネルではないなら帰る
      if (!this.isCharacterPallet) {
        return;
      }
      // キャラクター出撃モードではないので帰る
      if (!GameManager.isMode.characterPick) {
        return;
      }
      // キャラクターではないので帰る
      if (!this.object.isCharacterObject()) {
        return;
      }
      if (this.object.isInField()) {
        // 既に出撃中なので帰る
        return true;
      }
      CharacterPalletManager.pickCharacter(this.object);
      return true;
    }

    draw(level = null) {
      $(this.divObject).find('*').remove();
      if (this.object !== null) {
        switch (this.object.objectType) {
          case ObjectBase.OBJECT_TYPE.CHARACTER:
            return this.drawCharacter(level);
          case ObjectBase.OBJECT_TYPE.ENEMY:
            return this.drawEnemy();
        }
      }
    }

    drawCharacter(level = null) {
      var attackImg;
      // キャラ出撃用のパネルなら、出撃中判定
      if (this.isCharacterPallet && this.object.isInField()) {
        $('<div>').addClass('in_field').css({
          left: 0,
          top: 0,
          "z-index": 9999,
          opacity: 0.5,
          "background-color": '#230381',
          width: this.constructor.SIZE_X,
          height: this.constructor.SIZE_Y,
          'font-size': '80px',
          color: '#000000',
          'text-align': 'center'
        }).html('出撃中').appendTo(this.divObject);
      }
      // アイコン
      $(this.divObject).append($('<div>').addClass('field_icon').css({
        top: 20,
        left: 0,
        width: 90,
        height: 90,
        "background-image": 'url(' + this.object.getBaseImage() + ')'
      }).on('mousedown', (evt) => {
        if (evt.which === 1) {
          this.onIconDragStart.bind(this)(evt);
        }
        return true;
      }));
      // レベルラベル
      $(this.divObject).append($('<div>').addClass('label_level').css({
        top: 0,
        left: 0,
        width: 20,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('Lv'));
      // レベル
      $(this.divObject).append($('<div>').addClass('field_level').css({
        top: 0,
        left: 20,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html(this.object.getLevel(level)));
      // 名前
      $(this.divObject).append($('<div>').addClass('field_name').css({
        top: 0,
        left: 90,
        width: 120,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html(this.object.getCharacterName()));
      // 攻撃力ラベル
      $(this.divObject).append($('<div>').addClass('label_attack').css({
        top: 25,
        left: 90,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('攻撃'));
      // 攻撃タイプ
      attackImg = this.object.getAttackType() === '物理' ? './img/sword.png' : './img/magic.png';
      $(this.divObject).append($('<img>').addClass('field_attack_type').css({
        top: 25,
        left: 130,
        width: 20,
        height: 20
      }).attr('src', attackImg));
      // 攻撃力
      $(this.divObject).append($('<div>').addClass('field_attack').css({
        top: 25,
        left: 160,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getAttack(level)));
      // 物理防御力ラベル
      $(this.divObject).append($('<div>').addClass('label_pdef').css({
        top: 45,
        left: 90,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('物防'));
      // 物理防御力
      $(this.divObject).append($('<div>').addClass('field_pdef').css({
        top: 45,
        left: 160,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getPDef(level)));
      // 魔法防御力ラベル
      $(this.divObject).append($('<div>').addClass('label_mdef').css({
        top: 65,
        left: 90,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('魔防'));
      // 魔法防御力
      $(this.divObject).append($('<div>').addClass('field_mdef').css({
        top: 65,
        left: 160,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getMDef(level)));
      // HPラベル
      $(this.divObject).append($('<div>').addClass('label_hp').css({
        top: 0,
        left: 180,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('HP'));
      // HP
      $(this.divObject).append($('<div>').addClass('field_hp').css({
        top: 0,
        left: 220,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getHp()));
      // HPしきり
      $(this.divObject).append($('<div>').addClass('label_hp_split').css({
        top: 0,
        left: 280,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html('/'));
      // HP最大
      $(this.divObject).append($('<div>').addClass('field_hp_max').css({
        top: 0,
        left: 300,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getHpMax(level)));
      // 命中率ラベル
      $(this.divObject).append($('<div>').addClass('label_hit_rate').css({
        top: 25,
        left: 210,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('命中'));
      // 命中率
      $(this.divObject).append($('<div>').addClass('field_hit_rate').css({
        top: 25,
        left: 260,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getHitRate()));
      // 回避率ラベル
      $(this.divObject).append($('<div>').addClass('label_dodge_rate').css({
        top: 45,
        left: 210,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('回避'));
      // 回避率
      $(this.divObject).append($('<div>').addClass('field_dodge_rate').css({
        top: 45,
        left: 260,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getDodgeRate()));
      // 移動力ラベル
      $(this.divObject).append($('<div>').addClass('label_move').css({
        top: 25,
        left: 310,
        width: 50,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('移動'));
      // 移動力
      $(this.divObject).append($('<div>').addClass('field_move').css({
        top: 25,
        left: 360,
        width: 50,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getMove()));
      // 射程ラベル
      $(this.divObject).append($('<div>').addClass('label_range').css({
        top: 45,
        left: 310,
        width: 50,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('射程'));
      // 射程
      $(this.divObject).append($('<div>').addClass('field_range').css({
        top: 45,
        left: 360,
        width: 50,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getRange()));
      // 能力ラベル
      $(this.divObject).append($('<div>').addClass('label_ability').css({
        top: 85,
        left: 90,
        width: 50,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('能力'));
      // 能力
      return $(this.divObject).append($('<div>').addClass('field_ability').css({
        top: 85,
        left: 130,
        width: 250,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getAbilityName()).tooltip({
        'placement': 'top',
        'title': this.object.getAbilityDesc()
      }));
    }

    drawEnemy() {
      var attackImg;
      // アイコン
      $(this.divObject).append($('<div>').addClass('field_icon').css({
        top: 20,
        left: 0,
        width: 90,
        height: 90,
        "background-image": 'url(' + this.object.getBaseImage() + ')'
      }));
      // レベルラベル
      $(this.divObject).append($('<div>').addClass('label_level').css({
        top: 0,
        left: 0,
        width: 20,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('Lv'));
      // レベル
      $(this.divObject).append($('<div>').addClass('field_level').css({
        top: 0,
        left: 20,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html(this.object.getLevel()));
      // 名前
      $(this.divObject).append($('<div>').addClass('field_name').css({
        top: 0,
        left: 90,
        width: 120,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html(this.object.getCharacterName()));
      // 攻撃力ラベル
      $(this.divObject).append($('<div>').addClass('label_attack').css({
        top: 25,
        left: 90,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('攻撃'));
      // 攻撃タイプ
      attackImg = this.object.getAttackType() === '物理' ? './img/sword.png' : './img/magic.png';
      $(this.divObject).append($('<img>').addClass('field_attack_type').css({
        top: 25,
        left: 130,
        width: 20,
        height: 20
      }).attr('src', attackImg));
      // 攻撃力
      $(this.divObject).append($('<div>').addClass('field_attack').css({
        top: 25,
        left: 160,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getAttack()));
      // 物理防御力ラベル
      $(this.divObject).append($('<div>').addClass('label_pdef').css({
        top: 45,
        left: 90,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('物防'));
      // 物理防御力
      $(this.divObject).append($('<div>').addClass('field_pdef').css({
        top: 45,
        left: 160,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getPDef()));
      // 魔法防御力ラベル
      $(this.divObject).append($('<div>').addClass('label_mdef').css({
        top: 65,
        left: 90,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('魔防'));
      // 魔法防御力
      $(this.divObject).append($('<div>').addClass('field_mdef').css({
        top: 65,
        left: 160,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getMDef()));
      // HPラベル
      $(this.divObject).append($('<div>').addClass('label_hp').css({
        top: 0,
        left: 180,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('HP'));
      // HP
      $(this.divObject).append($('<div>').addClass('field_hp').css({
        top: 0,
        left: 220,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getHp()));
      // HPしきり
      $(this.divObject).append($('<div>').addClass('label_hp_split').css({
        top: 0,
        left: 280,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html('/'));
      // HP最大
      $(this.divObject).append($('<div>').addClass('field_hp_max').css({
        top: 0,
        left: 300,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getHpMax()));
      // 命中率ラベル
      $(this.divObject).append($('<div>').addClass('label_hit_rate').css({
        top: 25,
        left: 210,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('命中'));
      // 命中率
      $(this.divObject).append($('<div>').addClass('field_hit_rate').css({
        top: 25,
        left: 260,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getHitRate()));
      // 回避率ラベル
      $(this.divObject).append($('<div>').addClass('label_dodge_rate').css({
        top: 45,
        left: 210,
        width: 90,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('回避'));
      // 回避率
      $(this.divObject).append($('<div>').addClass('field_dodge_rate').css({
        top: 45,
        left: 260,
        width: 20,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getDodgeRate()));
      // 移動力ラベル
      $(this.divObject).append($('<div>').addClass('label_move').css({
        top: 25,
        left: 310,
        width: 50,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('移動'));
      // 移動力
      $(this.divObject).append($('<div>').addClass('field_move').css({
        top: 25,
        left: 360,
        width: 50,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getMove()));
      // 射程ラベル
      $(this.divObject).append($('<div>').addClass('label_range').css({
        top: 45,
        left: 310,
        width: 50,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('射程'));
      // 射程
      $(this.divObject).append($('<div>').addClass('field_range').css({
        top: 45,
        left: 360,
        width: 50,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getRange()));
      // 能力ラベル
      $(this.divObject).append($('<div>').addClass('label_ability').css({
        top: 85,
        left: 90,
        width: 50,
        height: 20,
        "font-size": "16px",
        "background-color": '#ffffff'
      }).html('能力'));
      // 能力
      return $(this.divObject).append($('<div>').addClass('field_ability').css({
        top: 85,
        left: 130,
        width: 250,
        height: 20,
        "font-size": "16px"
      }).html(this.object.getAbilityName()).tooltip({
        'placement': 'top',
        'title': this.object.getAbilityDesc()
      }));
    }

  };

  Panel.SIZE_X = 400;

  Panel.SIZE_Y = 120;

  Panel.CLASSNAME = 'panel';

  return Panel;

}).call(this);

PresentboxBase = (function() {
  class PresentboxBase extends ObjectBase {
    constructor(params) {
      super(ObjectBase.OBJECT_TYPE.PRESENTBOX);
      // 現在のレベル
      this.level = params.level;
      // 現在のHP
      this.hp = params.hp;
    }

    getPDef(level = null) {
      return +2e308;
    }

    getMDef(level = null) {
      return +2e308;
    }

    gacha() {}

  };

  // 基本攻撃タイプ
  PresentboxBase.attackTypeBase = ObjectBase.ATTACK_TYPE.PHYSIC;

  // 成長率：攻撃力
  PresentboxBase.attackBase = 0;

  // 成長率：HP
  PresentboxBase.hpBase = 0;

  // 成長率：物理防御
  PresentboxBase.pDefBase = 0;

  // 成長率：魔法防御
  PresentboxBase.mDefBase = 0;

  // 基本移動力
  PresentboxBase.moveBase = 0;

  // 基本射程
  PresentboxBase.rangeBase = 0;

  // 基本命中率
  PresentboxBase.hitRateBase = 0;

  // 必要経験値
  PresentboxBase.expRate = 0;

  // 死んだ時の台詞
  PresentboxBase.textDeath = null;

  return PresentboxBase;

}).call(this);

PresentboxBasic = (function() {
  class PresentboxBasic extends PresentboxBase {};

  // キャラ名
  PresentboxBasic.characterName = "プレゼント（白）";

  // 画像のリスト
  PresentboxBasic.images = ["./img/presentbox/presentbox_basic.png"];

  PresentboxBasic.abilityName = "アイテムを出す";

  PresentboxBasic.abilityDesc = "倒すとアイテムを入手できる";

  return PresentboxBasic;

}).call(this);

RightInfoManager = (function() {
  class RightInfoManager extends InfoManager {};

  RightInfoManager.ID = 'right_info';

  return RightInfoManager;

}).call(this);

$().ready(function() {
  return GameManager.init();
});

Utl = class Utl {
  //###########################################

  // 数値にカンマを入れる

  // @param Number num
  // @return String

  //###########################################
  static numFormat(num) {
    return String(num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
  }

  //###########################################

  // min <= n <= max の整数乱数を生成

  // @param Number min
  // @param Number max
  // @return String

  //###########################################
  static rand(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  //###########################################

  // length 文字のランダムな文字列を生成

  // @param Number length
  // @return String

  //###########################################
  static genPassword(length = 4) {
    var chars, i, j, ref, res;
    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    res = '';
    for (i = j = 0, ref = length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
      res += chars.substr(this.rand(0, chars.length - 1), 1);
    }
    return res;
  }

  //###########################################

  // アドレスバーを変更

  // @param String url
  // @return String

  //###########################################
  static adrBar(url) {
    return window.history.replaceState('', '', '' + url);
  }

  //###########################################

  // getクエリを取得

  // @return Object

  //###########################################
  static getQuery(key = null, defaultValue = null) {
    var j, k, len, p, params, query, res, v;
    query = document.location.search.substring(1);
    params = query.split('&');
    res = {};
    for (j = 0, len = params.length; j < len; j++) {
      p = params[j];
      [k, v] = p.split('=');
      res[k] = v;
    }
    if (key === null) {
      return res;
    }
    if (res[key] != null) {
      return res[key];
    }
    return defaultValue;
  }

  //###########################################

  // 数値を min <= num < max の範囲で正規化する

  // @param Number num
  // @param Number min
  // @param Number max
  // @return String

  //###########################################
  static normalize(num, min = 0, max = 1) {
    var range;
    range = Math.abs(max - min);
    if (num < min) {
      num += range * Math.ceil(Math.abs(num - min) / range);
    } else if (max <= num) {
      num -= range * (Math.floor(Math.abs(num - max) / range) + 1);
    }
    return num;
  }

  //###########################################

  // 現在秒を取得

  // @return int

  //###########################################
  static time(date = null) {
    if (date === null) {
      date = new Date();
    }
    return Math.floor(+date / 1000);
  }

  //###########################################

  // 現在ミリ秒を取得

  // @return int/float

  //###########################################
  static militime(date = null, getAsFloat = false) {
    if (date === null) {
      date = new Date();
    }
    return +date / (getAsFloat ? 1000 : 1);
  }

  //###########################################

  // 現在日を YYYY-MM-DD で取得

  // @param Date date
  // @param String dateSep 日付のセパレータ
  // @return String

  //###########################################
  static dateStr(date = null, dateSep = '-') {
    if (date === null) {
      date = new Date();
    }
    return '' + this.zerofill(date.getFullYear(), 4) + dateSep + this.zerofill(date.getMonth() + 1, 2) + dateSep + this.zerofill(date.getDate(), 2);
  }

  //###########################################

  // 現在日時を YYYY-MM-DD HH:ii:ssで取得

  // @param Date date
  // @param String dateSep 日付のセパレータ
  // @param String timeSep 時間のセパレータ
  // @param boolean betweenSep 日付と時間の間の文字
  // @return String

  //###########################################
  static datetimeStr(date = null, dateSep = '-', timeSep = ':', betweenSep = ' ') {
    if (date === null) {
      date = new Date();
    }
    return this.dateStr(date, dateSep) + betweenSep + this.zerofill(date.getHours(), 2) + timeSep + this.zerofill(date.getMinutes(), 2) + timeSep + this.zerofill(date.getSeconds(), 2);
  }

  //###########################################

  // baseDate と targetDate の時刻の差を「何分前」のような表記で取得

  // @param Date targetDate 対象となる日時
  // @param Date baseDate 基準となる日時
  // @param unsigned_int nowSec ついさっき表記する上限の秒数
  // @param String agoStr ついさっき表記の文字列
  // @param String secStr 秒の表記
  // @param String minStr 分の表記
  // @param String hourStr 時間の表記
  // @param String dayStr 日の表記
  // @param String monStr 月の表記
  // @param String yearStr 年の表記
  // @return String

  //###########################################
  static difftime(targetDate, baseDate = null, nowSec = 0, nowStr = 'ついさっき', agoStr = '前', secStr = '秒', minStr = '分', hourStr = '時間', dayStr = '日', monStr = '月', yearStr = '年') {
    var baseTime, d, diffTime, h, m, mo, targetTime, y;
    if (baseDate === null) {
      baseTime = this.time();
    }
    targetTime = this.time(targetDate);
    diffTime = baseTime - targetTime;
    if (diffTime < 0) {
      // 未来
      return null;
    }
    if (nowSec >= diffTime) {
      // ついさっきと表示する基準の秒数
      return nowStr;
    }
    // 一年以上
    y = Math.floor(diffTime / (60 * 60 * 24 * 30 * 12));
    if (y > 0) {
      return '' + y + yearStr + agoStr;
    }
    diffTime -= y * (60 * 60 * 24 * 30 * 12);
    // 一ヶ月以上
    mo = Math.floor(diffTime / (60 * 60 * 24 * 30));
    if (mo > 0) {
      return '' + mo + monStr + agoStr;
    }
    diffTime -= mo * (60 * 60 * 24 * 30);
    // 一日以上
    d = Math.floor(diffTime / (60 * 60 * 24));
    if (d > 0) {
      return '' + d + dayStr + agoStr;
    }
    diffTime -= d * (60 * 60 * 24);
    // 一時間以上
    h = Math.floor(diffTime / (60 * 60));
    if (h > 0) {
      return '' + h + hourStr + agoStr;
    }
    diffTime -= h * (60 * 60);
    // 一分以上
    m = Math.floor(diffTime / 60);
    if (m > 0) {
      return '' + m + minStr + agoStr;
    }
    diffTime -= m * 60;
    if (diffTime > 0) {
      // 一秒以上
      return '' + diffTime + secStr + agoStr;
    }
    // ついさっき
    return nowStr;
  }

  //###########################################

  // 数値をゼロ埋めする

  // @param int num
  // @param int digit 桁数
  // @return int

  //###########################################
  static zerofill(num, digit) {
    return ('' + this.repeat('0', digit) + num).slice(-digit);
  }

  //###########################################

  // str を times 回繰り返した文字列を返す

  // @param String str
  // @param int times
  // @return String

  //###########################################
  static repeat(str, times) {
    return Array(1 + times).join(str);
  }

  //###########################################

  // 配列をシャッフル

  // @param Array ary シャッフルする配列
  // @return Array

  //###########################################
  static shuffle(ary) {
    var i, n;
    n = ary.length;
    while (n) {
      n--;
      i = this.rand(0, n);
      [ary[i], ary[n]] = [ary[n], ary[i]];
    }
    return ary;
  }

  //###########################################

  // 配列 ary に needle が存在するかを調べる

  // @param mixed needle 値
  // @param Array ary
  // @return boolean 存在する場合はtrue, そうでないなら false

  //###########################################
  static inArray(needle, ary) {
    var j, len, v;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (v === needle) {
        return true;
      }
    }
    return false;
  }

  //###########################################

  // 配列のコピーを返す

  // @param Array ary
  // @return Array

  //###########################################
  static clone(obj) {
    var res;
    res = obj;
    if ($.isArray(obj)) {
      res = $.extend(true, [], obj);
    } else if (obj instanceof Object) {
      res = $.extend(true, {}, obj);
    }
    return res;
  }

  //###########################################

  // 長さ length の配列を val で満たして返す

  // @param int length
  // @param mixed val
  // @return Array

  //###########################################
  static arrayFill(length, val = null) {
    var i, j, ref, res;
    res = [];
    for (i = j = 0, ref = length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
      res[i] = this.clone(val);
    }
    return res;
  }

  //###########################################

  // x * y の配列を val で満たして返す

  // @param int x
  // @param int y 省略時は x と同じ長さ
  // @param mixed val
  // @return Array

  //###########################################
  static array2dFill(x, y = null, val = null) {
    var j, l, ref, ref1, res, xx, yAry, yy;
    if (y === null) {
      y = x;
    }
    res = [];
    yAry = [];
    for (yy = j = 0, ref = y; (0 <= ref ? j < ref : j > ref); yy = 0 <= ref ? ++j : --j) {
      yAry[yy] = this.clone(val);
    }
    for (xx = l = 0, ref1 = x; (0 <= ref1 ? l < ref1 : l > ref1); xx = 0 <= ref1 ? ++l : --l) {
      res[xx] = this.clone(yAry);
    }
    return res;
  }

  //###########################################

  // 配列の合計を返す

  // @param Array ary
  // @return Array

  //###########################################
  static arraySum(ary) {
    var j, len, sum, v;
    sum = 0;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      sum += v;
    }
    return sum;
  }

  //###########################################

  // 配列の最小値を返す

  // @param Array ary
  // @return Array

  //###########################################
  static arrayMin(ary) {
    var j, len, min, v;
    min = null;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (min === null || min > v) {
        min = v;
      }
    }
    return min;
  }

  //###########################################

  // 配列の最大値を返す

  // @param Array ary
  // @return Array

  //###########################################
  static arrayMax(ary) {
    var j, len, max, v;
    max = null;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (max === null || max < v) {
        max = v;
      }
    }
    return max;
  }

  //###########################################

  // 連想配列のキーの数を返す

  // @param Object object
  // @return int

  //###########################################
  static count(object) {
    return Object.keys(object).length;
  }

  //###########################################

  // uuid を生成（バージョン4）

  // @return String

  //###########################################
  static uuid4() {
    var i, j, random, uuid;
    uuid = '';
    for (i = j = 0; j < 32; i = ++j) {
      random = Math.random() * 16 | 0;
      if (i === 8 || i === 12 || i === 16 || i === 20) {
        uuid += '-';
      }
      uuid += (i === 12 ? 4 : (i === 16 ? random & 3 | 8 : random)).toString(16);
    }
    return uuid;
  }

  //###########################################

  // ローカルストレージの値を削除

  // @param String key
  // @param mixed value
  // @return undefined

  //###########################################
  static delLs(key) {
    return localStorage.removeItem(key);
  }

  //###########################################

  // ローカルストレージに値を設定

  // @param String key
  // @param mixed value
  // @return undefined

  //###########################################
  static setLs(key, value = null) {
    var json;
    if (value === null) {
      // null は削除
      return this.delLs(key);
    }
    json = JSON.stringify(value);
    return localStorage.setItem(key, json);
  }

  //###########################################

  // ローカルストレージから値を取得

  // @param String key
  // @return undefined

  //###########################################
  static getLs(key) {
    var res;
    res = localStorage.getItem(key);
    try {
      res = JSON.parse(res);
    } catch (error) {
      res = null;
    }
    return res;
  }

  //###########################################

  // 現環境でホイールイベント名を取得

  // @return String

  //###########################################
  static getOnWheel() {
    if ('onwheel' in document) {
      return 'wheel';
    }
    if ('onmousewheel' in document) {
      return 'mousewheel';
    }
    return 'DOMMouseScroll';
  }

  //###########################################

  // マウスイベントから要素内座標を取得

  // @param eventObject e
  // @return Array [x, y]

  //###########################################
  static e2localPos(e) {
    var boundingClientRect;
    boundingClientRect = e.currentTarget.getBoundingClientRect();
    //[e.clientX - boundingClientRect.left, boundingClientRect.height - (e.clientY - boundingClientRect.top)]
    return [e.clientX - boundingClientRect.left, e.clientY - boundingClientRect.top];
  }

  static dumpNumArray2d(ary) {
    var j, l, ref, ref1, res, x, y;
    res = '';
    for (y = j = 0, ref = ary[0].length; (0 <= ref ? j < ref : j > ref); y = 0 <= ref ? ++j : --j) {
      for (x = l = 0, ref1 = ary.length; (0 <= ref1 ? l < ref1 : l > ref1); x = 0 <= ref1 ? ++l : --l) {
        if (ary[x][y] === null) {
          res += '-';
        } else if (ary[x][y] === 10) {
          res += 'A';
        } else if (ary[x][y] === 11) {
          res += 'B';
        } else if (ary[x][y] === 12) {
          res += 'C';
        } else if (ary[x][y] === 13) {
          res += 'D';
        } else if (ary[x][y] === 14) {
          res += 'E';
        } else if (ary[x][y] === 15) {
          res += 'F';
        } else if (ary[x][y] === 16) {
          res += 'G';
        } else if (ary[x][y] === 17) {
          res += 'H';
        } else {
          res += '' + ary[x][y];
        }
      }
      res += "\n";
    }
    return console.log(res);
  }

  static gacha(map) {
    var j, l, len, len1, p, pTotal, seed, target;
    if (map.length <= 0) {
      return false;
    }
    pTotal = 0;
    for (j = 0, len = map.length; j < len; j++) {
      [target, p] = map[j];
      pTotal += p;
    }
    if (pTotal <= 0) {
      return false;
    }
    seed = Utl.rand(1, pTotal);
    pTotal = 0;
    for (l = 0, len1 = map.length; l < len1; l++) {
      [target, p] = map[l];
      pTotal += p;
      if (seed <= pTotal) {
        return target;
      }
    }
    return map[map.legnth - 1][0];
  }

  static sleep(msec) {
    return new Promise((resolve, reject) => {
      return setTimeout(() => {
        return resolve();
      }, msec);
    });
  }

};

Item = class Item {
  constructor(itemId1, params1) {
    this.itemId = itemId1;
    this.params = params1;
    this.amount = 0;
  }

  // 持ってる数を設定
  setAmount(amount) {
    return this.amount = amount;
  }

};
